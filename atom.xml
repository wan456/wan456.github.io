<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>旧时光的鱼</title>
  <subtitle>记录学习前端的知识和技巧</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sanyuyu.xyz/"/>
  <updated>2017-04-28T07:04:09.000Z</updated>
  <id>https://sanyuyu.xyz/</id>
  
  <author>
    <name>🐟 🐟 🐟</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS深入浅出</title>
    <link href="https://sanyuyu.xyz/2017/04/28/JS%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/"/>
    <id>https://sanyuyu.xyz/2017/04/28/JS深入浅出/</id>
    <published>2017-04-28T06:40:40.000Z</published>
    <updated>2017-04-28T07:04:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>#JS深入浅出</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="原始类型"><a href="#原始类型" class="headerlink" title="原始类型"></a>原始类型</h3><p>1.number     数字</p>
<p>2.string      字符</p>
<p>3.boolean     布尔值   true or false</p>
<p>4.null        空 值</p>
<p>5.undefined   未定义</p>
<h3 id="object-对象类型"><a href="#object-对象类型" class="headerlink" title="object 对象类型"></a>object 对象类型</h3><ol>
<li><p>Function</p>
</li>
<li><p>Array</p>
</li>
<li><p>Date </p>
</li>
</ol>
<h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h3><h4 id="和"><a href="#和" class="headerlink" title="+ 和 -"></a>+ 和 -</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var x = &apos;The answer is &apos;  +42;</div><div class="line">var y = 42 + &apos;is the answer&apos;;</div></pre></td></tr></table></figure>
<p>num 变成 数字类型  num - 0</p>
<p>num 变成字符串     num + “</p>
<h4 id="转换数据类型"><a href="#转换数据类型" class="headerlink" title="== 转换数据类型"></a>== 转换数据类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&quot;123&quot; == 123;</div><div class="line">true</div><div class="line">0 == false;</div><div class="line">true</div><div class="line">null == undefined;</div><div class="line">true</div></pre></td></tr></table></figure>
<h4 id="a-b"><a href="#a-b" class="headerlink" title="a === b"></a>a === b</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">类型不同，返回false</div><div class="line">类型相同:</div><div class="line">	null === null</div><div class="line">	undefined === undefined</div><div class="line">	NaN ≠ NaN</div><div class="line">	new Object ≠ new Object</div></pre></td></tr></table></figure>
<h3 id="包装对象"><a href="#包装对象" class="headerlink" title="包装对象"></a>包装对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var str = &quot;string&quot;;</div><div class="line">undefined</div><div class="line">var strObj = new String(&quot;string&quot;);</div><div class="line">undefined</div><div class="line">str</div><div class="line">&quot;string&quot;</div><div class="line">strObj</div><div class="line">String &#123;0: &quot;s&quot;, 1: &quot;t&quot;, 2: &quot;r&quot;, 3: &quot;i&quot;, 4: &quot;n&quot;, 5: &quot;g&quot;, length: 6, [[PrimitiveValue]]: &quot;string&quot;&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#JS深入浅出&lt;/p&gt;
&lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;h3 id=&quot;原始类型&quot;&gt;&lt;a href=&quot;#原始类型&quot; class=&quot;headerlink&quot; t
    
    </summary>
    
      <category term="JS" scheme="https://sanyuyu.xyz/categories/JS/"/>
    
    
      <category term="JS" scheme="https://sanyuyu.xyz/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Datepicker 日历组件开发</title>
    <link href="https://sanyuyu.xyz/2017/04/19/Datepicker/"/>
    <id>https://sanyuyu.xyz/2017/04/19/Datepicker/</id>
    <published>2017-04-19T14:46:01.000Z</published>
    <updated>2017-05-04T09:32:51.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="效果如下："><a href="#效果如下：" class="headerlink" title="效果如下："></a>效果如下：</h5><p><img src="http://ww3.sinaimg.cn/large/006tKfTcly1fesdlxla65j30eu0fyjs7.jpg"></p>
<a id="more"></a>
<p>HTML代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">	&lt;title&gt;datapicker&lt;/title&gt;</div><div class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot;&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;div class=&quot;ui-datepicker-wrapper&quot;&gt;</div><div class="line">		&lt;div class=&quot;ui-datepicker-header&quot;&gt;</div><div class="line">			&lt;a href=&quot;#&quot; class=&quot;ui-datepicker-btn ui-datepicker-prev-btn&quot;&gt;&amp;lt;&lt;/a&gt;</div><div class="line">			&lt;a href=&quot;#&quot; class=&quot;ui-datepicker-btn ui-datepicker-next-btn&quot;&gt;&amp;gt;&lt;/a&gt;</div><div class="line">			&lt;span class=&quot;ui-datepicker-curr-month&quot;&gt;2017-4&lt;/span&gt;</div><div class="line">		&lt;/div&gt;</div><div class="line">		&lt;div class=&quot;ul-datepicker-body&quot;&gt;</div><div class="line">			&lt;table&gt;</div><div class="line">				&lt;thead&gt;</div><div class="line">					&lt;tr&gt;</div><div class="line">						&lt;th&gt;一&lt;/th&gt;</div><div class="line">						&lt;th&gt;二&lt;/th&gt;</div><div class="line">						&lt;th&gt;三&lt;/th&gt;</div><div class="line">						&lt;th&gt;四&lt;/th&gt;</div><div class="line">						&lt;th&gt;五&lt;/th&gt;</div><div class="line">						&lt;th&gt;六&lt;/th&gt;</div><div class="line">						&lt;th&gt;日&lt;/th&gt;</div><div class="line">					&lt;/tr&gt;</div><div class="line">				&lt;/thead&gt;</div><div class="line">				&lt;tbody&gt;</div><div class="line">					&lt;tr&gt;</div><div class="line">						&lt;td&gt;29&lt;/td&gt;</div><div class="line">						&lt;td&gt;30&lt;/td&gt;</div><div class="line">						&lt;td&gt;1&lt;/td&gt;</div><div class="line">						&lt;td&gt;2&lt;/td&gt;</div><div class="line">						&lt;td&gt;3&lt;/td&gt;</div><div class="line">						&lt;td&gt;4&lt;/td&gt;</div><div class="line">						&lt;td&gt;5&lt;/td&gt;</div><div class="line">					&lt;/tr&gt;</div><div class="line">					&lt;tr&gt;</div><div class="line">						&lt;td&gt;6&lt;/td&gt;</div><div class="line">						&lt;td&gt;7&lt;/td&gt;</div><div class="line">						&lt;td&gt;8&lt;/td&gt;</div><div class="line">						&lt;td&gt;9&lt;/td&gt;</div><div class="line">						&lt;td&gt;10&lt;/td&gt;</div><div class="line">						&lt;td&gt;11&lt;/td&gt;</div><div class="line">						&lt;td&gt;12&lt;/td&gt;</div><div class="line">					&lt;/tr&gt;</div><div class="line">					&lt;tr&gt;</div><div class="line">						&lt;td&gt;13&lt;/td&gt;</div><div class="line">						&lt;td&gt;14&lt;/td&gt;</div><div class="line">						&lt;td&gt;15&lt;/td&gt;</div><div class="line">						&lt;td&gt;16&lt;/td&gt;</div><div class="line">						&lt;td&gt;17&lt;/td&gt;</div><div class="line">						&lt;td&gt;18&lt;/td&gt;</div><div class="line">						&lt;td&gt;19&lt;/td&gt;</div><div class="line">					&lt;/tr&gt;</div><div class="line">					&lt;tr&gt;</div><div class="line">						&lt;td&gt;20&lt;/td&gt;</div><div class="line">						&lt;td&gt;21&lt;/td&gt;</div><div class="line">						&lt;td&gt;22&lt;/td&gt;</div><div class="line">						&lt;td&gt;23&lt;/td&gt;</div><div class="line">						&lt;td&gt;24&lt;/td&gt;</div><div class="line">						&lt;td&gt;25&lt;/td&gt;</div><div class="line">						&lt;td&gt;26&lt;/td&gt;</div><div class="line">					&lt;/tr&gt;</div><div class="line">					&lt;tr&gt;</div><div class="line">						&lt;td&gt;27&lt;/td&gt;</div><div class="line">						&lt;td&gt;28&lt;/td&gt;</div><div class="line">						&lt;td&gt;29&lt;/td&gt;</div><div class="line">						&lt;td&gt;30&lt;/td&gt;</div><div class="line">						&lt;td&gt;1&lt;/td&gt;</div><div class="line">						&lt;td&gt;2&lt;/td&gt;</div><div class="line">						&lt;td&gt;3&lt;/td&gt;</div><div class="line">					&lt;/tr&gt;</div><div class="line">				&lt;/tbody&gt;</div><div class="line">			&lt;/table&gt;</div><div class="line">		&lt;/div&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>CSS代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">.ui-datepicker-wrapper &#123;</div><div class="line">	width: 240px;</div><div class="line">	font-size: 16px;</div><div class="line">	color: #666;</div><div class="line">	-webkit-box-shadow: 2px 2px 8px 2px rgba(128,128,128,.3);</div><div class="line">	box-shadow:  2px 2px 8px 2px rgba(128,128,128,.3);</div><div class="line">	margin: 20px auto 0;</div><div class="line"></div><div class="line">&#125;</div><div class="line">.ui-datepicker-wrapper .ui-datepicker-header &#123;</div><div class="line">	padding: 0 20px;</div><div class="line">	height: 50px;</div><div class="line">	line-height: 50px;</div><div class="line">	text-align: center;</div><div class="line">	background: #f0f0f0;</div><div class="line">	border-bottom: 1px solid #ccc;</div><div class="line">	font-weight: bold;</div><div class="line">&#125;</div><div class="line">.ui-datepicker-wrapper .ui-datepicker-btn &#123;</div><div class="line">	font-family: serif;</div><div class="line">	font-size: 20px;</div><div class="line">	width: 20px;</div><div class="line">	height: 50px;</div><div class="line">	line-height: 50px;</div><div class="line">	text-align: center;</div><div class="line">	color: #1abc9c;</div><div class="line">	cursor: pointer;</div><div class="line">	text-decoration: none;</div><div class="line">&#125;</div><div class="line">.ui-datepicker-wrapper .ui-datepicker-prev-btn &#123;</div><div class="line">	float: left;</div><div class="line">&#125;</div><div class="line">.ui-datepicker-wrapper .ui-datepicker-next-btn &#123;</div><div class="line">	float: right;</div><div class="line">&#125;</div><div class="line">.ui-datepicker-wrapper .ul-datepicker-body table &#123;</div><div class="line">	width: 100%;</div><div class="line">	border-collapse: collapse;</div><div class="line">&#125;</div><div class="line">.ui-datepicker-wrapper .ul-datepicker-body th,</div><div class="line">.ui-datepicker-wrapper .ul-datepicker-body td &#123;</div><div class="line">	height: 30px;</div><div class="line">	text-align: center;</div><div class="line">&#125;</div><div class="line">.ui-datepicker-wrapper .ul-datepicker-body th &#123;</div><div class="line">	font-size: 12px;</div><div class="line">	line-height: 40px;</div><div class="line">	height: 40px;</div><div class="line">&#125;</div><div class="line">.ui-datepicker-wrapper .ul-datepicker-body td &#123;</div><div class="line">	font-size: 10px;</div><div class="line">	border: 1px solid #f0f0f0;</div><div class="line">	cursor: pointer;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="最主要的是数据部分"><a href="#最主要的是数据部分" class="headerlink" title="最主要的是数据部分"></a>最主要的是数据部分</h3><p><strong>数据的作用</strong></p>
<p>   渲染当月日历表格<br>   用于点击时取日期值</p>
<p><strong>日期对象</strong><br>.new Date(year,month-1,date)</p>
<p>.月份需要减一  传入数据的话</p>
<p>.越界自动进(退)位</p>
<p>.getFullYear() 获取年份/ </p>
<p>getMonth() 获取的值要比实际小1，比如当前4月，获取的是3，所以要加1/ </p>
<p>.getDate() 获取多少号</p>
<p>.getDay() 获取星期几</p>
<p>. 当月第一天 new Date(year, month-1, 1);</p>
<p>. 当月最后一天 new Date(year, month, 0); <strong><em>代表最后一天，会倒回到31号，或者28号 30号</em></strong></p>
<p>.星期一到星期天 [1,2,3,4,5,6,0]</p>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;效果如下：&quot;&gt;&lt;a href=&quot;#效果如下：&quot; class=&quot;headerlink&quot; title=&quot;效果如下：&quot;&gt;&lt;/a&gt;效果如下：&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tKfTcly1fesdlxla65j30eu0fyjs7.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://sanyuyu.xyz/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JS" scheme="https://sanyuyu.xyz/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Ajax 学习</title>
    <link href="https://sanyuyu.xyz/2017/04/18/study/"/>
    <id>https://sanyuyu.xyz/2017/04/18/study/</id>
    <published>2017-04-18T09:05:46.000Z</published>
    <updated>2017-04-19T09:15:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ajax-概念"><a href="#Ajax-概念" class="headerlink" title="Ajax 概念"></a>Ajax 概念</h2><p>ajax出现之前，都是同步的  </p>
<p><img src="http://ww2.sinaimg.cn/large/006tKfTcgy1feqy8jgpo4j316u0msn1q.jpg"></p>
<p><img src="http://ww4.sinaimg.cn/large/006tKfTcgy1feqy9m5xfcj316w0mwgof.jpg"></p>
<p><img src="http://ww2.sinaimg.cn/large/006tKfTcgy1feqyb03inej316q0mu431.jpg"><br><a id="more"></a></p>
<h3 id="基本过程"><a href="#基本过程" class="headerlink" title="基本过程"></a>基本过程</h3><p>1.运用HTML和CSS来实现页面<br>2.运用XMLHttpRequset和Web服务器进行数据的异步交换<br>3.运用JavaScript操作DOM,实现动态局部刷新</p>
<h3 id="XMLHttpRequset"><a href="#XMLHttpRequset" class="headerlink" title="XMLHttpRequset"></a>XMLHttpRequset</h3><p>var request = new XMLHttpRquest();</p>
<h3 id="概念介绍——HTTP请求"><a href="#概念介绍——HTTP请求" class="headerlink" title="概念介绍——HTTP请求"></a>概念介绍——HTTP请求</h3><p>一个完整的HTTP请求过程，通常有下面7个步骤:</p>
<p>1.建立TCP连接</p>
<p>2.浏览器向服务器发送请求</p>
<p>3.浏览器发送请求头信息</p>
<p>4.服务器应答</p>
<p>5.服务器发送应答头信息</p>
<p>6.服务器向浏览器发送数据</p>
<p>7.服务器关闭TCP连接</p>
<p>一个HTTP请求一般由四部分组成:</p>
<p>1.HTTP请求的方法或动作，比如是GET或POST</p>
<p>2.正在请求的URL，总得指导请求的地址是什么吧</p>
<p>3.请求头，包含一些客户端环境信息，身份验证信息等</p>
<p>4.请求体，也就是请求正文，请求正文中可以包含客户提交的查询字符串信息，表单信息等等<br><img src="http://ww2.sinaimg.cn/large/006tKfTcgy1feqypty5lgj316a0m044i.jpg"></p>
<h4 id="get与post"><a href="#get与post" class="headerlink" title="get与post"></a>get与post</h4><p><strong>get</strong>: 　一般用于信息获取，默认Http请求方法，查询使用URL传递参数<br>　　　　   对所发送信息的数量也有限制，一般在2000个字符　　</p>
<p><strong>post</strong>: 一般用于修改服务器上的资源<br>        对发送信息的数量无限制</p>
<p><img src="http://ww3.sinaimg.cn/large/006tKfTcgy1feqz0ouz8bj312a0eewko.jpg"></p>
<h4 style="text-align:center;">HTTP响应内容</h4>

<p><img src="http://ww1.sinaimg.cn/large/006tKfTcgy1feqz21sfqtj313i0hutbh.jpg"></p>
<p></p><h4 style="text-align:center;">HTTP状态码</h4><br><img src="http://ww3.sinaimg.cn/large/006tKfTcgy1feqz4iidpgj312i0fg7cz.jpg"><p></p>
<h4 id="XMLHttpRquest请求"><a href="#XMLHttpRquest请求" class="headerlink" title="XMLHttpRquest请求"></a>XMLHttpRquest请求</h4><p><strong>open(method,url,async)</strong>    method请求方法 GET POST<br>URL, async表示请求是同步的还是异步的，一般我们使用ajax,使用异步请求,true,默认是tue,可以不填写<br><strong>send(string)</strong> GET 可以不填写 ，或者none</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">request.open(&quot;GET&quot;,get.php,true);</div><div class="line">request.send();</div><div class="line"></div><div class="line">request.open(&quot;POST&quot;,&quot;post.php&quot;,true);</div><div class="line">request.send();</div><div class="line"></div><div class="line">第三个有用</div><div class="line">request.open(&quot;POST&quot;,&quot;create.php&quot;,true);</div><div class="line">request.setRequsetHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);</div><div class="line">request.send(&quot;name=王二狗&amp;sex=男&quot;);</div></pre></td></tr></table></figure>
<h3 style="text-align:center;">XMLHttpRequset取得响应</h3>

<p><img src="http://ww2.sinaimg.cn/large/006tKfTcgy1feqzm1klmgj315i0ky46v.jpg"></p>
<p><strong>.readyState属性</strong> 请求状态</p>
<p><strong>0:</strong> 请求未初始化，open还没调用</p>
<p><strong>1:</strong> 服务器连接已建立，open已经调用了</p>
<p><strong>2:</strong> 请求已接收，也就是接收到头信息了</p>
<p><strong>3:</strong> 请求处理中，也就是接收到响应主体了</p>
<p><strong>4:</strong> 请求已完成，且响应已就绪，也就是响应完成了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var request = new XMLHttpRquest();</div><div class="line">request.open(&quot;GET&quot;,&quot;get.php&quot;,true);</div><div class="line">request.send();</div><div class="line">request.send();</div><div class="line">request.onreadystatechange = function()&#123;</div><div class="line">	if(request.readyState===4 &amp;&amp; request.status===200)&#123;</div><div class="line">		//做一些事情  request.responseText</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p></p><h4 style="text-align:center;">php 兼容服务器</h4><br><strong>.PHP</strong> 是一种创建动态交互性站点的服务器脚本语言<p></p>
<p><strong>.PHP</strong> 能够生成动态页面内容</p>
<p><strong>.PHP</strong> 能够创建、打开、读取、写入、删除以及关闭服务器上的文件</p>
<p><strong>.PHP</strong> 能够接收表单数据并处理</p>
<p><strong>.PHP</strong> 能够发送并取回cookies</p>
<p><strong>.PHP</strong> 能够添加、删除、修改数据库中的数据</p>
<p><strong>.PHP</strong> 能够限制用户访问某些网站的页面</p>
<p><strong>…</strong></p>
<h4 id="PHP测试页面"><a href="#PHP测试页面" class="headerlink" title="PHP测试页面"></a>PHP测试页面</h4><p><strong>.PHP</strong> 脚本以&lt;?php开头,以?&gt;结尾</p>
<p><strong>.PHP</strong> 文件的默认文件扩展名是.php</p>
<p><strong>.PHP</strong> 语句以分号结尾(;)</p>
<p></p><h4 style="text-align:center;">JSON</h4><br><strong>.JSON:</strong> JavasScript对象表示法(JavaScript Object Notation)<p></p>
<p><strong>.JSON</strong> 是存储和交换文本信息的语法，类似XML。它采用键值对的方式来组织，易于人们阅读和编写，同时也易于机器解析和生成</p>
<p><strong>.JSON</strong> 是独立于语言的，也就是不管什么语言，都可以解析json,只需要按照json的规则来就行</p>
<h5 style="text-align:center;">JSON与XML比较</h5><br><strong>.</strong> json的长度和xml格式比起来很短小<br><br><strong>.</strong> json读写的速度更快<br><br><strong>.</strong> json可以使用JavaScript内建的方法直接进行解析，转换成Javascript对象，非常方便<br><br><h5 style="text-align:center;">JSON语法规则</h5><br><strong>.</strong> JSON数据的格式是：名称/值对<br><br>名称/值对组合的名称写在前面(在双引号中)，值对写在后面(同样在双引号中)，中间用冒号隔开：比如”name”:”郭靖”<br><br><strong>.</strong>JSON的值可以使下面这些类型:<br><br>数字(整数或浮点数)，比如123，1.23<br>字符串(在双引号中)<br>逻辑值(tue或false)<br>数组(在方括号中)<br>对象(在花括号中)<br>null<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	&quot;staff&quot;:[</div><div class="line">		&#123;&quot;name&quot;:&quot;洪七&quot;,&quot;age&quot;:70&#125;,</div><div class="line">		&#123;&quot;name&quot;:&quot;郭靖&quot;,&quot;age&quot;:35&#125;,</div><div class="line">		&#123;&quot;name&quot;:&quot;黄蓉&quot;,&quot;age&quot;:30&#125;</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br><h5 style="text-align:center;">JSON解析</h5><br>1.eval和JSON.parse<br>2.在代码中使用eval是很危险的!特别是用它执行第三方的JSON数据(其中可能包含恶意代码时)，尽可能使用JSON.parse()方法解析字符串本身，该方法还可以捕获JSON中的语法错误。<br>两种方式<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var jsondata = &apos;&#123;&quot;staff&quot;:[&#123;&quot;name&quot;:&quot;洪七&quot;,&quot;age&quot;:70&#125;,&#123;&quot;name&quot;:&quot;郭靖&quot;,&quot;age&quot;:35&#125;,&#123;&quot;name&quot;:&quot;黄蓉&quot;,&quot;age&quot;:30&#125;]&#125;&apos;;</div><div class="line">var jsonobj = eval(&apos;(&apos;+ jsondata +&apos;)&apos;);</div><div class="line">alert(jsonobj.staff[0].name);</div><div class="line"></div><div class="line">var jsondata = &apos;&#123;&quot;staff&quot;:[&#123;&quot;name&quot;:&quot;洪七&quot;,&quot;age&quot;:70&#125;,&#123;&quot;name&quot;:&quot;郭靖&quot;,&quot;age&quot;:35&#125;,&#123;&quot;name&quot;:&quot;黄蓉&quot;,&quot;age&quot;:30&#125;]&#125;&apos;;</div><div class="line">var jsonobj = JSON.parse(jsondata);</div><div class="line">alert(jsonobj.staff[0].name);</div></pre></td></tr></table></figure><br><br><h4 style="text-align:center;">用Jquery实现Ajax</h4><br><strong>.Jquery.ajax([settings])</strong><br><br>.type: 类型，”POST”或”GET”,默认为”GET”<br><br>. url: 发送请求的地址<br><br>. data : 是一个对象，连同请求发送到服务器的数据<br><br>.datatype:预期服务器返回的数据类型，如果不指定，Jquery将自动根据HTTP包MIME信息来只能判断，一般我们采用json格式，可以设置为”json”<br><br>. success: 是一个方法，请求成功后的回调函数。传入返回后的数据，以及包含成功代码的字符串<br><br>.error: 是一个方法，请求失败时调用此函数，传入XMLHttpRequest<br><br><h4 style="text-align:center;">跨域</h4><br><img src="http://ww1.sinaimg.cn/large/006tKfTcgy1fes0n5ocxmj31800iq0yp.jpg"><br><br><strong>http:// www. abc.com : 8080 / scripts/jquery.js</strong><br>事实上HTTP和HTTPS两个协议的url看上去都可以省略端口号，但是他们访问的默认端口不同<br><br>HTTP默认访问80端口<br><br>HTTPS默认访问443端口<br><br>所以http访问https肯定是跨域<br><br>端口号是8080，如果是80，可以省略<br><br><strong>.</strong>javaScript处于安全方面的考虑，不允许跨域调用其他页面的对象。什么是跨域呢，简单的理解就是因为JavaScript同源策略的限制，a.com域名下的js无法操作b.com或c.com域名下的对象<br><br><img src="http://ww1.sinaimg.cn/large/006tKfTcgy1fes1cx2jmsj317s0hiaih.jpg" style="width:600px;"><br><br><strong>主域名 abc.com</strong><br><br><strong>www.abc.com</strong>  一级域名<br><br><strong>bbs.abc.com</strong>  一级域名<br><br><strong>beijing.bbs.abc.com</strong> 二级域名<br><br><strong>haidian.beijing.bbs.abc.com</strong> 三级域名<br><br><br><h5 style="text-align:center;">处理跨域方法一： 代理</h5><br>通过在同域名的的Web服务器创建一个代理:<br><br>.北京服务器(域名: www.beijing.com)<br><br> 上海服务器(域名：www.shanghai.com)<br><br> .比如在北京的Web服务器的后台对上海的服务进行了代理<br><br> (www.beijng.com/proxy-shanghaiservice-php)来调用上海服务器<br><br> (www.shanghai.com/service.php)的服务，然后再把响应结果返回给前端，这样前端调用北京同域名的服务就和调用上海的服务效果相同了。<br><br> <h5>处理跨域方法二：JSONP</h5>

<p> <strong>.JSONP</strong>可用于解决主流浏览器的跨域数据访问的问题</p>
<p> 在www.aaa.com页面中</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">function jsonp(json) &#123;</div><div class="line">	alert(json[&quot;name&quot;]);</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;script src=&quot;http://www.bbb.com/jsonp.js&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p> 在www.bbb.com页面中:</p>
<p> jsonp({“name”:”洪七”,”age”:24});</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ajax-概念&quot;&gt;&lt;a href=&quot;#Ajax-概念&quot; class=&quot;headerlink&quot; title=&quot;Ajax 概念&quot;&gt;&lt;/a&gt;Ajax 概念&lt;/h2&gt;&lt;p&gt;ajax出现之前，都是同步的  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tKfTcgy1feqy8jgpo4j316u0msn1q.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tKfTcgy1feqy9m5xfcj316w0mwgof.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tKfTcgy1feqyb03inej316q0mu431.jpg&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Web前端" scheme="https://sanyuyu.xyz/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="ajax" scheme="https://sanyuyu.xyz/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>media quires 媒体查询</title>
    <link href="https://sanyuyu.xyz/2017/04/18/queries/"/>
    <id>https://sanyuyu.xyz/2017/04/18/queries/</id>
    <published>2017-04-18T07:05:00.000Z</published>
    <updated>2017-04-19T02:21:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Media-queries-——媒体类型"><a href="#Media-queries-——媒体类型" class="headerlink" title="Media queries ——媒体类型"></a>Media queries ——媒体类型</h3><p>　　在实际媒体类型有近十种之多，实际之中常用的也就那么几种，不过媒体类型的引用方法也有很多种，常见的有: link标签、@import 和 CSS3新增的@media几种
　　</p>
<h3 id="link方法"><a href="#link方法" class="headerlink" title="link方法"></a>link方法</h3><p>link方法引入媒体类型其实就是在<link>标签引用样式的时候，通过link标签中的media属性来指定不同的媒体类型。如下所示。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot; media=&quot;screen&quot; /&gt;</div><div class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;print.css&quot; media=&quot;print&quot; /&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="import方法"><a href="#import方法" class="headerlink" title="@import方法"></a>@import方法</h3><p>@import可以引用样式文件，同样也可以引用媒体类型，@import引入媒体类型主要用两种方式，一种在样式中通过@import调用另一个样式文件，另一种方法是在<head></head>标签中的<style></style>中引入。<br>如样式文件中调用另一个样式文件时，就可以指定对应的媒体类型。</p>
<p>@import url(reset.css) screen;<br>@import url(print.css) print;</p>
<p>在<head>中&lt;的style&gt;标签中引入媒体类型方法.</head></p>
<head><br><style type="text/css"><br>    @importurl(style.css) all;<br></style><br></head>



<p>@media方法</p>
<p>@media是CSS3中新引进的一个特性，被称为媒体查询。在页面中也可以通过这个属性来引入媒体类型。@media引入媒体类型和@import有点类似也具有两方式。</p>
<p>1.在样式文件中引入媒体类型</p>
<p>@media screen {<br>   选择器{/<em>你的样式代码写在这里…</em>/}<br>}</p>
<p>2.使用@media引入媒体类型的方式是在head标签中的style中引用。</p>
<head><br><style type="text/css"><br>    @media screen{<br>    选择器{/<em>你的样式代码写在这里…</em>/}<br>}<br></style><br></head>


<h3 id="Media-Queries-使用方法"><a href="#Media-Queries-使用方法" class="headerlink" title="Media Queries 使用方法"></a>Media Queries 使用方法</h3><p>Media Queries能在不同的条件下使用不同的样式，使页面在不同在终端设备下达到不同的渲染效果。前面简单的介绍了Media Queries如何引用到项目中，但Media Queries有其自己的使用规则。具体来说,Media Queries的使用方法如下。</p>
<p>@media 媒体类型and （媒体特性）{你的样式}</p>
<p>注意：使用Media Queries必须要使用“@media”开头，然后指定媒体类型（也可以称为设备类型），随后是指定媒体特性（也可以称之为设备特性）。媒体特性的书写方式和样式的书写方式非常相似，主要分为两个部分，第一个部分指的是媒体特性，第二部分为媒体特性所指定的值，而且这两个部分之间使用冒号分隔。例如：</p>
<p>(max-width: 480px)</p>
<p>从前面表中可以得知，主要有十种媒体类型和13种媒体特性，将其组合就类似于不同的CSS集合。但与CSS属性不同的是，媒体特性是通过min/max来表示大于等于或小于做为逻辑判断，而不是使用小于（&lt;）和大于（&gt;）这样的符号来判断。接下来一起来看看Media Queries在实际项目中常用的方式。</p>
<h3 id="1-最大宽度max-width"><a href="#1-最大宽度max-width" class="headerlink" title="1.最大宽度max-width"></a>1.最大宽度max-width</h3><p>“max-width”是媒体特性中最常用的一个特性，其意思是指媒体类型小于或等于指定的宽度时，样式生效。如:</p>
<p>@media screen and (max-width:480px) {<br>    .ads {<br>        display:none;<br>     }<br>}</p>
<p>上面表示的是，当屏幕小于或等于480px，页面中的广告区块(.ads)将都被隐藏。</p>
<h3 id="2-最小宽度-min-width"><a href="#2-最小宽度-min-width" class="headerlink" title="2.最小宽度 min-width"></a>2.最小宽度 min-width</h3><p>“min-width”与”max-width”相反，指的是媒体类型大于或等于指定宽度时，样式生效。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@meida screen and (min-width:900px;) &#123;</div><div class="line">	.wrapper&#123;width: 980px;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面表示的是:当屏幕大于或等于900px时，容器”.wrapper”的宽度为980px;</p>
<h3 id="3-多个媒体特性使用"><a href="#3-多个媒体特性使用" class="headerlink" title="3.多个媒体特性使用"></a>3.多个媒体特性使用</h3><p>Media Queries 可以使用关键词”and”将多个媒体特性结合在一起，也就是说，一个Media Query可以包含0到多个表达式，表达式又可以包含0到多个关键字，以及一种媒体类型。<br>当屏幕在600px-900px之间时，body的背景色渲染为”#f5f5f5”，如下所示.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@media screen and (min-width:600px) and (max-width:900px;)&#123;</div><div class="line">	body &#123;background-color: #f5f5f5;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-设备屏幕的输出宽度Device-Width"><a href="#4-设备屏幕的输出宽度Device-Width" class="headerlink" title="4.设备屏幕的输出宽度Device Width"></a>4.设备屏幕的输出宽度Device Width</h3><p>在智能设备上，例如iPhone、iPad等，还可以根据屏幕设备的尺寸来设置相应的样式（或者调用相应的样式文件）。同样的，对于屏幕设备同样可以使用“min/max”对应参数，如“min-device-width”或者“max-device-width”。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=&quot;stylesheet&quot; media=&quot;screen and (max-device-width:480px)&quot; href=&quot;iphone.css&quot; /&gt;</div></pre></td></tr></table></figure>
<p>上面的代码指的是“iphone.css”样式适用于最大设备宽度为480px，比如说iPhone上的显示，这里的“max-device-width”所指的是设备的实际分辨率，也就是指可视面积分辨率。</p>
<h3 id="5-not关键词"><a href="#5-not关键词" class="headerlink" title="5.not关键词"></a>5.not关键词</h3><p>使用关键词”not”是用来排除某种制定的媒体类型，也就是用来排除符合表达式的设备，换句话说，not关键词表示对后面的表达式执行取反操作，如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@media not print and (max-width: 100px;)&#123;样式代码&#125;</div></pre></td></tr></table></figure>
<p>上面代码表示的是：样式代码将被使用在除打印设备和宽度小于1200px下所有设备中。</p>
<h3 id="6-only关键词"><a href="#6-only关键词" class="headerlink" title="6.only关键词"></a>6.only关键词</h3><p>only用来指定某种特定的媒体类型，可以用来排除不支持媒体查询的浏览器。其实only很多时候是用来对那些不支持Media Query但却支持Media Type的设备隐藏样式表的。其主要有：支持媒体特性的设备，正常调用样式，此时就当only不存在；表示不支持媒体特性但又支持媒体类型的设备，这样就会不读样式，因为其先会读取only而不是screen；另外不支持Media Queries的浏览器，不论是否支持only，样式都不会被采用。如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;linkrel=&quot;stylesheet&quot; media=&quot;only screen and (max-device-width:240px)&quot; href=&quot;android240.css&quot; /&gt;</div><div class="line">在Media Query中如果没有明确指定Media Type，那么其默认为all，如：</div><div class="line"></div><div class="line">&lt;linkrel=&quot;stylesheet&quot; media=&quot;(min-width:701px) and (max-width:900px)&quot; href=&quot;mediu.css&quot; /&gt;</div></pre></td></tr></table></figure>
<p>另外在样式中，还可以使用多条语句来将同一个样式应用于不同的媒体类型和媒体特性中，指定方式如下所示。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;linkrel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot; media=&quot;handheld and (max-width:480px), screen and (min-width:960px)&quot; /&gt;</div></pre></td></tr></table></figure>
<p>上面代码中style.css样式被用在宽度小于或等于480px的手持设备上，或者被用于屏幕宽度大于或等于960px的设备上。</p>
<p>到目前为止，CSS3 Media Queries得到了众多浏览器支持，除了IE6-8浏览器不支持之外，在所有现代浏览器中都可以完美支持。还有一个与众不同的时，Media Queries在其他浏览器中不要像其他CSS3属性一样在不同的浏览器中添加前缀。</p>
<h3 id="响应式设计"><a href="#响应式设计" class="headerlink" title="响应式设计"></a>响应式设计</h3><p>什么是响应式设计呢？维基百科是这样对响应式作的描述：“Responsive设计简单的称为RWD，是精心提供各种设备都能浏览网页的一种设计方法，RWD能让你的网页在不同的设备中展现不同的设计风格。”从这一点描述来说，RWD不是流体布局，也不是网格布局，而是一种独特的网页设计方法。</p>
<p>响应式设计要考虑元素布局的秩序，而且还需要做到“有求必应”，那就需要满足以下三个条件：网站必须建立灵活的网格基础；引用到网站的图片必须是可伸缩的；不同的显示风格，需要在Media Queries上写不同的样式。</p>
<p>要想灵活的使用Responsive，仅满足这几个条件还是不够的，我们必须对Responsive有一个全面的了解。</p>
<h4 id="1-流体网络"><a href="#1-流体网络" class="headerlink" title="1.流体网络"></a>1.流体网络</h4><p>流体网格是一个简单的网格系统，这种网格设计参考了流体设计中的网格系统，将每个网格格子使用百分比单位来控制网格大小。这种网格系统最大的好处是让你的网格大小随时根据屏幕尺寸大小做出相对应的比例缩放。</p>
<h4 id="2-弹性图片"><a href="#2-弹性图片" class="headerlink" title="2.弹性图片"></a>2.弹性图片</h4><p>弹性图片指的是不给图片设置固定尺寸，而是根据流体网格进行缩放，用于适应各种网格的尺寸。而实现方法是比较简单，一句代码就能搞定的事情。</p>
<p>img {max-width:100%;}</p>
<h4 id="3-媒体查询"><a href="#3-媒体查询" class="headerlink" title="3.媒体查询"></a>3.媒体查询</h4><p>媒体查询在CSS3中得到了强大的扩展。使用这个属性可以让你的设计根据用户终端设备适配对应的样式。这也是响应式设计中最为关键的。可以说Responsive设计离开了Medial Queries就失去了他生存的意义。简单的说媒体查询可以根据设备的尺寸，查询出适配的样式。Responsive设计最关注的就是：根据用户的使用设备的当前宽度，你的Web页面将加载一个备用的样式，实现特定的页面风格。</p>
<h4 id="4-屏幕分辨率"><a href="#4-屏幕分辨率" class="headerlink" title="4.屏幕分辨率"></a>4.屏幕分辨率</h4><p>屏幕分辨简单点说就是用户显示器的分辨率，深一点说，屏幕分辨率指的是用户使用的设备浏览您的Web页面时的显示屏幕的分辨率，比如说智能手机浏览器、移动电脑浏览器、平板电脑浏览器和桌面浏览器的分辨率。Responsive设计利用Media Queries属性针对浏览器使用的分辨率来适配对应的CSS样式。因此屏幕分辨率在Responsive设计中是一个很重要的东西，因为只有知道Web页面要在哪种分辨率下显示何种效果，才能调用对应的样式。</p>
<h4 id="5-主要断点"><a href="#5-主要断点" class="headerlink" title="5.主要断点"></a>5.主要断点</h4><p>主要断点，在Web开发中是一个新词，但对于Responsive设计中是一个很重要的一部分。简单的描述就是，设备宽度的临界点。在Media Queries中，其中媒体特性“min-width”和“max-width”对应的属性值就是响应式设计中的断点值。简单点说，就是使用主要断点和次要断点，创建媒体查询的条件。而每个断点会对应调用一个样式文件（或者样式代码），如下图所示：<br><img alt="" src="http://img.mukewang.com/53660c230001fb9603190203.jpg" style="width: 500px;"></p>
<h3 id="Responsive-设计-meta标签"><a href="#Responsive-设计-meta标签" class="headerlink" title="Responsive 设计 meta标签"></a>Responsive 设计 meta标签</h3><p><img alt="" src="http://img.mukewang.com/53660f2c0001190005270386.jpg" style="width: 600px;"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,user-scalable=no/&quot;&gt;</div></pre></td></tr></table></figure>
<h4 id="自由缩放属性-resize"><a href="#自由缩放属性-resize" class="headerlink" title="自由缩放属性 resize"></a>自由缩放属性 resize</h4><p>自由缩放属性resize<br>为了增强用户体验，CSS3增加了很多新的属性，其中resize就是一个重要的属性，它允许用户通过拖动的方式来修改元素的尺寸来改变元素的大小。到目前为止，可以使用overflow属性的任何容器元素。</p>
<p>在此之前，Web设计师为了要实现这样具有拖动效果的UI，使用大量的脚本代码才能实现，这样费时费力，效率极低。</p>
<p>resize属性主要是用来改变元素尺寸大小的，其主要目的是增强用户体验。但使用方法却是极其的简单，先从其语法入手。</p>
<p>resize: none | both | horizontal | vertical | inherit</p>
<table border="1" cellpadding="0" cellspacing="0"><br>    <tbody><br>        <tr><br>            <td style="width:121px;"><br>            <p style="text-align: center;"><strong>属性值</strong></p><br>            </td><br>            <td style="width:447px;"><br>            <p style="text-align: center;"><strong>取值说明</strong></p><br>            </td><br>        </tr><br>        <tr><br>            <td style="width:121px;"><br>            <p style="text-align: center;">none</p><br>            </td><br>            <td style="width:447px;"><br>            <p align="left">用户不能拖动元素修改尺寸大小。</p><br>            </td><br>        </tr><br>        <tr><br>            <td style="width:121px;"><br>            <p style="text-align: center;">both</p><br>            </td><br>            <td style="width:447px;"><br>            <p>用户可以拖动元素，同时修改元素的宽度和高度</p><br>            </td><br>        </tr><br>        <tr><br>            <td style="width:121px;"><br>            <p style="text-align: center;">horizontal</p><br>            </td><br>            <td style="width:447px;"><br>            <p>用户可以拖动元素，仅可以修改元素的宽度，但不能修改元素的高度。</p><br>            </td><br>        </tr><br>        <tr><br>            <td style="width:121px;"><br>            <p style="text-align: center;">vertical</p><br>            </td><br>            <td style="width:447px;"><br>            <p>用户可以拖动元素，仅可以修改元素的高度，但不能修改元素的宽度。</p><br>            </td><br>        </tr><br>        <tr><br>            <td style="width:121px;"><br>            <p style="text-align: center;">inherit</p><br>            </td><br>            <td style="width:447px;"><br>            <p align="left">继承父元素的resize属性值。</p><br>            </td><br>        </tr><br>    </tbody><br></table>

<h4 id="CSS3外轮廓属性"><a href="#CSS3外轮廓属性" class="headerlink" title="CSS3外轮廓属性"></a>CSS3外轮廓属性</h4><p>外轮廓outline在页面中呈现的效果和边框border呈现的效果极其相似，但和元素边框border完全不同，外轮廓线不占用网页布局空间，不一定是矩形，外轮廓是属于一种动态样式，只有元素获取到焦点或者被激活时呈现。</p>
<p>outline属性早在CSS2中就出现了，主要是用来在元素周围绘制一条轮廓线，可以起到突出元素的作用。但是并未得到各主流浏览器的广泛支持，在CSS3中对outline作了一定的扩展，在以前的基础上增加新特性。outline属性的基本语法如下：</p>
<p>outline: ［outline-color］ || [outline-style] || [outline-width] || [outline-offset] || inherit<br> outline: red solid 2px;</p>
<h4 id="CSS3生成内容以及清除浮动"><a href="#CSS3生成内容以及清除浮动" class="headerlink" title="CSS3生成内容以及清除浮动"></a>CSS3生成内容以及清除浮动</h4><p>在Web中插入内容，在CSS2.1时代依靠的是JavaScript来实现。但进入CSS3进代之后我们可以通过CSS3的伪类“:before”，“:after”和CSS3的伪元素“::before”、“::after”来实现，其关键是依靠CSS3中的“content”属性来实现。不过这个属性对于img和input元素不起作用。</p>
<p>在CSS中有一种清楚浮动的方法叫”clearfix”,而这个“clearfix”方法就中就使用了“content”，只不过只是在这里插入了一个空格。如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">.clearfix:before,</div><div class="line"></div><div class="line">.clearfix:after &#123;</div><div class="line"></div><div class="line">       content:””;</div><div class="line"></div><div class="line">       display:table;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">.clearfix:after &#123;</div><div class="line"></div><div class="line">       clear:both;</div><div class="line"></div><div class="line">       overflow:hidden;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Media-queries-——媒体类型&quot;&gt;&lt;a href=&quot;#Media-queries-——媒体类型&quot; class=&quot;headerlink&quot; title=&quot;Media queries ——媒体类型&quot;&gt;&lt;/a&gt;Media queries ——媒体类型&lt;/h3&gt;&lt;p&gt;　　在实际媒体类型有近十种之多，实际之中常用的也就那么几种，不过媒体类型的引用方法也有很多种，常见的有: link标签、@import 和 CSS3新增的@media几种
　　&lt;/p&gt;
&lt;h3 id=&quot;link方法&quot;&gt;&lt;a href=&quot;#link方法&quot; class=&quot;headerlink&quot; title=&quot;link方法&quot;&gt;&lt;/a&gt;link方法&lt;/h3&gt;&lt;p&gt;link方法引入媒体类型其实就是在&lt;link&gt;标签引用样式的时候，通过link标签中的media属性来指定不同的媒体类型。如下所示。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;style.css&amp;quot; media=&amp;quot;screen&amp;quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;print.css&amp;quot; media=&amp;quot;print&amp;quot; /&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="CSS3" scheme="https://sanyuyu.xyz/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>CSS3盒子模型</title>
    <link href="https://sanyuyu.xyz/2017/04/18/CSS3%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
    <id>https://sanyuyu.xyz/2017/04/18/CSS3盒子模型/</id>
    <published>2017-04-18T04:28:18.000Z</published>
    <updated>2017-04-18T06:59:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS3盒子模型"><a href="#CSS3盒子模型" class="headerlink" title="CSS3盒子模型"></a>CSS3盒子模型</h2><h3 id="CSS盒模型"><a href="#CSS盒模型" class="headerlink" title="CSS盒模型"></a>CSS盒模型</h3><p>CSS中有一种基础设计模式叫盒模型，盒模型定义了Web页面中的元素中如何来解析。CSS中每一个元素都是一个盒模型，包括html和body标签元素。在盒模型中主要包括width、height、border、background、padding和margin这些属性，而且他们之间的层次关系可以相互影响，来看一张盒模型的3D展示图：</p>
<p><img src="http://ww4.sinaimg.cn/large/006tKfTcgy1feqq1z8wp9j30hn0epn37.jpg" width="350px" height="300px"></p>
<p>从图中可以看出padding属性和content属性层叠background-image属性，层叠background-color属性，这个是存在的，它们四者之间构成了Ｚ轴（垂直屏幕的坐标）多重层叠关系。但是border属性与margin属性、padding属性三者之间应该是平面上的并级关系，并不能构成Ｚ轴的层叠关系。<br><a id="more"></a><br>在CSS3中新增加了box-sizing属性，能够事先定义盒模型的尺寸解析方式，其语法规则如下：</p>
<p>box-sizing: content-box | border-box | inherit</p>
<p>取值说明</p>
<p>属性值　　　　　　　　　　　　　　　　　　属性值说明</p>
<p>content-box</p>
<p>默认值，其让元素维持W3C的标准盒模型，也就是说元素的宽度和高度（width/height）等于元素边框宽度（border）加上元素内距（padding）加上元素内容宽度或高度（content width/ height），也就是element width/height = border + padding + content width / height</p>
<p>border-box</p>
<p>重新定义CSS2.1中盒模型组成的模式，让元素维持IE传统的盒模型（IE6以下版本和IE6-7怪异模式），也就是说元素的宽度或高度等于元素内容的宽度或高度。从上面盒模型介绍可知，这里的内容宽度或高度包含了元素的border、padding、内容的宽度或高度（此处的内容宽度或高度＝盒子的宽度或高度—边框—内距）。</p>
<p>inherit</p>
<p>使元素继承父元素的盒模型模式</p>
<h3 id="一、Flex布局"><a href="#一、Flex布局" class="headerlink" title="一、Flex布局"></a>一、Flex布局</h3><p>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。<br>任何一个容易都可以指定为Flex布局。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>行内元素也可以使用Flex布局</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display:inline-flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Wevkit内核的浏览器，必须加上-webkit前缀</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: -webkit-flex;    /*safari*/</div><div class="line">	display: flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意，设为Flex布局以后，子元素的float、clear和vertical-align属性将失效</p>
<h3 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h3><p>采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。<br>器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。<br>项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p>
<h3 id="三、容器的属性"><a href="#三、容器的属性" class="headerlink" title="三、容器的属性"></a>三、容器的属性</h3><p>以下6个属性设置在容器上</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">. flex-directionn</div><div class="line">. flex-wrap</div><div class="line">. flex-flow</div><div class="line">. justify-content</div><div class="line">. align-items</div><div class="line">. align-content</div></pre></td></tr></table></figure>
<h4 id="3-1-flex-direction属性"><a href="#3-1-flex-direction属性" class="headerlink" title="3.1 flex-direction属性"></a>3.1 flex-direction属性</h4><p>flex-direction 属性决定主轴的方向 (即项目的排列方向)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	flex-direction: row | row-reverse | column | column-reverse</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071005.png" alt="" title=""><br>它可能有4个值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">. row (默认值): 主轴为水平方向，起点在左端。</div><div class="line">. row-reverse: 主轴为水平方向，起点在右端</div><div class="line">. column: 主轴为垂直方向，起点在上沿</div><div class="line">. column-reverse: 主轴为垂直方向，起点在下沿</div></pre></td></tr></table></figure>
<h4 id="3-2-flex-wrap-属性"><a href="#3-2-flex-wrap-属性" class="headerlink" title="3.2 flex-wrap 属性"></a>3.2 flex-wrap 属性</h4><p>默认情况下，项目都排在一条线上(又称为轴线)上。flex-wrap属性定义，如果一条轴线上，如何换行。<br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071006.png" alt="" title=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	flex-wrap: nowrap | wrap | wrap-reverse;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它可能取三个值<br>1.nowrap(默认): 不换行。<br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071007.png" alt="" title=""><br>2.wrap:换行，第一行在上方。<br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071008.jpg" alt="" title=""><br>3.wrap-reverse: 换行，第一行在下方。<br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071009.jpg" alt="" title=""></p>
<h4 id="3-3-flex-flow"><a href="#3-3-flex-flow" class="headerlink" title="3.3 flex-flow"></a>3.3 flex-flow</h4><p>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-4-justify-content属性"><a href="#3-4-justify-content属性" class="headerlink" title="3.4 justify-content属性"></a>3.4 justify-content属性</h4><p>justify-content属性定义了项目在主轴上的对齐方式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	justify-content: flex-start | flex-end | center | space-between|space-around;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png" alt="" title=""><br>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">. flex-start(默认值) : 左对齐</div><div class="line">. flex-end: 右对齐</div><div class="line">. center: 居中</div><div class="line">. space-between: 两端对齐，项目之间的间隔都相等</div><div class="line">. space-around: 每个项目两侧的间隔相等，所以，项目之间的间隔比项目与边框的间隔大一倍</div></pre></td></tr></table></figure>
<h4 id="3-5-align-items属性"><a href="#3-5-align-items属性" class="headerlink" title="3.5 align-items属性"></a>3.5 align-items属性</h4><p>align-items属性定义项目子啊交叉轴上如何对齐。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	align-items: flex-start | flex-end | center | baseline | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png" alt="" title=""><br>它可能取5个值，具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">. flex-start: 交叉值得起点对齐</div><div class="line">. flex-end: 交叉轴的终点对齐。</div><div class="line">. center: 交叉轴的中点对齐。</div><div class="line">. basseline: 项目的第一行文字的基线对齐。</div><div class="line">. stretch(默认值) : 如果项目末设置高度或设置为auto,将占满整个容器的高度。</div></pre></td></tr></table></figure>
<h4 id="3-6-align-content属性"><a href="#3-6-align-content属性" class="headerlink" title="3.6 align-content属性"></a>3.6 align-content属性</h4><p>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。<br>.box {<br>    align-content: flex-strat | flex-end | center | space-between | space-around | stretch;<br>}<br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071012.png" alt="" title=""><br>该属性可能取6个值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">flex-start：与交叉轴的起点对齐。</div><div class="line">flex-end：与交叉轴的终点对齐。</div><div class="line">center：与交叉轴的中点对齐。</div><div class="line">space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</div><div class="line">space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</div><div class="line">stretch（默认值）：轴线占满整个交叉轴。</div></pre></td></tr></table></figure>
<h3 id="四、项目的属性"><a href="#四、项目的属性" class="headerlink" title="四、项目的属性"></a>四、项目的属性</h3><p>以下6个属性设置在项目上。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">order</div><div class="line">flex-grow</div><div class="line">flex-shrink</div><div class="line">flex-basis</div><div class="line">flex</div><div class="line">align-self</div></pre></td></tr></table></figure>
<h4 id="4-1-order属性"><a href="#4-1-order属性" class="headerlink" title="4.1 order属性"></a>4.1 order属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">  order: &lt;integer&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071013.png" alt="" title=""></p>
<h4 id="4-2-flex-grow属性"><a href="#4-2-flex-grow属性" class="headerlink" title="4.2 flex-grow属性"></a>4.2 flex-grow属性</h4><p>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">	flex-grow: &lt;number&gt;; /默认为0/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071014.png" alt="" title=""><br>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>
<h4 id="4-3-felx-shrink属性"><a href="#4-3-felx-shrink属性" class="headerlink" title="4.3 felx-shrink属性"></a>4.3 felx-shrink属性</h4><p>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">	flex-shrink: &lt;number&gt; /默认为1/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071015.jpg" alt="" title=""><br>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</p>
<h4 id="4-4-flex-basis属性"><a href="#4-4-flex-basis属性" class="headerlink" title="4.4 flex-basis属性"></a>4.4 flex-basis属性</h4><p>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">  flex-basis: &lt;length&gt; | auto; /* default auto */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</p>
<h4 id="4-5-flex属性"><a href="#4-5-flex属性" class="headerlink" title="4.5 flex属性"></a>4.5 flex属性</h4><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">  flex: none | [ &lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt; ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。<br>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>
<h4 id="4-6-align-self属性"><a href="#4-6-align-self属性" class="headerlink" title="4.6 align-self属性"></a>4.6 align-self属性</h4><p>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">  align-self: auto | flex-start | flex-end | center | baseline | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071016.png" alt="" title=""><br>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CSS3盒子模型&quot;&gt;&lt;a href=&quot;#CSS3盒子模型&quot; class=&quot;headerlink&quot; title=&quot;CSS3盒子模型&quot;&gt;&lt;/a&gt;CSS3盒子模型&lt;/h2&gt;&lt;h3 id=&quot;CSS盒模型&quot;&gt;&lt;a href=&quot;#CSS盒模型&quot; class=&quot;headerlink&quot; title=&quot;CSS盒模型&quot;&gt;&lt;/a&gt;CSS盒模型&lt;/h3&gt;&lt;p&gt;CSS中有一种基础设计模式叫盒模型，盒模型定义了Web页面中的元素中如何来解析。CSS中每一个元素都是一个盒模型，包括html和body标签元素。在盒模型中主要包括width、height、border、background、padding和margin这些属性，而且他们之间的层次关系可以相互影响，来看一张盒模型的3D展示图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tKfTcgy1feqq1z8wp9j30hn0epn37.jpg&quot; width=350px height=300px&gt;&lt;/p&gt;
&lt;p&gt;从图中可以看出padding属性和content属性层叠background-image属性，层叠background-color属性，这个是存在的，它们四者之间构成了Ｚ轴（垂直屏幕的坐标）多重层叠关系。但是border属性与margin属性、padding属性三者之间应该是平面上的并级关系，并不能构成Ｚ轴的层叠关系。&lt;br&gt;
    
    </summary>
    
    
      <category term="CSS3" scheme="https://sanyuyu.xyz/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>CSS33D导航栏</title>
    <link href="https://sanyuyu.xyz/2017/04/18/CSS33D%E5%AF%BC%E8%88%AA%E6%A0%8F/"/>
    <id>https://sanyuyu.xyz/2017/04/18/CSS33D导航栏/</id>
    <published>2017-04-18T04:18:59.000Z</published>
    <updated>2017-04-18T04:26:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>##CSS33D导航栏效果</p>
<p>如图所示<br><img src="http://ww2.sinaimg.cn/large/006tKfTcgy1feqps5tv35j31kw08it9j.jpg"> </p>
<a id="more"></a>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">	&lt;title&gt;3D旋转导航栏&lt;/title&gt;</div><div class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;http://www.w3cplus.com/demo/css3/base.css&quot;&gt;</div><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">/*任务一：引入本地字体文件*/</div><div class="line">@font-face&#123;</div><div class="line">	font-family: &apos;sansationregular&apos;;</div><div class="line">	src:url(&apos;http://www.w3cplus.com/demo/css3/3DAnimationDropdownMenu/sansation_regular-webfont.eot&apos;);</div><div class="line">	src: url(&apos;http://www.w3cplus.com/demo/css3/3DAnimationDropdownMenu/sansation_regular-webfont.eot?#iefix&apos;) format(&apos;http://www.w3cplus.com/demo/css3/3DAnimationDropdownMenu/embedded-opentype&apos;),</div><div class="line">	url(&apos;http://www.w3cplus.com/demo/css3/3DAnimationDropdownMenu/sansation_regular-webfont.woff&apos;) format(&apos;woff&apos;),</div><div class="line">	url(&apos;http://www.w3cplus.com/demo/css3/3DAnimationDropdownMenu/sansation_regular-webfont.ttf&apos;) format(&apos;truetype&apos;),</div><div class="line">	url(&apos;http://www.w3cplus.com/demo/css3/3DAnimationDropdownMenu/sansation_regular-webfont.svg#sansationregular&apos;) format(&apos;svg&apos;);</div><div class="line">	font-weight: normal;</div><div class="line">	font-style: normal;</div><div class="line">&#125;</div><div class="line">body &#123;</div><div class="line">	background-color:#edecec;</div><div class="line">&#125;</div><div class="line">/* basic menu styles */</div><div class="line">.nav-menu &#123;</div><div class="line">	display: block;</div><div class="line">	background: #74adaa;</div><div class="line">	width: 950px;</div><div class="line">	margin: 50px auto 150px;</div><div class="line">&#125;</div><div class="line">.nav-menu li &#123;</div><div class="line">	display: inline;</div><div class="line">	float: left;</div><div class="line">	border-right: 1px solid #94c0be;</div><div class="line">&#125;</div><div class="line">.nav-menu li:last-child &#123;</div><div class="line">	border-right: none;</div><div class="line">&#125;</div><div class="line">.nav-menu li a &#123;</div><div class="line">	color: #fff;</div><div class="line">	display: block;</div><div class="line">	text-decoration: none;</div><div class="line">	/* 调用本地字体 */</div><div class="line">	font-family: &apos;sansationregular&apos;;</div><div class="line">	-webkit-font-smoothing: antialiased;</div><div class="line">	-moz-font-smoothing: antialiased;</div><div class="line">	font-smoothing: antialiased;</div><div class="line">	overflow: visible;</div><div class="line">	line-height: 20px;</div><div class="line">	font-size: 20px;</div><div class="line">	padding: 15px 30px 15px 31px;</div><div class="line">&#125;</div><div class="line">.three-d &#123;</div><div class="line"></div><div class="line">	/* 任务三、设置3D舞台布景 */</div><div class="line">	perspective:200px;</div><div class="line">	-o-perspective:200px;</div><div class="line">	-webkit-perspective:200px;</div><div class="line">	-moz-perspective:200px;</div><div class="line">	-ms-perspective:200px;</div><div class="line"></div><div class="line">	/*任务四、设置3D舞台布景过渡效果*/</div><div class="line">	transition:all 0.7s linear;</div><div class="line">	-o-transition:all 0.7s linear;</div><div class="line">	-ms-transition:all 0.7s linear;</div><div class="line">	-moz-transition:all 0.7s linear;</div><div class="line">	-webkit-transition:all 0.7s linear;</div><div class="line">	position: relative;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.three-d:not(.active):hover &#123;</div><div class="line">	cursor: pointer;</div><div class="line">&#125;</div><div class="line">/*任务五、给不是当前状态的3D舞台的悬浮与聚焦状态设置变形效果*/</div><div class="line">.three-d:not(.active):hover .three-d-box, </div><div class="line">.three-d:not(.active):focus .three-d-box &#123;</div><div class="line">	transform:translateZ(-25px) rotateX(90deg);</div><div class="line">	-o-transform:translateZ(-25px) rotateX(90deg);</div><div class="line">	-ms-transform:translateZ(-25px) rotateX(90deg);</div><div class="line">	-moz-transform:translateZ(-25px) rotateX(90deg);</div><div class="line">	-webkit-transform:translateZ(-25px) rotateX(90deg);</div><div class="line">&#125;</div><div class="line">.three-d-box &#123;</div><div class="line">	/*任务六、给3D舞台中“.three-d-box”设置过渡与变形效果*/</div><div class="line">	transform:translateZ(-25px);</div><div class="line">	-o-transform:translateZ(-25px);</div><div class="line">	-ms-transform:translateZ(-25px);</div><div class="line">	-moz-transform:translateZ(-25px);</div><div class="line">	-webkit-transform:translateZ(-25px);</div><div class="line"></div><div class="line">	transition:all .3s ease-out;</div><div class="line">	-o-transition:all .3s ease-out;</div><div class="line">	-ms-transition:all .3s ease-out;</div><div class="line">	-moz-transition:all .3s ease-out;</div><div class="line">	-webkit-transition:all .3s ease-out;</div><div class="line"></div><div class="line"></div><div class="line">	-webkit-transform-style: preserve-3d;</div><div class="line">	-moz-transform-style: preserve-3d;</div><div class="line">	-ms-transform-style: preserve-3d;</div><div class="line">	-o-transform-style: preserve-3d;</div><div class="line">	transform-style: preserve-3d;</div><div class="line">	-webkit-pointer-events: none;</div><div class="line">	-moz-pointer-events: none;</div><div class="line">	-ms-pointer-events: none;</div><div class="line">	-o-pointer-events: none;</div><div class="line">	pointer-events: none;</div><div class="line">	position: absolute;</div><div class="line">	top: 0;</div><div class="line">	left: 0;</div><div class="line">	display: block;</div><div class="line">	width: 100%;</div><div class="line">	height: 100%;</div><div class="line">&#125;</div><div class="line">/*任务七、给导航设置3D前，与3D后变形效果*/</div><div class="line">.front &#123;</div><div class="line">	transform:rotateX(0deg) translateZ(25px);</div><div class="line">	-ms-transform:rotateX(0deg) translateZ(25px);</div><div class="line">	-o-transform:rotateX(0deg) translateZ(25px);</div><div class="line">	-moz-transform:rotateX(0deg) translateZ(25px);</div><div class="line">	-webkit-transform:rotateX(0deg) translateZ(25px);</div><div class="line">&#125;</div><div class="line"></div><div class="line">.back &#123;</div><div class="line">	transform:rotateX(-90deg) translateZ(25px);</div><div class="line">	-ms-transform:rotateX(-90deg) translateZ(25px);</div><div class="line">	-o-transform:rotateX(-90deg) translateZ(25px);</div><div class="line">	-moz-transform:rotateX(-90deg) translateZ(25px);</div><div class="line">	-webkit-transform:rotateX(-90deg) translateZ(25px);</div><div class="line">	color: #FFE7C4;</div><div class="line">&#125;</div><div class="line">.front, .back &#123;</div><div class="line">	display: block;</div><div class="line">	width: 100%;</div><div class="line">	height: 100%;</div><div class="line">	position: absolute;</div><div class="line">	top: 0;</div><div class="line">	left: 0;</div><div class="line">	background: #74adaa;</div><div class="line">	padding: 15px 30px 15px 31px;	</div><div class="line">	color: white;</div><div class="line">	-webkit-pointer-events: none;</div><div class="line">	-moz-pointer-events: none;</div><div class="line">	-ms-pointer-events: none;</div><div class="line">	-o-pointer-events: none;</div><div class="line">	pointer-events: none;</div><div class="line">	-webkit-box-sizing: border-box;</div><div class="line">	box-sizing: border-box;</div><div class="line">&#125;</div><div class="line">/*任务八、设置导航当前状态与悬浮状态下的背景效果*/</div><div class="line">.nav-menu li .active .front,</div><div class="line">.nav-menu li .active .back,</div><div class="line">.nav-menu li a:hover .front,</div><div class="line">.nav-menu li a:hover .back &#123;</div><div class="line">	background-color: #51938F;</div><div class="line">	background-size: 5px 5px;</div><div class="line">	background-position: 0 0, 30px 30px;</div><div class="line">	background-image: -webit-linear-gradient(45deg, #478480 25%, transparent 25%, transparent 75%, #478480 75%, #478480), linear-gradient(45deg, #478480 25%, transparent 25%, transparent 75%, #478480 75%, #478480);</div><div class="line">	background-image: -moz-linear-gradient(45deg, #478480 25%, transparent 25%, transparent 75%, #478480 75%, #478480), linear-gradient(45deg, #478480 25%, transparent 25%, transparent 75%, #478480 75%, #478480);</div><div class="line">	background-image: -ms-linear-gradient(45deg, #478480 25%, transparent 25%, transparent 75%, #478480 75%, #478480), linear-gradient(45deg, #478480 25%, transparent 25%, transparent 75%, #478480 75%, #478480);</div><div class="line">	background-image: -o-linear-gradient(45deg, #478480 25%, transparent 25%, transparent 75%, #478480 75%, #478480), linear-gradient(45deg, #478480 25%, transparent 25%, transparent 75%, #478480 75%, #478480);</div><div class="line">	background-image: linear-gradient(45deg, #478480 25%, transparent 25%, transparent 75%, #478480 75%, #478480), linear-gradient(45deg, #478480 25%, transparent 25%, transparent 75%, #478480 75%, #478480);</div><div class="line">	/*background-image: -webkit-linear-gradient(45deg,#434238 25%,transparent 25%,transparent 75%,#434238 75%,#434238),-ms-linear-gradient(45deg,#434238 25%,transparent 25%,transparent 75%,#434238 75%,#434238),-moz-linear-gradient(45deg,#434238 25%,transparent 25%,transparent 75%,#434238 75%,#434238),-o-linear-gradient(45deg,#434238 25%,transparent 25%,transparent 75%,#434238 75%,#434238),linear-gradient(45deg,#434238 25%,transparent 25%,transparent 75%,#434238 75%,#434238);*/</div><div class="line">&#125;</div><div class="line">.nav-menu ul &#123;</div><div class="line">	position: absolute;</div><div class="line">	text-align: left;</div><div class="line">	line-height: 40px;</div><div class="line">	font-size: 14px;</div><div class="line">	width: 200px;</div><div class="line">	-webkit-transition: all 0.3s ease-in;</div><div class="line">	-moz-transition: all 0.3s ease-in;</div><div class="line">	-ms-transition: all 0.3s ease-in;</div><div class="line">	-o-transition: all 0.3s ease-in;</div><div class="line">	transition: all 0.3s ease-in;</div><div class="line">	-webkit-transform-origin: 0px 0px;</div><div class="line">	-moz-transform-origin: 0px 0px;</div><div class="line">	-ms-transform-origin: 0px 0px;</div><div class="line">	-o-transform-origin: 0px 0px;</div><div class="line">	transform-origin: 0px 0px;</div><div class="line">	-webkit-transform: rotateX(-90deg);</div><div class="line">	-moz-transform: rotateX(-90deg);</div><div class="line">	-ms-transform: rotateX(-90deg);</div><div class="line">	-o-transform: rotateX(-90deg);</div><div class="line">	transform: rotateX(-90deg);</div><div class="line">	-webkit-backface-visibility: hidden;</div><div class="line">	-moz-backface-visibility: hidden;</div><div class="line">	-ms-backface-visibility: hidden;</div><div class="line">	-o-backface-visibility: hidden;</div><div class="line">	backface-visibility: hidden;</div><div class="line">&#125;</div><div class="line">/*任务九、显示下拉导航菜单，并其设置一个变形效果*/</div><div class="line">.nav-menu &gt; li:hover ul &#123;</div><div class="line">	display: block;</div><div class="line">	-webkit-transform: rotateX(0deg);</div><div class="line">	-moz-transform: rotateX(0deg);</div><div class="line">	-ms-transform: rotateX(0deg);</div><div class="line">	-o-transform: rotateX(0deg);</div><div class="line">	transform: rotateX(0deg);          </div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;div id=&quot;nav&quot;&gt;</div><div class="line">		&lt;ul class=&quot;nav-menu clearfix unstyled&quot;&gt;</div><div class="line">			&lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;three-d active&quot;&gt;</div><div class="line">				Home</div><div class="line">				&lt;span class=&quot;three-d-box&quot;&gt;&lt;span class=&quot;front&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;back&quot;&gt;Home&lt;/span&gt;&lt;/span&gt;</div><div class="line">			&lt;/a&gt;&lt;/li&gt;</div><div class="line">			&lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;three-d&quot;&gt;</div><div class="line">				Services</div><div class="line">				&lt;span class=&quot;three-d-box&quot;&gt;&lt;span class=&quot;front&quot;&gt;Services&lt;/span&gt;&lt;span class=&quot;back&quot;&gt;Services&lt;/span&gt;&lt;/span&gt;</div><div class="line">			&lt;/a&gt;&lt;/li&gt;</div><div class="line">			&lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;three-d&quot;&gt;</div><div class="line">				Products</div><div class="line">				&lt;span class=&quot;three-d-box&quot;&gt;&lt;span class=&quot;front&quot;&gt;Products&lt;/span&gt;&lt;span class=&quot;back&quot;&gt;Products&lt;/span&gt;&lt;/span&gt;</div><div class="line">			&lt;/a&gt;&lt;/li&gt;</div><div class="line">			&lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;three-d&quot;&gt;</div><div class="line">				About</div><div class="line">				&lt;span class=&quot;three-d-box&quot;&gt;&lt;span class=&quot;front&quot;&gt;About&lt;/span&gt;&lt;span class=&quot;back&quot;&gt;About&lt;/span&gt;&lt;/span&gt;</div><div class="line">			&lt;/a&gt;&lt;/li&gt;</div><div class="line">			&lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;three-d&quot;&gt;</div><div class="line">				Contact</div><div class="line">				&lt;span class=&quot;three-d-box&quot;&gt;&lt;span class=&quot;front&quot;&gt;Contact&lt;/span&gt;&lt;span class=&quot;back&quot;&gt;Contact&lt;/span&gt;&lt;/span&gt;</div><div class="line">			&lt;/a&gt;&lt;/li&gt;</div><div class="line">			&lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;three-d&quot;&gt;</div><div class="line">				Blog</div><div class="line">				&lt;span class=&quot;three-d-box&quot;&gt;&lt;span class=&quot;front&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;back&quot;&gt;Blog&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;</div><div class="line">				&lt;ul class=&quot;clearfix unstyled drop-menu&quot;&gt;</div><div class="line">					&lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;three-d&quot;&gt;</div><div class="line">							Html5</div><div class="line">							&lt;span class=&quot;three-d-box&quot;&gt;&lt;span class=&quot;front&quot;&gt;Html5&lt;/span&gt;&lt;span class=&quot;back&quot;&gt;Html5&lt;/span&gt;&lt;/span&gt;</div><div class="line">					&lt;/a&gt;&lt;/li&gt;</div><div class="line">					&lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;three-d&quot;&gt;</div><div class="line">						Css3</div><div class="line">						&lt;span class=&quot;three-d-box&quot;&gt;&lt;span class=&quot;front&quot;&gt;Css3&lt;/span&gt;&lt;span class=&quot;back&quot;&gt;Css3&lt;/span&gt;&lt;/span&gt;</div><div class="line">					&lt;/a&gt;&lt;/li&gt;</div><div class="line">					&lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;three-d&quot;&gt;</div><div class="line">						JavaScript</div><div class="line">						&lt;span class=&quot;three-d-box&quot;&gt;&lt;span class=&quot;front&quot;&gt;JavaScript&lt;/span&gt;&lt;span class=&quot;back&quot;&gt;JavaScript&lt;/span&gt;&lt;/span&gt;</div><div class="line">					&lt;/a&gt;&lt;/li&gt;</div><div class="line">					&lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;three-d&quot;&gt;</div><div class="line">						Videogames</div><div class="line">						&lt;span class=&quot;three-d-box&quot;&gt;&lt;span class=&quot;front&quot;&gt;Videogames&lt;/span&gt;&lt;span class=&quot;back&quot;&gt;Videogames&lt;/span&gt;&lt;/span&gt;</div><div class="line">					&lt;/a&gt;&lt;/li&gt;</div><div class="line">				&lt;/ul&gt;</div><div class="line">			&lt;/li&gt;</div><div class="line">			&lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;three-d&quot;&gt;</div><div class="line">				Shop On-line</div><div class="line">				&lt;span class=&quot;three-d-box&quot;&gt;&lt;span class=&quot;front&quot;&gt;Shop On-line&lt;/span&gt;&lt;span class=&quot;back&quot;&gt;Shop On-line&lt;/span&gt;&lt;/span&gt;</div><div class="line">			&lt;/a&gt;&lt;/li&gt;</div><div class="line">		&lt;/ul&gt;</div><div class="line">	&lt;/div&gt;	</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##CSS33D导航栏效果&lt;/p&gt;
&lt;p&gt;如图所示&lt;br&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tKfTcgy1feqps5tv35j31kw08it9j.jpg&quot;&gt; &lt;/p&gt;
    
    </summary>
    
    
      <category term="CSS3" scheme="https://sanyuyu.xyz/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>CSS3动画</title>
    <link href="https://sanyuyu.xyz/2017/04/18/CSS3%E5%8A%A8%E7%94%BB/"/>
    <id>https://sanyuyu.xyz/2017/04/18/CSS3动画/</id>
    <published>2017-04-17T16:19:51.000Z</published>
    <updated>2017-04-18T04:15:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSS3变形–-旋转rotate"><a href="#CSS3变形–-旋转rotate" class="headerlink" title="CSS3变形– 旋转rotate()"></a>CSS3变形– 旋转rotate()</h3><p>旋转rotate()函数通过指定的角度参数使元素相对原点进行旋转。它主要在二维空间内进行操作，设置一个角度值，用来指定旋转的幅度。如果这个值为正值，元素相对原点中心顺时针旋转；如果这个值为负值，元素相对原点中心逆时针旋转。</p>
<h3 id="CSS3的变形–扭曲skew"><a href="#CSS3的变形–扭曲skew" class="headerlink" title="CSS3的变形–扭曲skew()"></a>CSS3的变形–扭曲skew()</h3><p>CSS3中的变形–扭曲 skew()<br>扭曲skew()函数能够让元素倾斜显示。它可以将一个对象以其中心位置围绕着X轴和Y轴按照一定的角度倾斜。这与rotate()函数的旋转不同，rotate()函数只是旋转，而不会改变元素的形状。skew()函数不会旋转，而只会改变元素的形状。</p>
<p>Skew()具有三种情况：</p>
<p>1、skew(x,y)使元素在水平和垂直方向同时扭曲（X轴和Y轴同时按一定的角度值进行扭曲变形）；</p>
<p>第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则值为0，也就是Y轴方向上无斜切。</p>
<p>2、skewX(x)仅使元素在水平方向扭曲变形（X轴扭曲变形）；</p>
<p>3、skewY(y)仅使元素在垂直方向扭曲变形（Y轴扭曲变形）</p>
<a id="more"></a>
<p>示例演示：</p>
<p>通过skew（）函数将长方形变成平行四边形。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">HTML代码：</div><div class="line"></div><div class="line">&lt;div class=&quot;wrapper&quot;&gt;</div><div class="line">  &lt;div&gt;我变成平形四边形&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">CSS代码：</div><div class="line"></div><div class="line">.wrapper &#123;</div><div class="line">  width: 300px;</div><div class="line">  height: 100px;</div><div class="line">  border: 2px dotted red;</div><div class="line">  margin: 30px auto;</div><div class="line">&#125;</div><div class="line">.wrapper div &#123;</div><div class="line">  width: 300px;</div><div class="line">  height: 100px;</div><div class="line">  line-height: 100px;</div><div class="line">  text-align: center;</div><div class="line">  color: #fff;</div><div class="line">  background: orange;</div><div class="line">  -webkit-transform: skew(45deg);</div><div class="line">  -moz-transform:skew(45deg) </div><div class="line">  transform:skew(45deg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="CSS3中的变形–缩放-scale"><a href="#CSS3中的变形–缩放-scale" class="headerlink" title="CSS3中的变形–缩放 scale()"></a>CSS3中的变形–缩放 scale()</h3><p>缩放 scale()函数 让元素根据中心原点对对象进行缩放。</p>
<p>缩放 scale 具有三种情况：</p>
<p>1、 scale(X,Y)使元素水平方向和垂直方向同时缩放（也就是X轴和Y轴同时缩放）</p>
<p>例如：</p>
<p>div:hover {<br>  -webkit-transform: scale(1.5,0.5);<br>  -moz-transform:scale(1.5,0.5)<br>  transform: scale(1.5,0.5);<br>}<br>注意：Y是一个可选参数，如果没有设置Y值，则表示X，Y两个方向的缩放倍数是一样的。</p>
<p>2、scaleX(x)元素仅水平方向缩放（X轴缩放）</p>
<p>3、scaleY(y)元素仅垂直方向缩放（Y轴缩放）</p>
<p>HTML代码：</p>
<p><div class="wrapper"><br>  <div>我将放大1.5倍</div><br></div><br>CSS代码：</p>
<p>.wrapper {<br>  width: 200px;<br>  height: 200px;<br>  border:2px dashed red;<br>  margin: 100px auto;<br>}<br>.wrapper div {<br>  width: 200px;<br>  height: 200px;<br>  line-height: 200px;<br>  background: orange;<br>  text-align: center;<br>  color: #fff;<br>}<br>.wrapper div:hover {<br>  opacity: .5;<br>  -webkit-transform: scale(1.5);<br>  -moz-transform:scale(1.5)<br>  transform: scale(1.5);<br>}<br>演示结果</p>
<p>注意： scale()的取值默认的值为1，当值设置为0.01到0.99之间的任何值，作用使一个元素缩小；而任何大于或等于1.01的值，作用是让元素放大。</p>
<h3 id="CSS3中的变形–位移-translate"><a href="#CSS3中的变形–位移-translate" class="headerlink" title="CSS3中的变形–位移 translate()"></a>CSS3中的变形–位移 translate()</h3><p>translate()函数可以将元素向指定的方向移动，类似于position中的relative，或以简单的理解为，使用translate()函数，可以把元素从原来的位置移动，而不影响在X、Y轴的任何Web组件。<br>translate我们分为三种情况<br>1.translate(x,y)水平方向和垂直方向同时移动（也就是X轴和Y轴同时移动）<br>2.translateX(x)仅水平方向移动(X轴移动)<br>3.translateY(y)仅垂直方向移动(Y轴移动)</p>
<h3 id="CSS3的变形–矩阵-matrix"><a href="#CSS3的变形–矩阵-matrix" class="headerlink" title="CSS3的变形–矩阵 matrix()"></a>CSS3的变形–矩阵 matrix()</h3><p>matrix() 是一个含六个值的(a,b,c,d,e,f)变换矩阵，用来指定一个2D变换，相当于直接应用一个[a b c d e f]变换矩阵。就是基于水平方向（X轴）和垂直方向（Y轴）重新定位元素,此属性值使用涉及到数学中的矩阵，我在这里只是简单的说一下CSS3中的transform有这么一个属性值，如果需要深入了解，需要对数学矩阵有一定的知识。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">HTML代码：</div><div class="line"></div><div class="line">&lt;div class=&quot;wrapper&quot;&gt;</div><div class="line">  &lt;div&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">CSS代码：</div><div class="line">.wrapper &#123;</div><div class="line">  width: 300px;</div><div class="line">  height: 200px;</div><div class="line">  border: 2px dotted red;</div><div class="line">  margin: 40px auto;</div><div class="line">&#125;</div><div class="line">.wrapper div &#123;</div><div class="line">  width:300px;</div><div class="line">  height: 200px;</div><div class="line">  background: orange;</div><div class="line">  -webkit-transform: matrix(1,0,0,1,50,50);</div><div class="line">  -moz-transform:matrix(1,0,0,1,50,50);</div><div class="line">  transform: matrix(1,0,0,1,50,50);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="CSS3中的变形–原点-transform-origin"><a href="#CSS3中的变形–原点-transform-origin" class="headerlink" title="CSS3中的变形–原点 transform-origin"></a>CSS3中的变形–原点 transform-origin</h3><p>任何一个元素都有一个中心点，默认情况之下，其中心点是居于元素X轴和Y轴的50%处。<br>在没有重置transform-origin改变元素原点位置的情况下，CSS变形进行的旋转、位移、缩放，扭曲等操作都是以元素自己中心位置进行变形。但很多时候，我们可以通过transform-origin来对元素进行原点位置改变，使元素原点不在元素的中心位置，以达到需要的原点位置。</p>
<h3 id="CSS3中的动画–过渡属性-transition-property"><a href="#CSS3中的动画–过渡属性-transition-property" class="headerlink" title="CSS3中的动画–过渡属性 transition-property"></a>CSS3中的动画–过渡属性 transition-property</h3><p>早期在Web中要实现动画效果，都是依赖于JavaScript或Flash来完成。但在CSS3中新增加了一个新的模块transition，它可以通过一些简单的CSS事件来触发元素的外观变化，让效果显得更加细腻。简单点说，就是通过鼠标的单击、获得焦点，被点击或对元素任何改变中触发，并平滑地以动画效果改变CSS的属性值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">在CSS中创建简单的过渡效果可以从以下几个步骤来实现</div><div class="line">第一，在默认样式中声明元素的初始状态样式；</div><div class="line">第二，声明过渡元素最终状态样式，比如悬浮状态；</div><div class="line">第三，在默认样式中通过添加过渡函数，添加一些不同的样式</div></pre></td></tr></table></figure>
<p>CSS3的过渡transition属性是一个复合属性，主要包括以下几个子属性。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">transition-proerty:指定过渡或动态模拟的CSS属性</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">transition-duration:指定完成过渡所需的时间</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">trasition-timing-function:指定过渡的函数</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">transition-delay:指定开始出现的延迟时间</div></pre></td></tr></table></figure>
<p>transition-property属性用来指定过渡动画的CSS属性名称，而这个过渡只有具备一个中值点的属性才能具备动画效果，其对应具有过渡的CSS属性主要有:<br><img src="http://ww3.sinaimg.cn/large/006tKfTcly1feq3w7792gj30fb0bpdg1.jpg"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">html:</div><div class="line">&lt;div&gt;&lt;/div&gt;</div><div class="line">css</div><div class="line"> div &#123;</div><div class="line">	width:200px;</div><div class="line">	height:200px;</div><div class="line">	background-color: red;</div><div class="line">	margin: 20px auto;</div><div class="line">	-webkit-transition:background-color 0.5s ease 0.1s;</div><div class="line">	transition:background-color 0.5s ease 0.1s;</div><div class="line">&#125;</div><div class="line">div:hover &#123;</div><div class="line">	background-color: orange;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="CSS3中的动画–过渡时间-transition-duration"><a href="#CSS3中的动画–过渡时间-transition-duration" class="headerlink" title="CSS3中的动画–过渡时间 transition-duration"></a>CSS3中的动画–过渡时间 transition-duration</h3><p>transition-duration 属性主要用来设置一个属性过渡到另一个属性所需的时间，也就是从旧属性过渡到新属性花费的时间，俗称持续时间。<br>例子：<br>在鼠标悬停状态下，同容器从直角慢慢过渡到圆角，并让整个动画持续0.5s。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">html代码：</div><div class="line"></div><div class="line">&lt;div&gt;&lt;/div&gt;</div><div class="line">css代码：</div><div class="line">div &#123;</div><div class="line">	width: 300px;</div><div class="line">	height: 200px;</div><div class="line">	background-color: orange;</div><div class="line">	margin: 20px auto;</div><div class="line">	-webkit-transition-proerty: -wekit-border-radius;</div><div class="line">	transition-property: border-radius;</div><div class="line">	-webkit-transition-duration: 0.5s;</div><div class="line">	transition-duration: 0.5s;</div><div class="line">	-webkit-transition-timing-function: ease-out;</div><div class="line">	-webkit-transition-delay: 0.2s;</div><div class="line">	transition-delay: 0.2s;</div><div class="line">&#125;</div><div class="line">div:hover &#123;</div><div class="line">	border-radius: 20px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="CSS3的动画–过渡函数-transition-timing-function"><a href="#CSS3的动画–过渡函数-transition-timing-function" class="headerlink" title="CSS3的动画–过渡函数 transition-timing-function"></a>CSS3的动画–过渡函数 transition-timing-function</h3><p>transition-timing-function属性指的是过渡的“缓动函数”，主要用来指定浏览器的过渡速度，以及过渡期间的操作进展情况，其中要包括以下几种函数。<br><img src="http://ww4.sinaimg.cn/large/006tKfTcly1feq4hxxsoxj30fo0mk77a.jpg" style="width:504px;height:530px;"></p>
<h3 id="CSS3的动画–过渡函数-transition-delay"><a href="#CSS3的动画–过渡函数-transition-delay" class="headerlink" title="CSS3的动画–过渡函数 transition-delay"></a>CSS3的动画–过渡函数 transition-delay</h3><p>transition-delay属性和transition-duration属性极其类似，不同的是transition-duration是用来设置过渡动画的持续时间，而transition-delay主要用来指定一个动画开始执行的时间，也就是说当改变元素属性值后多长时间开始执行。</p>
<p>有时我们想改变两个或者多个css属性的transition效果时，只要把几个transition的声明串在一起，用逗号（“，”）隔开，然后各自可以有各自不同的延续时间和其时间的速率变换方式。但需要值得注意的一点：第一个时间的值为 transition-duration，第二个为transition-delay。</p>
<p>例如：a{ transition: background 0.8s ease-in 0.3,color 0.6s ease-out 0.3;}</p>
<h3 id="CSS3-Keyframes-介绍"><a href="#CSS3-Keyframes-介绍" class="headerlink" title="CSS3 Keyframes 介绍"></a>CSS3 Keyframes 介绍</h3><p>keyframes被称为关键帧，其类似于Flash中的关键帧。在CSS3中其主要以”@keyframes”开头，后面紧跟着是动画名称加上一对花括号”{…}”,括号中就是一些不同时间段样式规则。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@keyframes changecolor &#123;</div><div class="line">	0%&#123;</div><div class="line">		background: red;</div><div class="line">	&#125;</div><div class="line">	100% &#123;</div><div class="line">		background: green;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在一个”@keyframes”的样式规则可以由多个百分比构成的，如在”0%”到”100%”之间创建更多个百分比，分别给每个百分比中给要有动画效果的元素加上不同的样式，从而达到一种不断变化的效果。<br>经验与技巧：在@keyframes中定义动画名称时，其中0%和100%还可以使用关键词from和to来代表，其中0%对应的是from,10%对应的是to</p>
<p>Chrome 和 Safari 需要前缀 -webkit-；Foxfire 需要前缀 -moz-。</p>
<p>案列演示<br>通过@keyframes声明一个叫”wobble”动画，从”0%”开始到”100%”结束，同时还经历了一个”40%”和”60%”的两个过程，”wobble”动画在”0%”时元素定位到left100px,背景色为green,然后在”40%”时元素过渡到left位150px,背景色为orange,然后在”60%”时元素过渡到left为150px,背景色为blue,最后”100%”时结束动画，元素又回到起点left为100px处，背景色为red</p>
<p>HTML:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;鼠标放到我身上&lt;/div&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">css代码</div><div class="line">@keyframes wobble &#123;</div><div class="line">	0% &#123;</div><div class="line">		margin-left: 100px;</div><div class="line">		background: green;</div><div class="line">	&#125;</div><div class="line">	40% &#123;</div><div class="line">		margin-left:150px;</div><div class="line">		background:orange;</div><div class="line">	&#125;</div><div class="line">	60% &#123;</div><div class="line">		margin-left: 75px;</div><div class="line">		background: blue;	</div><div class="line">	&#125;</div><div class="line">	100% &#123;</div><div class="line">		margin-left: 100px;</div><div class="line">		background:red;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">div &#123;</div><div class="line">	width:100px;</div><div class="line">	height:100px;</div><div class="line">	background:red;</div><div class="line">	color:#fff;</div><div class="line">&#125;</div><div class="line">div &#123;</div><div class="line">	animation: wobble 5s ease 0.1s;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="CSS3中调用动画"><a href="#CSS3中调用动画" class="headerlink" title="CSS3中调用动画"></a>CSS3中调用动画</h3><p>animation-name属性主要是用来调用 @keyframes 定义好的动画。需要特别注意: animation-name 调用的动画名需要和“@keyframes”定义的动画名称完全一致（区分大小写），如果不一致将不具有任何动画效果。</p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">animation-name: none | IDENT[,none|DENT]*;</div></pre></td></tr></table></figure>
<p>1、IDENT是由 @keyframes 创建的动画名，上面已经讲过了（animation-name 调用的动画名需要和“@keyframes”定义的动画名称完全一致）；</p>
<p>2、none为默认值，当值为 none 时，将没有任何动画效果,这可以用于覆盖任何动画。</p>
<p>注意：需要在 Chrome 和 Safari 上面的基础上加上-webkit-前缀，Firefox加上-moz-。</p>
<h3 id="CSS3设置动画播放时间"><a href="#CSS3设置动画播放时间" class="headerlink" title="CSS3设置动画播放时间"></a>CSS3设置动画播放时间</h3><p>animation-duration主要用来设置CSS3动画播放时间，其使用方法和transition-duration类似，是用来指定元素播放动画所持续的时间长，也就是完成从0%到100%一次动画所需时间，单位：S秒<br>语法规则</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">animation-duration: &lt;time&gt;[,&lt;time&gt;]*</div></pre></td></tr></table></figure>
<p>取值<time>为数值，单位为秒，其默认值为“0”，这意味着动画周期为“0”，也就是没有动画效果（如果值为负值会被视为“0”）。</time></p>
<p>案列演示<br>制作一个矩形变成圆形的动画，整个动画持续了10秒钟</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">html</div><div class="line">&lt;div&gt;Hover Me&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>css:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">@keyframes toradius&#123;</div><div class="line">  from &#123;</div><div class="line">    border-radius: 0;</div><div class="line">  &#125;</div><div class="line">  to &#123;</div><div class="line">    border-radius: 100%;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">div &#123;</div><div class="line">  width: 200px;</div><div class="line">  height: 200px;</div><div class="line">  line-height: 200px;</div><div class="line">  text-align: center;</div><div class="line">  color: #fff;</div><div class="line">  background: green;</div><div class="line">  margin: 20px auto;</div><div class="line">&#125;</div><div class="line">div:hover &#123;</div><div class="line">  animation-name: toradius;</div><div class="line">  animation-duration: 10s;</div><div class="line">  animation-timing-function: ease-in-out;</div><div class="line">  animation-delay: .1s;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="CSS3设置动画播放方式"><a href="#CSS3设置动画播放方式" class="headerlink" title="CSS3设置动画播放方式"></a>CSS3设置动画播放方式</h3><p>animation-timing-function属性主要用来设置动画播放方式主要让元素根据时间的推进来改变属性值的变换速率，简单点说就是动画的播放方式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">animation-timing-function:ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;) [, ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;)]*</div></pre></td></tr></table></figure>
<h3 id="CSS3设置动画开始播放的时间"><a href="#CSS3设置动画开始播放的时间" class="headerlink" title="CSS3设置动画开始播放的时间"></a>CSS3设置动画开始播放的时间</h3><p>animation-delay属性用来定义动画开始播放的时间，用来触发动画播放的时间点，和transition-delay属性一样，用于定义在浏览器开始执行动画之前等待的时间。<br>语法规则：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">animation-delay: &lt;time&gt;</div></pre></td></tr></table></figure>
<p>###CSS3中设置动画播放次数<br>animation-iteration-count属性主要用来定义动画的播放次数。<br>语法规则:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">animation-iteration-count: infinite | &lt;number&gt; [,infinite | &lt;number&gt;]*</div></pre></td></tr></table></figure>
<p>1.其值通常为整数，但也可以用带有小数的数字，其默认值为1，这意味着动画将从开始到结束只播放一次。<br>2.如果取值为infinite,动画将会无限次的播放。<br>例子：<br>通过animation-iteration-count属性让动画move只播放5次，代码设置为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">animation-iteration-count: 5;</div></pre></td></tr></table></figure>
<h3 id="CSS3设置动画播放方向"><a href="#CSS3设置动画播放方向" class="headerlink" title="CSS3设置动画播放方向"></a>CSS3设置动画播放方向</h3><p>animation-direction属性主要用来设置动画播放方向，其语法规则如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">animation-direction:normal | alternate [,normal| alternate]*</div></pre></td></tr></table></figure>
<p>主要有两个值:normal、alternate<br>1.normal是默认值，如果设置为normal时，动画的每次循环都是向前播放。<br>2.第一个值alternate,它的作用是，动画播放在第偶数次向前播放，第奇数次向反方向播放。<br>例如：通过animation-direction属性，将move动画播放动画方向设置为alternate,代码为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">animation-direction: alternate;</div></pre></td></tr></table></figure>
<h3 id="CSS3设置动画的播放状态"><a href="#CSS3设置动画的播放状态" class="headerlink" title="CSS3设置动画的播放状态"></a>CSS3设置动画的播放状态</h3><p>animation-play-state 属性主要用来控制动画的播放状态。<br>参数:<br>其主要有两个值:running和paused,<br>其中running是其默认值，主要作用就是类似于音乐播放器一样，可以通过paused将正在播放的动画停下来，也可以通过running将暂停的动画重新播放，这里的重新播放不一定是从元素动画的开始播放，而是从暂停的那个位置开始播放，另外如果暂停了动画的播放，元素的样式将回到最原始设置状态。<br>例如,页面加载时，动画不播放。代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">animation-play-state: paused;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">css代码</div><div class="line"></div><div class="line">@keyframes move &#123;</div><div class="line">  0%&#123;</div><div class="line">    transform: translateY(90px);</div><div class="line">  &#125;</div><div class="line">  15%&#123;</div><div class="line">    transform: translate(90px,90px);</div><div class="line">  &#125;</div><div class="line">  30%&#123;</div><div class="line">    transform: translate(180px,90px);</div><div class="line">  &#125;</div><div class="line">  45%&#123;</div><div class="line">    transform: translate(90px,90px);</div><div class="line">  &#125;</div><div class="line">  60%&#123;</div><div class="line">    transform: translate(90px,0);</div><div class="line">  &#125;</div><div class="line">  75%&#123;</div><div class="line">    transform: translate(90px,90px);</div><div class="line">  &#125;</div><div class="line">  90%&#123;</div><div class="line">    transform: translate(90px,180px);</div><div class="line">  &#125;</div><div class="line">  100%&#123;</div><div class="line">    transform: translate(90px,90px);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">div &#123;</div><div class="line">  width: 200px;</div><div class="line">  height: 200px;</div><div class="line">  border: 1px solid red;</div><div class="line">  margin: 20px auto;</div><div class="line">&#125;</div><div class="line">span &#123;</div><div class="line">  display: inline-block;</div><div class="line">  width: 20px;</div><div class="line">  height: 20px;</div><div class="line">  background: orange;</div><div class="line">  transform: translateY(90px);</div><div class="line">  animation-name: move;</div><div class="line">  animation-duration: 10s;</div><div class="line">  animation-timing-function: ease-in;</div><div class="line">  animation-delay: .2s;</div><div class="line">  animation-iteration-count:infinite;</div><div class="line">  animation-direction:alternate;</div><div class="line">  animation-play-state:paused;</div><div class="line">&#125;</div><div class="line">div:hover span &#123;</div><div class="line">  animation-play-state:running;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="CSS3多列布局-Columns"><a href="#CSS3多列布局-Columns" class="headerlink" title="CSS3多列布局-Columns"></a>CSS3多列布局-Columns</h3><p>为了能在Web页面中方便实现类似报纸、杂志那种多列排版的布局，CSS3多列布局，<br>语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">columns：&lt;column-width&gt; || &lt;column-count&gt;</div></pre></td></tr></table></figure>
<p>多列布局columns属性参数主要就两个属性参数：列宽和列数。</p>
<p><column-width> 主要用来定义多列中每列的宽度</column-width></p>
<p><column-count> 主要用来定义多列中的列数</column-count></p>
<p>举例：要显示2栏显示，每栏宽度为200px，代码为：</p>
<p>columns: 200px 2;</p>
<h4 id="CSS3-列间距column-gap"><a href="#CSS3-列间距column-gap" class="headerlink" title="CSS3 列间距column-gap"></a>CSS3 列间距column-gap</h4><p>column-gap主要用来设置列与列之间的间距，其语法规则如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">column-gap: normal || &lt;length&gt;</div></pre></td></tr></table></figure>
<h4 id="CSS3-列表边框column-rule"><a href="#CSS3-列表边框column-rule" class="headerlink" title="CSS3 列表边框column-rule"></a>CSS3 列表边框column-rule</h4><p>语法规则</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">column-rule:&lt;column-rule-width&gt;|&lt;column-rule-style&gt;|&lt;column-rule-color&gt;</div></pre></td></tr></table></figure>
<p>例如：为了能有效区分栏目列之间的关系，可以为其设置一个列边框，代码为：</p>
<p>column-rule: 2px dotted green;</p>
<h4 id="CSS3-跨列设置column-span"><a href="#CSS3-跨列设置column-span" class="headerlink" title="CSS3 跨列设置column-span"></a>CSS3 跨列设置column-span</h4><p>column-span主要用来定义一个分列元素中的子元素能跨列多少。column-width、column-count等属性能让一元素分成多列，不管里面元素如何排放顺序，他们都是从左向右的放置内容，但有时我们需要基中一段内容或一个标题不进行分列，也就是横跨所有列，此时column-span就可以轻松实现，此属性的语法如下。</p>
<p>column-span: none | all<br>取值说明</p>
<p>属性值</p>
<p>属性值说明</p>
<p>none</p>
<p>此值为column-span的默认值，表示不跨越任何列。</p>
<p>all</p>
<p>这个值跟none值刚好相反，表示的是元素跨越所有列，并定位在列的Ｚ轴之上。</p>
<p>例如：将第一个标题跨越所有列，代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">column-span:all;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;CSS3变形–-旋转rotate&quot;&gt;&lt;a href=&quot;#CSS3变形–-旋转rotate&quot; class=&quot;headerlink&quot; title=&quot;CSS3变形– 旋转rotate()&quot;&gt;&lt;/a&gt;CSS3变形– 旋转rotate()&lt;/h3&gt;&lt;p&gt;旋转rotate()函数通过指定的角度参数使元素相对原点进行旋转。它主要在二维空间内进行操作，设置一个角度值，用来指定旋转的幅度。如果这个值为正值，元素相对原点中心顺时针旋转；如果这个值为负值，元素相对原点中心逆时针旋转。&lt;/p&gt;
&lt;h3 id=&quot;CSS3的变形–扭曲skew&quot;&gt;&lt;a href=&quot;#CSS3的变形–扭曲skew&quot; class=&quot;headerlink&quot; title=&quot;CSS3的变形–扭曲skew()&quot;&gt;&lt;/a&gt;CSS3的变形–扭曲skew()&lt;/h3&gt;&lt;p&gt;CSS3中的变形–扭曲 skew()&lt;br&gt;扭曲skew()函数能够让元素倾斜显示。它可以将一个对象以其中心位置围绕着X轴和Y轴按照一定的角度倾斜。这与rotate()函数的旋转不同，rotate()函数只是旋转，而不会改变元素的形状。skew()函数不会旋转，而只会改变元素的形状。&lt;/p&gt;
&lt;p&gt;Skew()具有三种情况：&lt;/p&gt;
&lt;p&gt;1、skew(x,y)使元素在水平和垂直方向同时扭曲（X轴和Y轴同时按一定的角度值进行扭曲变形）；&lt;/p&gt;
&lt;p&gt;第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则值为0，也就是Y轴方向上无斜切。&lt;/p&gt;
&lt;p&gt;2、skewX(x)仅使元素在水平方向扭曲变形（X轴扭曲变形）；&lt;/p&gt;
&lt;p&gt;3、skewY(y)仅使元素在垂直方向扭曲变形（Y轴扭曲变形）&lt;/p&gt;
    
    </summary>
    
      <category term="CSS3" scheme="https://sanyuyu.xyz/categories/CSS3/"/>
    
    
      <category term="CSS3" scheme="https://sanyuyu.xyz/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>css3 基础</title>
    <link href="https://sanyuyu.xyz/2017/04/17/css3/"/>
    <id>https://sanyuyu.xyz/2017/04/17/css3/</id>
    <published>2017-04-17T08:18:06.000Z</published>
    <updated>2017-04-17T10:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="box-shadow"><a href="#box-shadow" class="headerlink" title="box-shadow"></a>box-shadow</h2><p>阴影类型：此参数可选。如不设值，默认投影方式是外阴影；如取其唯一值“inset”，其投影为内阴影；</p>
<p>X-offset:阴影水平偏移量，其值可以是正负值。如果值为正值，则阴影在对象的右边，其值为负值时，阴影在对象的左边；</p>
<p>Y-offset:阴影垂直偏移量，其值也可以是正负值。如果为正值，阴影在对象的底部，其值为负值时，阴影在对象的顶部；</p>
<p>阴影模糊半径：此参数可选，，但其值只能是为正值，如果其值为0时，表示阴影不具有模糊效果，其值越大阴影的边缘就越模糊；</p>
<p>阴影扩展半径：此参数可选，其值可以是正负值，如果值为正，则整个阴影都延展扩大，反之值为负值时，则缩小；</p>
<p>阴影颜色：此参数可选。如不设定颜色，浏览器会取默认色，但各浏览器默认取色不一致，特别是在webkit内核下的safari和chrome浏览器下表现为透明色，在Firefox/Opera下表现为黑色（已验证），建议不要省略此参数。</p>
<h2 id="CSS3-线性渐变"><a href="#CSS3-线性渐变" class="headerlink" title="CSS3 线性渐变"></a>CSS3 线性渐变</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">linegar-gradient (to bottom,#fff,#999);</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="CSS3-text-shadow"><a href="#CSS3-text-shadow" class="headerlink" title="CSS3 text-shadow"></a>CSS3 text-shadow</h2><p>text-overflow 用来设置是否使用一个省略标记(…)标示对象内文本的溢出。<br>text-overflow:clip 标示剪切 | ellipsis 标示省略</p>
<p>但是text-overflow只是用来说明文字溢出时用什么方式显示，要实现溢出时产生省略号的效果，还须定义强制文本在一行内显示(white-space:nowrap)及溢出内容为隐藏(overflow:hidden)，只有这样才能实现溢出文本显示省略号的效果，代码如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">text-overflow:ellipsis;</div><div class="line">overflow:hidden;</div><div class="line">white-space:nowrap;​</div></pre></td></tr></table></figure>
<p>同时word-wrap也可以用来设置文本行为，当前行超过指定容器的边界时是否断开转行。<br>语法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">world-wrap:normal表示控制连续文本换行 | break-word 表示内容将在边界内换行</div></pre></td></tr></table></figure>
<h2 id="CSS3文字与字体-嵌入字体font-face"><a href="#CSS3文字与字体-嵌入字体font-face" class="headerlink" title="CSS3文字与字体 嵌入字体font-face"></a>CSS3文字与字体 嵌入字体font-face</h2><p>@font-face能够加载服务器端的字体文件，让浏览器可以显示用户电脑里没有安装的字体</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@font-face &#123;</div><div class="line">	font-family: 字体名称;</div><div class="line">	src : 字体文件在服务器上的相对或绝对路径</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>比如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">p&#123;</div><div class="line">	font-face : 12px;</div><div class="line">	font-family: &quot;My Font&quot;;</div><div class="line">	/*必须项，设置@font-face中font-family同样的值*/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="CSS3-文字与字体-文本阴影text-shadow"><a href="#CSS3-文字与字体-文本阴影text-shadow" class="headerlink" title="CSS3 文字与字体 文本阴影text-shadow"></a>CSS3 文字与字体 文本阴影text-shadow</h2><p>text-shadow 可以用来设置文本的阴影效果</p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">text-shadow: X-Offset Y-offset blur color;</div></pre></td></tr></table></figure>
<p>X-offset：表示阴影的水平偏移距离<br>Y-offset: 表示阴影的垂直偏移距离<br>Blur: 是指阴影的模糊程度，其值不能是负值，如果值越大，阴影越模糊，反之阴影越清晰，如果不需要阴影模糊可以将Blur值设置为0;<br>color: 是指阴影的颜色，其可以使用 rgba色，<br>比如，我们可以用下面代码设置阴影效果。<br>text-shadow: 0 1px 1px #fff;</p>
<h2 id="css3背景-background-origin"><a href="#css3背景-background-origin" class="headerlink" title="css3背景 background-origin"></a>css3背景 background-origin</h2><p>设置元素背景图片的原始起始位置。<br>语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">background-origin : border-box | padding-box | content-box;</div></pre></td></tr></table></figure>
<p>参数分别表示背景图片是从边框还是内边框(默认值)，或者是内容区域开始显示。</p>
<h4 id="css3背景-background-clip-图片剪切"><a href="#css3背景-background-clip-图片剪切" class="headerlink" title="css3背景 background-clip 图片剪切"></a><strong>css3背景 background-clip 图片剪切</strong></h4><h3 id="css3背景-background-size"><a href="#css3背景-background-size" class="headerlink" title="css3背景 background-size"></a>css3背景 background-size</h3><p>设置背景图片的大小，以长度值或百分比显示，还可以通过cover和contain来对图片进行伸缩<br>语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">background-size: auto |&lt;长度值&gt; |&lt;百分比&gt;|cover | contain</div></pre></td></tr></table></figure>
<p>1.auto: 默认值，不改变背景图片的原始高度和宽度</p>
<ol>
<li>&lt;长度值&gt; : 成对出现如200px 50px 将背景图片宽高依次设置为前面两个值，当设置一个值时，将其作为图片宽度值来等比缩放；</li>
<li>&lt;百分比&gt; 0%~100%之间的任何值，将背景图片一次设置为所在元素宽高乘以前面百分比得出的数值，当设置一个值时，同上，</li>
<li>cover：覆盖，即将背景图片等比缩放至某一变紧贴容易边缘为止</li>
<li>contain: 容纳，即将背景图片等比缩放某一边，紧贴容器边缘为止。<h4 id="css3多重背景"><a href="#css3多重背景" class="headerlink" title="css3多重背景"></a>css3多重背景</h4></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">background:url(http://static.mukewang.com/static/img/logo_index.png) no-repeat</div><div class="line">    0 0 / 75% 55%, url(http://static.mukewang.com/static/img/logo_index.png) no-repeat right bottom / 50% 40%;</div></pre></td></tr></table></figure>
<h2 id="css3实现立体导航栏"><a href="#css3实现立体导航栏" class="headerlink" title="css3实现立体导航栏"></a>css3实现立体导航栏</h2><p>效果<br><img src="http://ww3.sinaimg.cn/large/006tKfTcgy1feptmkwaqsj313o07g75c.jpg"><br>代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">	&lt;title&gt;导航栏&lt;/title&gt;</div><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">	body &#123;</div><div class="line">		background: #ebebeb;</div><div class="line">	&#125;</div><div class="line">	.nav &#123;</div><div class="line">		width: 560px;</div><div class="line">		height: 50px;</div><div class="line">		line-height: 50px;</div><div class="line">		font-weight: bold;</div><div class="line">		margin: 40px auto 0;</div><div class="line">		font-family: Arial;</div><div class="line">		background: #f65f57;</div><div class="line">		border-radius: 5px;</div><div class="line">		box-shadow: 0 3px 5px #666;</div><div class="line">	&#125;</div><div class="line">	.nav li &#123;</div><div class="line">		position: relative;</div><div class="line">		display: inline-block;</div><div class="line">		list-style: none;</div><div class="line">		font-size: 13px;</div><div class="line">		text-shadow: 1px 2px 4px rgba(0,0,0,0.5);</div><div class="line">		list-style: none outside none;</div><div class="line">		padding: 0 16px;</div><div class="line">	&#125;</div><div class="line">	.nav a &#123;</div><div class="line">		display: inline-block;</div><div class="line">		-webkit-transition: all 0.2s ease-in;</div><div class="line">		-moz-transition: all 0.2s ease-in;</div><div class="line">		-o-transition: all 0.2s ease-in;</div><div class="line">		-ms-transition: all 0.2s ease-in;</div><div class="line">		transition: all 0.2s ease-in;</div><div class="line">	&#125;</div><div class="line">	.nav a:hover &#123;</div><div class="line">		-webkit-transform:rotate(20deg);</div><div class="line">		-ms-transform:rotate(20deg);</div><div class="line">		-o-transform:rotate(20deg);</div><div class="line">		-moz-transform:rotate(20deg);</div><div class="line">		transform:rotate(20deg);</div><div class="line">	&#125;</div><div class="line">/* 使用伪元素制作导航列表分割线*/</div><div class="line">	.nav li:before &#123;</div><div class="line">		content: &quot;&quot;;</div><div class="line">		color: #666;</div><div class="line">		position: absolute;</div><div class="line">		height: 20px;</div><div class="line">		width: 1px;</div><div class="line">		top: 15px;</div><div class="line">		left: -1px;</div><div class="line">		background-image: linear-gradient(to right, #f65f57,#993333,#f65f57);</div><div class="line">	&#125;</div><div class="line">/*删除第一项和最后一项当行分割线*/</div><div class="line"> .nav li:first-child::before &#123;</div><div class="line">	background-image: none;</div><div class="line"> &#125;</div><div class="line">.nav a, .nav a:hover &#123;</div><div class="line">	color: #fff;</div><div class="line">	text-decoration: none;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;ul class=&quot;nav&quot;&gt;</div><div class="line">		&lt;li&gt;&lt;a href=&quot;&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;</div><div class="line">		&lt;li&gt;&lt;a href=&quot;&quot;&gt;About Me&lt;/a&gt;&lt;/li&gt;</div><div class="line">		&lt;li&gt;&lt;a href=&quot;&quot;&gt;Protfolio&lt;/a&gt;&lt;/li&gt;</div><div class="line">		&lt;li&gt;&lt;a href=&quot;&quot;&gt;Blog&lt;/a&gt;&lt;/li&gt;</div><div class="line">		&lt;li&gt;&lt;a href=&quot;&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;</div><div class="line">		&lt;li&gt;&lt;a href=&quot;&quot;&gt;Contact Me&lt;/a&gt;&lt;/li&gt;</div><div class="line">	&lt;/ul&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="CSS3选择器-属性选择器"><a href="#CSS3选择器-属性选择器" class="headerlink" title="CSS3选择器 属性选择器"></a>CSS3选择器 属性选择器</h2><p>在HTML中，通过各种各样的属性可以给元素增加很多附加的信息。例如，通过，ID属性可以将不同div元素进行区分。<br>实例展示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">html代码:</div><div class="line"></div><div class="line">&lt;a href=&quot;xxx.pdf&quot;&gt;我链接的是PDF文件&lt;/a&gt;</div><div class="line">&lt;a href=&quot;#&quot; class=&quot;icon&quot;&gt;我类名是icon&lt;/a&gt;</div><div class="line">&lt;a href=&quot;#“ title=”我的title是more“&gt;我的title是more&lt;/a&gt;</div><div class="line"></div><div class="line">css代码</div><div class="line">a[class^=icon] &#123;</div><div class="line">	background: green;</div><div class="line">	color:#fff;</div><div class="line">&#125;</div><div class="line">a[href$=pdf] &#123;</div><div class="line">	background: orange;</div><div class="line">	color:#fff;</div><div class="line">&#125;</div><div class="line">a[title*=more] &#123;</div><div class="line">	background: blue;</div><div class="line">	color: #fff;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="CSS3结构伪类选择器-not"><a href="#CSS3结构伪类选择器-not" class="headerlink" title="CSS3结构伪类选择器 - not"></a>CSS3结构伪类选择器 - not</h3><p>div:not([id=”footer”]){<br>  background-color: orange;<br>}</p>
<h3 id="CSS3-结构性伪类选择器—nth-child-n"><a href="#CSS3-结构性伪类选择器—nth-child-n" class="headerlink" title="CSS3 结构性伪类选择器—nth-child(n)"></a>CSS3 结构性伪类选择器—nth-child(n)</h3><p>“:nth-child(n)”选择器用来定位某个父元素的一个或多个特定的子元素。其中“n”是其参数，而且可以是整数值(1,2,3,4)，也可以是表达式(2n+1、-n+5)和关键词(odd、even)，但参数n的起始值始终是1，而不是0。也就是说，参数n的值为0时，选择器将选择不到任何匹配的元素。</p>
<h3 id="CSS3-结构性伪类选择器—nth-last-child-n"><a href="#CSS3-结构性伪类选择器—nth-last-child-n" class="headerlink" title="CSS3 结构性伪类选择器—nth-last-child(n)"></a>CSS3 结构性伪类选择器—nth-last-child(n)</h3><p>“:nth-last-child(n)”选择器和前面的“:nth-child(n)”选择器非常的相似，只是这里多了一个“last”，所起的作用和“:nth-child(n)”选择器有所区别，从某父元素的最后一个子元素开始计算，来选择特定的元素。</p>
<h3 id="CSS3-first-of-type选择器"><a href="#CSS3-first-of-type选择器" class="headerlink" title="CSS3 first-of-type选择器"></a>CSS3 first-of-type选择器</h3><p>“:first-of-type”选择器类似于“:first-child”选择器，不同之处就是指定了元素的类型,其主要用来定位一个父元素下的某个类型的第一个子元素。</p>
<h3 id="CSS3-nth-of-type-n-选择器"><a href="#CSS3-nth-of-type-n-选择器" class="headerlink" title="CSS3 nth-of-type(n)选择器"></a>CSS3 nth-of-type(n)选择器</h3><p>“:nth-of-type(n)”选择器和“:nth-child(n)”选择器非常类似，不同的是它只计算父元素中指定的某种类型的子元素。当某个元素中的子元素不单单是同一种类型的子元素时，使用“:nth-of-type(n)”选择器来定位于父元素中某种类型的子元素是非常方便和有用的。在“:nth-of-type(n)”选择器中的“n”和“:nth-child(n)”选择器中的“n”参数也一样，可以是具体的整数，也可以是表达式，还可以是关键词。</p>
<h3 id="CSS3-only-child选择器"><a href="#CSS3-only-child选择器" class="headerlink" title="CSS3 only-child选择器"></a>CSS3 only-child选择器</h3><p>“:only-child”选择器选择的是父元素中只有一个子元素，而且只有唯一的一个子元素。也就是说，匹配的元素的父元素中仅有一个子元素，而且是一个唯一的子元素。</p>
<h3 id="CSS3-only-of-type选择器"><a href="#CSS3-only-of-type选择器" class="headerlink" title="CSS3 only-of-type选择器"></a>CSS3 only-of-type选择器</h3><p>“:only-of-type”选择器用来选择一个元素是它的父元素的唯一一个相同类型的子元素。这样说或许不太好理解，换一种说法。“:only-of-type”是表示一个元素他有很多个子元素，而其中只有一种类型的子元素是唯一的，使用“:only-of-type”选择器就可以选中这个元素中的唯一一个类型子元素。</p>
<h3 id="CSS3选择器下"><a href="#CSS3选择器下" class="headerlink" title="CSS3选择器下"></a>CSS3选择器下</h3><h4 id="CSS3选择器-enabled选择器"><a href="#CSS3选择器-enabled选择器" class="headerlink" title="CSS3选择器 :enabled选择器"></a>CSS3选择器 :enabled选择器</h4><p>在Web的表单中，有些表单元素有可用（“:enabled”）和不可用（“:disabled”）状态，比如输入框，密码框，复选框等。在默认情况之下，这些表单元素都处在可用状态。那么我们可以通过伪选择器“:enabled”对这些表单元素设置样式。</p>
<p>示例演示</p>
<p>通过“:enabled”选择器，修改文本输入框的边框为2像素的红色边框，并设置它的背景为灰色。</p>
<h4 id="selection"><a href="#selection" class="headerlink" title="::selection"></a>::selection</h4><p>CSS3选择器 ::selection选择器<br>“::selection”伪元素是用来匹配突出显示的文本(用鼠标选择文本时的文本)。浏览器默认情况下，用鼠标选择网页文本是以“深蓝的背景，白色的字体”显示的，效果如下图所示：</p>
<p>从上图中可以看出，用鼠标选中“专注IT、互联网技术”、“纯干货、学以致用”、“没错、这是免费的”这三行文本中，默认显示样式为：蓝色背景、白色文本。</p>
<p>有的时候设计要求,不使用上图那种浏览器默认的突出文本效果，需要一个与众不同的效果，此时“::selection”伪元素就非常的实用。不过在Firefox浏览器还需要添加前缀。</p>
<h4 id="CSS3选择器-read-only选择器"><a href="#CSS3选择器-read-only选择器" class="headerlink" title="CSS3选择器 :read-only选择器"></a>CSS3选择器 :read-only选择器</h4><p>“:read-only”伪类选择器用来指定处于只读状态元素的样式。简单点理解就是，元素中设置了“readonly=’readonly’”</p>
<h4 id="CSS3选择器-read-write选择器"><a href="#CSS3选择器-read-write选择器" class="headerlink" title="CSS3选择器 :read-write选择器"></a>CSS3选择器 :read-write选择器</h4><p>“:read-write”选择器刚好与“:read-only”选择器相反，主要用来指定当元素处于非只读状态时的样式。</p>
<h3 id="css3选择器-before-和-after"><a href="#css3选择器-before-和-after" class="headerlink" title="css3选择器 ::before 和 ::after"></a>css3选择器 ::before 和 ::after</h3><p>:before和::after这两个主要用来给元素的前面或后面插入内容，这两个常和”content”配合使用，使用的场景最多的就是清除浮动。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.clearfix::before,</div><div class="line">.clearfix::after &#123;</div><div class="line">    content: &quot;.&quot;;</div><div class="line">    display: block;</div><div class="line">    height: 0;</div><div class="line">    visibility: hidden;</div><div class="line">&#125;</div><div class="line">.clearfix:after &#123;clear: both;&#125;</div><div class="line">.clearfix &#123;zoom: 1;&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;box-shadow&quot;&gt;&lt;a href=&quot;#box-shadow&quot; class=&quot;headerlink&quot; title=&quot;box-shadow&quot;&gt;&lt;/a&gt;box-shadow&lt;/h2&gt;&lt;p&gt;阴影类型：此参数可选。如不设值，默认投影方式是外阴影；如取其唯一值“inset”，其投影为内阴影；&lt;/p&gt;
&lt;p&gt;X-offset:阴影水平偏移量，其值可以是正负值。如果值为正值，则阴影在对象的右边，其值为负值时，阴影在对象的左边；&lt;/p&gt;
&lt;p&gt;Y-offset:阴影垂直偏移量，其值也可以是正负值。如果为正值，阴影在对象的底部，其值为负值时，阴影在对象的顶部；&lt;/p&gt;
&lt;p&gt;阴影模糊半径：此参数可选，，但其值只能是为正值，如果其值为0时，表示阴影不具有模糊效果，其值越大阴影的边缘就越模糊；&lt;/p&gt;
&lt;p&gt;阴影扩展半径：此参数可选，其值可以是正负值，如果值为正，则整个阴影都延展扩大，反之值为负值时，则缩小；&lt;/p&gt;
&lt;p&gt;阴影颜色：此参数可选。如不设定颜色，浏览器会取默认色，但各浏览器默认取色不一致，特别是在webkit内核下的safari和chrome浏览器下表现为透明色，在Firefox/Opera下表现为黑色（已验证），建议不要省略此参数。&lt;/p&gt;
&lt;h2 id=&quot;CSS3-线性渐变&quot;&gt;&lt;a href=&quot;#CSS3-线性渐变&quot; class=&quot;headerlink&quot; title=&quot;CSS3 线性渐变&quot;&gt;&lt;/a&gt;CSS3 线性渐变&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;linegar-gradient (to bottom,#fff,#999);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="css3" scheme="https://sanyuyu.xyz/categories/css3/"/>
    
    
      <category term="css3" scheme="https://sanyuyu.xyz/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>git分支</title>
    <link href="https://sanyuyu.xyz/2017/03/07/git%E5%88%86%E6%94%AF/"/>
    <id>https://sanyuyu.xyz/2017/03/07/git分支/</id>
    <published>2017-03-07T05:33:20.000Z</published>
    <updated>2017-03-09T08:00:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fde7z56q72j30fm09mt8s.jpg" width="500px" style="border:none;"><br><a id="more"></a><br>几乎所有的版本控制系统都以某种形式支持分支。使用分支的目的是你可以把你的工作从开发主线上奋力开来，以免影响主线。分支的主要内容是我从廖老师的git教程总结的。</p>
<h2 id="1-创建分支与合并分支"><a href="#1-创建分支与合并分支" class="headerlink" title="1.创建分支与合并分支"></a>1.创建分支与合并分支</h2><p>在工作中，可能会遇到开发网站时，为了实现某个新的需求，创建一个分支，在这个分支上展开工作。正在此时，你同事遇到问题，需要修补，你需要马上切换到你的线上分支，为这个紧急任务新建一个分支，并在其中修复它，在通过测试后，切换回到线上分支，然后合并这个修补分支，最后将改动推送到线上分支，切换到你最初的分支上，继续工作。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">￥git checkout -b iss53</div><div class="line">Switched to a new branch &quot;iss53&quot;</div><div class="line">等价于  $git branch iss53           创建一个分支</div><div class="line">       $git checkout iss53         切换到iss53分支</div></pre></td></tr></table></figure>
<p>你继续在#53问题上工作，并且做了一些提交，在此过程中，iss53分支在不断地推进，因为你已经检出到该分支(也就是说，你的HEAD指针指向了 iss53分支)  </p>
<p> 然后，用git branch 命令查看当前分支：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$git branch</div><div class="line">*iss53</div><div class="line"> master</div></pre></td></tr></table></figure>
<p>git branch 命令会列出所有的分支，当前分支会标一个*号。<br>然后我们呢就可以在iss53上分支上正常提交，比如对readme.txt做个修改，然后提交：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$git add readme.txt</div><div class="line">$git commit -m&quot;branch test&quot;</div><div class="line">[isss53 fec145a] branch test</div><div class="line"> 1 file changed, 1 insetion(+)</div></pre></td></tr></table></figure>
<p>现在，iss53分支的工作完成，我们就可以切换到master分支：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$git checkout master</div><div class="line">Switched to branch &apos;master&apos;</div></pre></td></tr></table></figure>
<p>切换到master分支后，再查看到readme.txt 文件。发现刚才的内容不见了！因为那个提交实在dev上，而master分支在此刻的提交点并没有变，是因为我们没有合并。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$git merge iss53</div><div class="line">Updating d17efd8 ..fec145a </div><div class="line">Fast-ward</div><div class="line"> readme.txt |  1+</div><div class="line"> 1 file changed, 1 insertion(+)</div></pre></td></tr></table></figure>
<p>git merge命令用于合并指定分支到当前分支。合并后，再查看readme.txt内容就可以看到，和iss53分支的最新提交是一样的。Fast-ward信息，是指这次合并模式是”快进模式”，也就是直接把master指向iss53的当前提交，所以合并速度非常快。<br>当然也不是每次合并都能fast-ward<br>合并完成后，就可以放心删除iss53分支：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$git branch -d iss53</div></pre></td></tr></table></figure>
<p>删除后就只剩下master分支了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$git branch</div><div class="line">*master</div></pre></td></tr></table></figure>
<p>应为创建、合并和删除分支很快，一般都是使用分支完成任务后，先合并再删除分支。</p>
<h2 id="2-解决分支冲突"><a href="#2-解决分支冲突" class="headerlink" title="2.解决分支冲突"></a>2.解决分支冲突</h2><p>有时会出现合并失败<br>比如创建了一个新的分支 feature分支，在新的分支上开发</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$git checkout -b feature1</div><div class="line">Switched to a new branch &apos;feature1&apos;</div></pre></td></tr></table></figure>
<p>在分支上修改了某些文件，在feature1分支上准备提交</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$git add readme.txt</div><div class="line">$git commit -m&quot; AND simple&quot;</div><div class="line">[feature1 75a857c] AND simple</div><div class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</div></pre></td></tr></table></figure>
<p>切换到master分支：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$git checkout master</div><div class="line">Switched to branch &apos;master&apos;</div><div class="line">Your branch is ahead of &apos;origin/master&apos; by 1 commit.</div></pre></td></tr></table></figure>
<p>Git还会自动提示我们当前master分支比远程分支要超前一个提交。<br>在master分支上把readme.txt 文件的最后一行进行修改</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$git  add readme.txt</div><div class="line">$git commit -m &quot;&amp; simple&quot;</div><div class="line">[master 400b400] &amp;simple</div><div class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</div></pre></td></tr></table></figure>
<p>现在，master分支和feature1分支各自都有了新的提交，这样，Git无法执行”快速合并’，只能试图把各自修改合并起来，但是这种合并就会有冲突</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$git merge feature1</div><div class="line">Auto-merging readme.txt</div><div class="line">CONFLICT (content): Merge conflict in readme.txt</div><div class="line">Automatic merge failed; fix conflicts and then commit the result.</div></pre></td></tr></table></figure>
<p>出现了失败，说明有冲突，必须手动解决冲突再提交，git status会告诉我们冲突的文件。<br>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。用git log –graph命令可以看到分支合并图。</p>
<h2 id="3-分支管理策略"><a href="#3-分支管理策略" class="headerlink" title="3.分支管理策略"></a>3.分支管理策略</h2><p>通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢到分支信息。<br>如果要强制禁用Fast-ward模式，Git就会merge时生成一个新的commit,这样，从分支历史上就可以看出分支信息。使用 –no-ff 方式的merge</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$git checkout -b dev</div><div class="line">Switched to a new branch &apos;dev&apos;</div></pre></td></tr></table></figure>
<p>修改readme.txt文件，并提交一个新的commit<br>现在，我们切换到master:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$git checkout master</div><div class="line">Switched to branch &apos;master&apos;</div></pre></td></tr></table></figure>
<p>准备合并dev分支，注意 –no-ff 参数，表示禁用Fast-forward：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$git merge --no-ff -m&quot;merge with no-ff&quot; dev</div><div class="line">Merge made by the &apos;recursive&apos; strategy.</div><div class="line"> readme.txt |   1+</div><div class="line"> 1 file changed, 1 insertion(+)</div></pre></td></tr></table></figure>
<p>因为本次合并要创建一个新的commit，所以加上 -m参数,描述提交的东西，快速何必，不会看到历史记录。</p>
<h2 id="4-分支策略"><a href="#4-分支策略" class="headerlink" title="4.分支策略"></a>4.分支策略</h2><p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p>
<p>首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p>
<p>那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；</p>
<p>你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。</p>
<h2 id="5-多人协作"><a href="#5-多人协作" class="headerlink" title="5.多人协作"></a>5.多人协作</h2><p>当你从远程仓库克隆时，实际Git自动把本地的master分支和远程的master分支对应起来了,并且，github远程仓库的默认名称是 origin.<br>查看远程仓库信息，用git remote</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$git remote origin</div></pre></td></tr></table></figure>
<p>或者用git remote -v</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$git remote -v</div><div class="line">origin	git@github.com:wanqing19954/learn.git (fetch)</div><div class="line">origin	git@github.com:wanqing19954/learn.git (push)</div></pre></td></tr></table></figure>
<p>上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址</p>
<p><strong>推送分支</strong><br>推送分支，就是把该分支上的所有本地提交推送到远程仓库。推送时，要指定本地分支，Git就会把该分支推送到远程库对应的远程分支上：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$git push origin master</div></pre></td></tr></table></figure>
<p>如果要推送其他分支，例如dev,就直接</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$git push origin dev</div></pre></td></tr></table></figure>
<p>但是，并不是一定要把分支往远程推送，那么哪些分支需要推送，哪些不需要呢？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ww2.sinaimg.cn/large/006tNbRwly1fde7z56q72j30fm09mt8s.jpg&quot; width=&quot;500px&quot; style=&quot;border:none;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://sanyuyu.xyz/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="git" scheme="https://sanyuyu.xyz/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git常用操作及总结</title>
    <link href="https://sanyuyu.xyz/2017/03/06/git%E6%95%99%E7%A8%8B/"/>
    <id>https://sanyuyu.xyz/2017/03/06/git教程/</id>
    <published>2017-03-06T05:16:17.000Z</published>
    <updated>2017-03-09T06:10:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fdd1zpad2mj30i80bz0t5.jpg" width="400px"><br><a id="more"></a><br>　　如果你已经安装了git的话，主要内容告诉你在使用Git完成各种工作中将使用的各种命令。如果你看完了主要内容，应该就能配置初始化一个仓库(repository)、开始或停止跟踪(track)文件和文件模式、如何迅速而简单地撤销错误操作、如何浏览你的项目的历史版本以及不同提交(commits)间的差异、如何向你的远程仓库推送(commit)、以及如何从你的远程仓库拉取(pull)文件。  </p>
<h1 id="一-获取git仓库"><a href="#一-获取git仓库" class="headerlink" title="一.获取git仓库"></a><font color="red">一.获取git仓库</font></h1><p>　　有两种取得Git项目仓库的方法。第一种是在现有项目或目录下导入所有文件到Git中；第二中是从一个服务器或者github克隆一个现有的Git仓库。</p>
<h2 id="1-在你新建的文件夹来建一个新的仓库"><a href="#1-在你新建的文件夹来建一个新的仓库" class="headerlink" title="1.在你新建的文件夹来建一个新的仓库"></a>1.在你新建的文件夹来建一个新的仓库</h2><p>如果你打算使用Git来对现有的项目进行管理，你只需要进入该项目所在的文件夹并且输入  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd learn                                   进入你新建文件夹中</div><div class="line">git init                                    建立一个新的仓库</div></pre></td></tr></table></figure>
<p>　　如果你在一个已经存在文件的文件夹里建立了一个新仓库，你应该开始跟踪这些文件并提交。 你可通过 git add 命令来实现对指定文件的跟踪，然后执行 git commit 提交：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git add .</div><div class="line">$ git add work</div><div class="line">$ git commit -m&quot; new version&quot;</div></pre></td></tr></table></figure>
<p>一般，刚建立的文件夹，仓库都是新的。不需要上面的那些命令  </p>
<h2 id="2-克隆你以前的仓库或者别人的仓库"><a href="#2-克隆你以前的仓库或者别人的仓库" class="headerlink" title="2.克隆你以前的仓库或者别人的仓库"></a>2.克隆你以前的仓库或者别人的仓库</h2><p>　　如果你想获得一份已经存在的Git仓库的话，比如，你想为某个开源项目贡献自己的一份力，这时就要用到git clone命令。git克隆的是Git仓库服务器上的几乎所有数据。而不是仅仅赋值完成你的工作所需要文件。当你执行git clone命令的时候，默认配置下远程仓库中的每一个文件的每一个版本都将被拉去下来。可以用下面的命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone http://github.com/jack/learn</div></pre></td></tr></table></figure>
<p>这会在当前目录下创建一个名为“learn”的文件夹在你的电脑上，并在这个目录下初始化一个.git文件夹，从远程仓库拉取下所有数据到你的文件夹里，如果你想自定义本地仓库的名字，可以在后面 添加 你的名字</p>
<h1 id="二、记录每次更新到仓库"><a href="#二、记录每次更新到仓库" class="headerlink" title="二、记录每次更新到仓库"></a><font color="red">二、记录每次更新到仓库</font></h1><p>　　现在我们手上有了一个Git仓库，并从这个仓库取出了所有文件的工作拷贝。接下来，对这些文件做了修改，在完成了一个阶段的目标后，提交每次跟新到仓库。<br>　　一般文件都处于未修改，已修改，或已放入暂存区。工作目录中除已跟踪文件以外的所有文件都属于未跟踪文件，它们即不存在于上次快照的记录中，也没有放入暂存区。初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态。<br>　　编辑修改某些文件之后，由于上次提交后，你对它们做了修改，Git将它们标记为已修改文件。我们逐步将这些修改过的文件放入暂存区，再提交素有暂存了的修改<br>　　文件从本地 到暂存区 到远程仓库。<br>简称文件处于什么状态，可以用 git status 简写“git st”,如果在克隆仓库后立即使用git st 会看到没有可以提交的，说明都没有被修改。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">on branch master</div><div class="line">nothing to commit ,working directory clean</div></pre></td></tr></table></figure>
<p>　　这些信息，告诉你当前目录没有出现任何处于未跟踪状态的新文件，否则Git会列出来，最后改命令还显示了当前所在分支，并告诉你这个分支同远程服务器上对应的分支没有偏离。现在分支名是”master”,这是默认的分支名。我们在Git分支后会降到。<br>现在，让我们在项目下新建一个新的README文件，如果之前并不存在这个文件，使用 git status 命令你会看到新的未跟踪文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">on branch master</div><div class="line">Untracked files:</div><div class="line">	(use &quot;git add &lt;file&gt;..&quot; to  include in what will be  commited)</div><div class="line">	README</div><div class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</div></pre></td></tr></table></figure>
<p>在状态报告中可以看到新建的README文件出现在Untracked files 下面。未跟踪的文件以为这Git在之前的快照中没有这些文件。  </p>
<h2 id="1-添加新文件"><a href="#1-添加新文件" class="headerlink" title="1.添加新文件"></a>1.添加新文件</h2><p>使用命令 git add 开始跟踪一个文件。所以，要跟踪README文件，运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add README</div></pre></td></tr></table></figure>
<p>此时再运行git status 命令， 会看到README 文件已被跟踪，并成功并处于暂存状态：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">on branch master</div><div class="line">changes to be commited:</div><div class="line"> (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</div><div class="line"> new file: README</div></pre></td></tr></table></figure>
<p>　　只要在Change to be commited 这行下面的，就说明是已暂存状态，如果此时提交，那么该文件此时此刻的版本将被留存在历史历史记录中。  </p>
<h2 id="2-暂存已修改文件"><a href="#2-暂存已修改文件" class="headerlink" title="2.暂存已修改文件"></a>2.暂存已修改文件</h2><p>　　现在我们来修改一个已被跟踪的文件。如果你修改了一个名字为index.html的已被跟踪文件<br>然后运行 git status 命令，会看到以下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">on branch master</div><div class="line">change to be commited:</div><div class="line">	(use &quot;git reset HEAD &lt;file&gt;..&quot; to unstage)</div><div class="line">	new file: README</div><div class="line">Changes not staged for commit:</div><div class="line">	(use &quot;git add &lt;file&gt;...&quot; to upadte what will be  commited)</div><div class="line">	(use &quot;git checkout --&lt;file&gt;..&quot; to discared changes in working directory)</div><div class="line">	modified: index.html</div></pre></td></tr></table></figure>
<p>　　文件index.html出现在Changes not staged for commit 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区，需要git add 命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git add index.html</div><div class="line">$ git status</div><div class="line">on branch master</div><div class="line">Changes to be commited:</div><div class="line">	(use &quot;git reset HEAD &lt;file&gt;..” to unstage)</div><div class="line">new file: README</div><div class="line">modified: index.html</div></pre></td></tr></table></figure>
<p>　　现在两个文件都已被暂存，下次提交时就会一并记录到仓库，假设此时你想要在 index.html 里再加条注释，重新编辑存盘后，准备提交。再git status 你会发现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ vim index.html</div><div class="line">$ git st</div><div class="line">on branch master</div><div class="line">changes to be commited:</div><div class="line">	(use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</div><div class="line">	new file: README</div><div class="line">	modified: index.html</div><div class="line">changes not staged for commit:</div><div class="line">	(use &quot;git add &lt;file&gt;...&quot; to discard changes in working directory)</div><div class="line">	(use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</div><div class="line">	modified: index.html</div></pre></td></tr></table></figure>
<p>　　出现了两个 index.html，同时出现在暂存区和非暂存区。git只不过暂存了你运行git add 命令的版本，如果你现在提交。idnex.html的版本是你最后一次运行 git add 命令的那个版本。而不是你运行 git commit 时，在工作目录中的当前版本，所以你需要重新git add。  </p>
<h2 id="3-查看已暂存和未暂存的修改"><a href="#3-查看已暂存和未暂存的修改" class="headerlink" title="3.查看已暂存和未暂存的修改"></a>3.查看已暂存和未暂存的修改</h2><p>　　如果git status，输出不知道具体修改了什么，可以用git diff命令<br>假如再次修改README 文件后暂存，然后编辑index.html文件后先不暂存,查看尚未暂存的文件更新了哪些部分，不加参数，直接输入 git diff</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ git diff</div><div class="line">diff --git a/index.html b/index.html</div><div class="line">--- a/index.html</div><div class="line">+++ b/index.html</div><div class="line">@@ -65,7 +65,8 @@ branch directly, things can get messy.</div><div class="line"> Please include a nice description of your changes when you submit your PR;</div><div class="line"> if we have to read the whole diff to figure out why you&apos;re contributing</div><div class="line"> in the first place, you&apos;re less likely to get feedback and have your change</div><div class="line">-merged in.</div><div class="line">+merged in. Also, split your changes into comprehensive chunks if your patch is</div><div class="line">+longer than a dozen lines.</div><div class="line"></div><div class="line"> If you are starting to work on a particular area, feel free to submit a PR</div><div class="line"> that highlights your work in progress (and note in the PR title that it&apos;s</div></pre></td></tr></table></figure>
<h2 id="4-提交更新"><a href="#4-提交更新" class="headerlink" title="4.提交更新"></a>4.提交更新</h2><p>现在的暂存区已经可以提交了，再此之前看看是否有没被提交的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git commit -a -m &apos;added new benchmarks&apos;</div><div class="line">[master 83e38c7] added new benchmarks</div><div class="line"> 1 file changed, 5 insertions(+), 0 deletions(-)</div></pre></td></tr></table></figure>
<h2 id="5-移除文件"><a href="#5-移除文件" class="headerlink" title="5.移除文件"></a>5.移除文件</h2><p>　　要从git中移除某个文件，就必须要从已跟踪文件清单中移除（确切的说，是从暂存区中移除），然后提交，可以用 git rm 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟文件清单中了。<br>如果只是本地文件夹里删除文件，运行git status 时就会看到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ rm index.html</div><div class="line">$ git status</div><div class="line">on branch master</div><div class="line">Your branch is up-to-date with &apos;origin/master&apos;.</div><div class="line">Changes not staged for commit:</div><div class="line">	(use &quot;git add/rm &lt;file&gt;...&quot; to update what will be commited)</div><div class="line">	(use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</div><div class="line">	</div><div class="line">	deleted:	index.html</div></pre></td></tr></table></figure>
<p>然后在运行git rm 记录此次移除文件的操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$git rm index.html</div><div class="line">rm &apos;index.html&apos;</div><div class="line">$git st</div><div class="line">on branch master</div><div class="line">Changes to be commited:</div><div class="line">	(use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</div><div class="line">	</div><div class="line">		deleted:  	index.html</div></pre></td></tr></table></figure>
<p>　　下一次提交时，该文件就不再纳入版本管理了，如果删除之前修改过而且已经放到暂存区，则必须要用强制删除选项-f<br>如果只是想将它从git仓库里（即从暂存区域移除），但仍然希望保留在当前工作目录中，换句话说，你想让文件保留在磁盘中，但是不想被git 追踪，可以使用 –cached 选项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git rm --cached README</div></pre></td></tr></table></figure>
<h2 id="6-移动文件"><a href="#6-移动文件" class="headerlink" title="6.移动文件"></a>6.移动文件</h2><p>要在git 中对文件改名，可以这么做：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git mv file_from file_to</div></pre></td></tr></table></figure>
<p>你会明白关于重命名操作的说明</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git mv README.md README</div><div class="line">$ git status</div><div class="line">on branch master</div><div class="line">Changes to be commited:</div><div class="line">	(use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</div><div class="line">	</div><div class="line">	renamed: README.md -&gt; README</div></pre></td></tr></table></figure>
<p>其实，git mv 相当于运行了下面的三条命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mv README.md README</div><div class="line">$ git rm README.md</div><div class="line">$ git add README</div></pre></td></tr></table></figure>
<p>如此分开操作，也是重命名</p>
<h1 id="三、查看提交历史"><a href="#三、查看提交历史" class="headerlink" title="三、查看提交历史"></a><font color="red">三、查看提交历史</font></h1><p>　　在提交了若干更新，有或者克隆了某个项目之后，你也许想回顾选下提交历史。可以用git log 命令<br>我从github 上clone 一个项目用于演示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/schacon/simple-progit</div></pre></td></tr></table></figure>
<p>　　然后在此项目中运行git log, 应该会看到下面的输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ git log</div><div class="line">commit ca82a6dff817ec66f44342007202690a93763949</div><div class="line">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class="line">Date:   Mon Mar 17 21:52:11 2008 -0700</div><div class="line"></div><div class="line">    changed the version number</div><div class="line"></div><div class="line">commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7</div><div class="line">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class="line">Date:   Sat Mar 15 16:40:33 2008 -0700</div><div class="line"></div><div class="line">    removed unnecessary test</div><div class="line"></div><div class="line">commit a11bef06a3f659402fe7563abf99ad00de2209e6</div><div class="line">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class="line">Date:   Sat Mar 15 10:31:28 2008 -0700</div><div class="line"></div><div class="line">    first commit</div></pre></td></tr></table></figure>
<p>　　git log 会按提交时间列出所有的更新，最新的在最上面。正如你所看到的，这个命令会列出每个SHA-1校检、作者的名字和电子邮件地址，提交时间和提交说明<br>一个常用的选项是 -p 用来显示每次提交的内容差异，你也可以加上 -2 来仅显示最近两次提交</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">$ git log -p -2</div><div class="line">commit ca82a6dff817ec66f44342007202690a93763949</div><div class="line">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class="line">Date:   Mon Mar 17 21:52:11 2008 -0700</div><div class="line"></div><div class="line">    changed the version number</div><div class="line"></div><div class="line">diff --git a/Rakefile b/Rakefile</div><div class="line">index a874b73..8f94139 100644</div><div class="line">--- a/Rakefile</div><div class="line">+++ b/Rakefile</div><div class="line">@@ -5,7 +5,7 @@ require &apos;rake/gempackagetask&apos;</div><div class="line"> spec = Gem::Specification.new do |s|</div><div class="line">     s.platform  =   Gem::Platform::RUBY</div><div class="line">     s.name      =   &quot;simplegit&quot;</div><div class="line">-    s.version   =   &quot;0.1.0&quot;</div><div class="line">+    s.version   =   &quot;0.1.1&quot;</div><div class="line">     s.author    =   &quot;Scott Chacon&quot;</div><div class="line">     s.email     =   &quot;schacon@gee-mail.com&quot;</div><div class="line">     s.summary   =   &quot;A simple gem for using Git in Ruby code.&quot;</div><div class="line"></div><div class="line">commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7</div><div class="line">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class="line">Date:   Sat Mar 15 16:40:33 2008 -0700</div><div class="line"></div><div class="line">    removed unnecessary test</div><div class="line"></div><div class="line">diff --git a/lib/simplegit.rb b/lib/simplegit.rb</div><div class="line">index a0a60ae..47c6340 100644</div><div class="line">--- a/lib/simplegit.rb</div><div class="line">+++ b/lib/simplegit.rb</div><div class="line">@@ -18,8 +18,3 @@ class SimpleGit</div><div class="line">     end</div><div class="line"></div><div class="line"> end</div><div class="line">-</div><div class="line">-if $0 == __FILE__</div><div class="line">-  git = SimpleGit.new</div><div class="line">-  puts git.show</div><div class="line">-end</div><div class="line">\ No newline at end of file</div></pre></td></tr></table></figure>
<h1 id="四、撤销操作"><a href="#四、撤销操作" class="headerlink" title="四、撤销操作"></a><font color="red">四、撤销操作</font></h1><p>　　在任何一个阶段，你都有可能想要撤销某些操作，这里，我们将会学习几个撤销你所做的修改<br>有时候我们提交完了才发现漏掉了几个文件没有被添加，或者提交信息写错了。此时，可以运行带有 –amend 选项的提交命令尝试重新提交</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit --amend</div></pre></td></tr></table></figure>
<p>　　这个命令会将暂存中的文件提交。<br>如果你提交后发现忘记了暂存某些需要的修改，可以像下面这样操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git commit -m &apos;initial commit&apos;</div><div class="line">$ git add  forgotten-file</div><div class="line">$ git commit --amend</div></pre></td></tr></table></figure>
<h1 id="五、远程仓库的使用"><a href="#五、远程仓库的使用" class="headerlink" title="五、远程仓库的使用"></a><font color="red">五、远程仓库的使用</font></h1><p>　　为了能在任意Git项目上协作，你需要知道如何管理自己的远程仓库。远程仓库是指托管在网络上的版本库，你可以有好几个远程仓库，有的可以读，有的可以读写，与他人协作涉及管理远程仓库以及根据需要推送或拉去数据。管理远程仓库包括了解如何添加远程仓库、移除无效的仓库，管理不同的远程分支并定义他们是否被跟踪等等。在本节中，我们将介绍一部分远程管理的技能。  </p>
<h2 id="2-查看远程仓库"><a href="#2-查看远程仓库" class="headerlink" title="2.查看远程仓库"></a>2.查看远程仓库</h2><p>　　如果你想查看你已经配置的远程仓库服务器，可以运行git remote 命令。它会列出你指定的每一个远程服务器的简写。如果你已经克隆了自己的仓库，那么至少应该能看到 origin- 这是Git 给你克隆的仓库服务器的默认名字</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ git clone http://github.com/schacon/ticgit</div><div class="line">Cloning into &apos;ticgit&apos;...</div><div class="line">remote: Reusing existing pack: 1857, done.</div><div class="line">remote: Total 1857 (delta 0), reused 0 (delta 0)</div><div class="line">Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.</div><div class="line">Resolving deltas: 100% (772/772), done.</div><div class="line">Checking connectivity... done.</div><div class="line">$ cd ticgit</div><div class="line">$ git remote origin</div></pre></td></tr></table></figure>
<p>　　你也可以制定选项-v,会显示需要读写远程仓库使用的Git保存的简写与其对应的URL</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git remote -v </div><div class="line">origin https://github.com/schacon/ticgit(fetch)</div><div class="line">origin https://github.com/schacon/ticgit(push)</div></pre></td></tr></table></figure>
<p>　　如果你的远程仓库不止一个，该命令会将它们全部列出。例如，与几个协作者合作的，拥有多个远程仓库的仓库看起来像这样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$cd grit</div><div class="line">$git remote -v</div><div class="line">bakkdoor  https://github.com/bakkdoor/grit (fetch)</div><div class="line">bakkdoor  https://github.com/bakkdoor/grit (push)</div><div class="line">cho45     https://github.com/cho45/grit (fetch)</div><div class="line">cho45     https://github.com/cho45/grit (push)</div><div class="line">defunkt   https://github.com/defunkt/grit (fetch)</div><div class="line">defunkt   https://github.com/defunkt/grit (push)</div><div class="line">koke      git://github.com/koke/grit.git (fetch)</div><div class="line">koke      git://github.com/koke/grit.git (push)</div><div class="line">origin    git@github.com:mojombo/grit.git (fetch)</div><div class="line">origin    git@github.com:mojombo/grit.git (push)</div></pre></td></tr></table></figure>
<p>　　这样我们可以轻松拉取其中任何一个用户的贡献。此外，我们大概还会有某些远程仓库的推送权限。</p>
<h2 id="3-添加远程仓库"><a href="#3-添加远程仓库" class="headerlink" title="3.添加远程仓库"></a>3.添加远程仓库</h2><p>　　之前提到并展示了如何添加远程仓库的示例，运行 git remote add <shortname><url> 添加一个新的远程Git仓库，同时指定一个你可以轻松引用的简写</url></shortname></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git remote origin </div><div class="line">$ git remote add pb https://github.com/paulboone/ticgit</div><div class="line">$ git remote -v</div><div class="line">origin https://github.com/schacon/ticgit(fetch)</div><div class="line">origin https://github.com/schacon/ticgit(push)</div><div class="line">pb https://github.com/paulboone/ticigit(fetch)</div><div class="line">pb https://github.com./paulboone/ticigit(push)</div></pre></td></tr></table></figure>
<p>　　现在你可以在命令行中使用字符串pb来代替整个URL。例如，如果你想拉取Paul的仓库中有但你没有的信息，可以运行 git fetch pb</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git fetch pb</div><div class="line">remote: Counting objects: 43, done.</div><div class="line">remote: Compressing objects: 100% (36/36), done.</div><div class="line">remote: Total 43 (delta 10), reused 31 (delta 5)</div><div class="line">Unpacking objects: 100% (43/43), done.</div><div class="line">From https://github.com/paulboone/ticgit</div><div class="line"> * [new branch]      master     -&gt; pb/master</div><div class="line"> * [new branch]      ticgit     -&gt; pb/ticgit</div></pre></td></tr></table></figure>
<p>　　现在Paul的master分支可以在本地通过pb/master访问到- 你可以将它合并到自己的某个分支中，或者如果你想要查看它的话，可以检出一个指向该点的本地分支  </p>
<h2 id="4-从远程仓库中抓取与拉取"><a href="#4-从远程仓库中抓取与拉取" class="headerlink" title="4.从远程仓库中抓取与拉取"></a>4.从远程仓库中抓取与拉取</h2><p>就如刚才所见，从远程仓库中获得数据，可以执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git fetch [remote-name]</div></pre></td></tr></table></figure>
<p>　　这个命令会访问远程仓库，从中拉取你没有的数据。执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时 合并或查看。<br>如果你使用clone命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以”origin”为简写。所以，git fetch orgin 会抓取克隆(或上一次抓取)后新推送的所有工作。当准备好时你必须手动将其合并入你的工作。<br>　　如果你有一个分支设置为跟踪一个远程分支，可以使用git pull命令来自动抓取然后合并远程分支到当前分支。这对你来说可能是一个更简单或更舒服的流程；默认情况下，git clone命令会自动设置本地 master分支<br>跟踪克隆的远程仓库的master分支(或不管是什么名字的默认分支)。运行git pull通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前分支  </p>
<h2 id="5-推送到远程仓库"><a href="#5-推送到远程仓库" class="headerlink" title="5.推送到远程仓库"></a>5.推送到远程仓库</h2><p>　　当你想分享你的项目时，必须将其推送到上游。这个命令很简单 git push [remote-name][branch-name]。当你想要将master分支推送到origin 服务器时，那么运行这个命令就可以</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
<p>　　只有当你克隆服务器的写入权限，并且之前没有人推送过时，这条命令才生效。当你和其他人在同一时间克隆，他们先推送到上游然后你在推送到上游，你的推送就会被拒绝，你必须先将他们的工作拉取下来并将其合并进你的工作后才能推送。  </p>
<h2 id="6-查看远程仓库"><a href="#6-查看远程仓库" class="headerlink" title="6.查看远程仓库"></a>6.查看远程仓库</h2><p>　　如果想要查看某一个远程仓库的更多信息，可以使用git remote show[remote-name] 命令。如果想以一个特定的缩写名运行这个命令，例如origin，会得到像下面的信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ git remote show origin</div><div class="line">*remote origin</div><div class="line"> Fetch URL: https://github.com/schacon/ticgit</div><div class="line"> Push  URL: https://github.com/schacon/ticgit</div><div class="line"> HEAD branch: master</div><div class="line"> Remote branches:</div><div class="line">   master                               tracked</div><div class="line">   dev-branch                           tracked</div><div class="line"> Local branch configured for &apos;git pull&apos;:</div><div class="line">   master merges with remote master</div><div class="line"> Local ref configured for &apos;git push&apos;:</div><div class="line">   master pushes to master (up to date)</div></pre></td></tr></table></figure>
<p>　　它同样会列出远程仓库URL与跟踪分支的信息。这些信息非常有用，它告诉你正处于master分支，并且如果运行git pull，就会抓取所有的远程应用，然后将远程master分支合并到本地master分支。它也会列出拉取到的所有远程应用。  </p>
<h2 id="7-远程仓库的移除与重命名"><a href="#7-远程仓库的移除与重命名" class="headerlink" title="7.远程仓库的移除与重命名"></a>7.远程仓库的移除与重命名</h2><p>　　如果想要重命名引用的名字可以运行git remote rename 去修改一个远程仓库的简写名。例如，想要将pb重命名为paul,可以用git remote renmae 这样做：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$git remote rename pb paul</div><div class="line">$git remote origin paul</div></pre></td></tr></table></figure>
<p>　　值得注意的是这同样也会修改你的远程分支名字。那些过去引用pb/master的现在回引用paul/master。<br>如果因为一些原因想要移除一个远程仓库-你已经从服务器上搬走了或不想使用某一个特定的镜像了，又或者某一个贡献者不再贡献了-可以使用git<br>remote rm:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$git remote rm paul</div><div class="line">$git remote origin</div></pre></td></tr></table></figure>
<h1 id="六、打标签"><a href="#六、打标签" class="headerlink" title="六、打标签"></a><font color="red">六、打标签</font></h1><p>　　像其他版本控制系统(vcs)系统一样，Git可以给历史中的某一个提交打上标签，以示重要。比较有代表性的是人们会使用这个功能来标记发布结点。</p>
<h2 id="1-列出标签"><a href="#1-列出标签" class="headerlink" title="1.列出标签"></a>1.列出标签</h2><p>在Git中列出已有的标签是，只需要输入git tag:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$git tag</div><div class="line">v0.1</div><div class="line">v1.3</div></pre></td></tr></table></figure>
<p>　　这个命令以字母顺序列出标签，但是它们出现的顺序并不重要<br>你也可以使用特定的模式查找标签。例如，Git自身的源代码仓库包含标签的数量超过500个。如果只对1.8.5系列感兴趣，可以运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$git tag -1 &apos;v.1.8.5&apos;</div><div class="line">v1.8.5</div><div class="line">v1.8.5-rc0</div><div class="line">v1.8.5-rc1</div><div class="line">v1.8.5-rc2</div><div class="line">v1.8.5-rc3</div><div class="line">v1.8.5.1</div><div class="line">v1.8.5.2</div><div class="line">v1.8.5.3</div><div class="line">v1.8.5.4</div><div class="line">v1.8.5.5</div></pre></td></tr></table></figure>
<h2 id="2-创建标签"><a href="#2-创建标签" class="headerlink" title="2.创建标签"></a>2.创建标签</h2><p>git使用两种主要类型的标签：轻量标签(light)与附注标签  </p>
<h2 id="3-附注标签"><a href="#3-附注标签" class="headerlink" title="3.附注标签"></a>3.附注标签</h2><p>　　在Git中创建一个附注标签是很简单的。最简单的方式是当你运行tag命令时指定-a选项：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$git tag -a v1.4 -m &apos;my version 1.4&apos;</div><div class="line">$git tag</div><div class="line">v0.1</div><div class="line">v1.3</div><div class="line">v1.4</div></pre></td></tr></table></figure>
<p>　　-m选项指定了一条将会存储在标签中的信息。如果没有为附注标签指定一条信息，Git会运行编辑器要求你输入信息<br>通过git show 命令可以看到标签信息与对应的提交信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$git show v1.4</div><div class="line">tag 1.4</div><div class="line">Tagger: Ben Straub &lt;ben@straub.cc&gt;</div><div class="line">Date:   Sat May 3 20:19:12 2014 -0700</div><div class="line"></div><div class="line">my version 1.4</div><div class="line"></div><div class="line">commit ca82a6dff817ec66f44342007202690a93763949</div><div class="line">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class="line">Date:   Mon Mar 17 21:52:11 2008 -0700</div><div class="line"></div><div class="line">    changed the version number</div></pre></td></tr></table></figure>
<p>　　你会看到显示了标签者的信息、打标签的日期时间、附注信息，然后显示具体的提交信息<br>　　另一种给提交打标签的方式是使用轻量标签。 轻量标签本质上是将提交校验和存储到一个文件中 - 没有保存任何其他信息。 创建轻量标签，不需要使用 -a、-s 或 -m 选项，只需要提供标签名字：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$git tag v1.4-1w</div><div class="line">$git tag</div><div class="line">v0.1</div><div class="line">v1.3</div><div class="line">v1.4</div><div class="line">v1.4-1w</div><div class="line">v1.5</div></pre></td></tr></table></figure>
<h1 id="七、设置别名"><a href="#七、设置别名" class="headerlink" title="七、设置别名"></a><font color="red">七、设置别名</font></h1><h2 id="1-常用命令缩写"><a href="#1-常用命令缩写" class="headerlink" title="1.常用命令缩写"></a>1.常用命令缩写</h2><p>git status 改成 git st  　git checkout 改成 git co<br>git commit 改成 git ci　　git branch 改成 git br<br>可以输入以下命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$git config --global alias.co checkout</div><div class="line">$git config --global alias.br branch</div><div class="line">$git config --global alias.ci commit</div><div class="line">$git config --global alias.st status</div></pre></td></tr></table></figure>
<p>以上差不多就是git常用的所有命令，后面还有 关于 git 分支</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ww4.sinaimg.cn/large/006tNbRwly1fdd1zpad2mj30i80bz0t5.jpg&quot; width=&quot;400px&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://sanyuyu.xyz/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="git" scheme="https://sanyuyu.xyz/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Emmet for sublime HTML/CSS代码编写神器</title>
    <link href="https://sanyuyu.xyz/2016/12/19/Emmet-for-sublime/"/>
    <id>https://sanyuyu.xyz/2016/12/19/Emmet-for-sublime/</id>
    <published>2016-12-19T03:24:58.000Z</published>
    <updated>2017-03-10T09:05:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ww1.sinaimg.cn/large/006tNbRwly1fdhuo66fnmj30hs078t8v.jpg"><br><a id="more"></a><br> Emmet的简单介绍</p>
<h3 id="一、快速编写HTML代码"><a href="#一、快速编写HTML代码" class="headerlink" title="一、快速编写HTML代码"></a>一、<strong>快速编写HTML代码</strong></h3><p>1.初始化HTML文档需要包含一些固定的标签，比如<html>、<head>、</head><body>等，现在你只需要输入”!”或”html5”，然后按Tab键：可以迅速创建一个HTML结构</body></html></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">	&lt;title&gt;Document&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<!-- more -->
<p>2.<strong>轻松添加class、id、文本和属性</strong> 连续输入元素名称的ID，Emmet会自动为你补全，比如输入p#foo会生成:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p id=&quot;foo&gt;&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>连续输入类和id,比如p.bar#foo,会自动生成：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p class=&quot;bar&quot; id=&quot;foo&quot;&gt;&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>下面来看看如何定义HTML元素的内容和属性。你可以通过输入h1{foo}和a[href=#],就可以自动生成如下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;h1&gt;foo&lt;/h1&gt;</div><div class="line">&lt;a href=&quot;#&quot;&gt;&lt;/a&gt;</div></pre></td></tr></table></figure>
<p>3.<strong>嵌套</strong> 现在你只需要一行代码就可以实现标签的嵌套。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;: 子元素符号， 表示嵌套的元素 p&gt;span  </div><div class="line">                          &lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;p&gt;</div><div class="line"></div><div class="line">+: 同级标签符号 h1+h2       &lt;h1&gt;&lt;/h1&gt;</div><div class="line">                          &lt;h2&gt;&lt;/h2&gt;</div><div class="line"></div><div class="line">^:可以使该符号的标签提升一行 p&gt;span^p </div><div class="line">                        &lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;</div><div class="line">                        &lt;p&gt;&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>4.<strong>分组</strong>，你可以通过嵌套和括号来快速生成一些代码块，比如输入(.foo&gt;h1)+(.bar&gt;h2)会自动生成如下html代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;foo&quot;&gt;</div><div class="line">&lt;h1&gt;&lt;/h1&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;bar&quot;&gt;</div><div class="line">&lt;h2&gt;&lt;/h2&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>5.<strong>隐式标签</strong> 声明一个带类的标签，只需要输入div.item,就会生成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;item&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>在过去版本中，可以省略掉div。现在如果只要输入。.item,则Emmet会根据父标签进行判定。比如在ul中输入.item,就会生成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;li class=&quot;item&quot;&gt;&lt;/li&gt;</div></pre></td></tr></table></figure>
<p>下面是所有的隐式标签名称：</p>
<p>li：用于ul和ol中</p>
<p>tr：用于table、tbody、thead和tfoot中</p>
<p>td：用于tr中</p>
<p>option：用于select和optgroup中</p>
<p>6.<strong>定义多个元素</strong> 要定义多个元素可以使用<strong>“*”</strong>符号。比如，ul&gt;li<strong>*</strong>3可以生成如下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line"> &lt;li&gt;&lt;/li&gt;</div><div class="line"> &lt;li&gt;&lt;/li&gt;</div><div class="line"> &lt;li&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p>7.<strong>定义多个带属性的元素</strong> 如果输入 ul&gt;li.item$*3，将会生成如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line"> &lt;li class=&quot;item1&quot;&gt;&lt;/li&gt;</div><div class="line"> &lt;li class=&quot;item2&quot;&gt;&lt;/li&gt;</div><div class="line"> &lt;li class=&quot;item3&quot;&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<h3 id="二、css缩写"><a href="#二、css缩写" class="headerlink" title="二、css缩写"></a>二、css缩写</h3><p>1.<strong>值</strong> 比如要定义元素的宽度，只需要输入W100，即可生成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">css代码</div><div class="line">width: 100px;</div></pre></td></tr></table></figure>
<p>除了px，也可以生成其他单位，比如输入h10p+m5e,结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">css代码</div><div class="line">1.height: 10%;</div><div class="line">2.margin:5em;</div><div class="line">单位别名列表：</div><div class="line">    p表示%</div><div class="line">    e表示em</div><div class="line">    x表示ex</div></pre></td></tr></table></figure>
<p>2.<strong>附加属性</strong> 可能你之前已经了解了一些缩写，比如@f,可以生成：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">css代码</div><div class="line">@font-face &#123;</div><div class="line">font-family:;</div><div class="line">src: url();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.<strong>模糊匹配</strong> 如果有哪些缩写你拿不准，Emmet会根据你的输入内容匹配最接近的语法，比如输入ov:h、ov-h、ovh都会生成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">css代码</div><div class="line">overflow: hidden;</div></pre></td></tr></table></figure>
<p>4.<strong>供应商前缀</strong> 如果输入非W3C标准的CSS属性，Emmet会自动加上供应商前缀，比如输入trs会生成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">css代码</div><div class="line">-webkit-transform: ;</div><div class="line">-moz-transform: ;</div><div class="line">-ms-transform: ;</div><div class="line">-o-transform: ;</div><div class="line">transform: ;</div></pre></td></tr></table></figure>
<h3 id="三、你还可以定制Emmet插件："><a href="#三、你还可以定制Emmet插件：" class="headerlink" title="三、你还可以定制Emmet插件："></a>三、你还可以定制Emmet插件：</h3><p>1.添加新缩写或更新现有缩写，可修改snippets.json文件</p>
<p>2.更改Emmet过滤器和操作的行为，可修改preferences.json文件</p>
<p>3.定义如何生成HTML或XML代码，可修改syntaxProfiles.json文件</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ww1.sinaimg.cn/large/006tNbRwly1fdhuo66fnmj30hs078t8v.jpg&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://sanyuyu.xyz/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="sublime text3" scheme="https://sanyuyu.xyz/tags/sublime-text3/"/>
    
  </entry>
  
  <entry>
    <title>滕王阁序</title>
    <link href="https://sanyuyu.xyz/2016/12/12/%E6%BB%95%E7%8E%8B%E9%98%81%E5%BA%8F/"/>
    <id>https://sanyuyu.xyz/2016/12/12/滕王阁序/</id>
    <published>2016-12-12T13:24:24.000Z</published>
    <updated>2016-12-24T11:05:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="滕王阁序"><a href="#滕王阁序" class="headerlink" title="滕王阁序"></a>滕王阁序</h1><h3 id="作者：王勃-年代：唐朝"><a href="#作者：王勃-年代：唐朝" class="headerlink" title="作者：王勃 　　　　　　　　　　　　年代：唐朝"></a>作者：王勃 　　　　　　　　　　　　年代：唐朝</h3><p><img src="http://ww3.sinaimg.cn/large/006y8lVajw1fap1rie5qxj30dw0jzahr.jpg" width="300px" height="300px"><br><a id="more"></a>　　<br>　　豫章故郡，洪都新府。星分翼轸(zhěn)，地接衡庐。襟三江而带五湖，控蛮荆而引瓯越。物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃之榻。雄州雾列，俊采星驰。台隍枕夷夏之交，宾主尽东南之美。都督阎公之雅望，棨(qǐ)戟(jǐ)遥临；宇文新州之懿(yì)范，襜(chān)帷(wéi)暂驻。十旬休假，胜友如云；千里逢迎，高朋满座。腾蛟起凤，孟学士之词宗；紫电青霜，王将军之武库。家君作宰，路出名区；童子何知，躬逢胜饯。<br>　　<br>　　时维九月，序属三秋。潦(lǎo)水尽而寒潭清，烟光凝而暮山紫。俨(yān)骖(cān)騑(fēi)于上路，访风景于崇阿(ē)。临帝子长洲，得天人之旧馆。层峦耸翠，上出重霄；飞阁流丹，下临无地。鹤汀(tīng)凫(fǔ)渚(zhǔ)，穷岛屿之萦(yíng)回；桂殿兰宫，即冈峦之体势。</p>
<p>　　披绣闼(tà)，俯雕甍(méng)，山原旷其盈视，川泽纡(yū)其骇瞩。闾(lǘ)阎(yán)扑地，钟鸣鼎食之家；舸(gě)舰迷津，青雀黄龙之舳(zhú)。云销雨霁(jì)，彩彻区明。落霞与孤鹜(wù)齐飞，秋水共长天一色。渔舟唱晚，响穷彭蠡(lǐ)之滨；雁阵惊寒，声断衡阳之浦。</p>
<p>　　遥襟甫(fǔ)畅，逸兴遄(chuán)飞。爽簌发而清风生，纤歌凝而白云遏(è)。睢(suī)园绿竹，气凌彭泽之樽；邺(yè)水朱华，光照临川之笔。四美具，二难并。穷睇(dǐ)眄(miǎn)于中天，极娱游于暇日。天高地迥(jiǒng)，觉宇宙之无穷；兴尽悲来，识盈虚之有数。望长安于日下，目吴会(kuài)于云间。地势极而南溟(míng)深，天柱高而北辰远。关山难越，谁悲失路之人？萍水相逢，尽是他乡之客。怀帝阍(hūn)而不见，奉宣室以何年？</p>
<p>　　嗟(jiē)乎！时运不齐，命途多舛(chuǎn)。冯唐易老，李广难封。屈贾谊(yì)于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？所赖君子见机，达人知命。老当益壮，宁移白首之心？穷且益坚，不坠青云之志。酌贪泉而觉爽，处涸辙(hé)(zhé)以犹欢。北海虽赊(shē)，扶摇可接；东隅(yú)已逝，桑榆非晚。孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！勃，三尺为名，一介书生。无路请缨，等终军之弱冠(guàn)；有怀投笔，慕宗悫(què)之长风。舍簪(zān)笏(hù)于百龄，奉晨昏于万里。非谢家之宝树，接孟氏之芳邻。他日趋庭，叨(tāo)陪鲤对；今兹捧袂，喜托龙门；杨意不逢，扶凌云而自惜；钟期既遇，奏流水以何惭？</p>
<p>　　呜呼！胜地不常，盛筵(yán)难再；兰亭已矣，梓(zǐ)泽丘墟。临别赠言，幸承恩于伟饯；登高作赋，是所望于群公。敢竭鄙怀，恭疏短引；一言均赋，四韵俱成。请洒潘江，各倾陆海云尔：</p>
<p>　<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">　　　　　　　　滕王高阁临江渚，佩玉鸣鸾罢歌舞。</div><div class="line">　　　　　　　　画栋朝飞南浦云，珠帘暮卷西山雨。</div><div class="line">　　　　　　　　闲云谭影日悠悠，物转星移几度秋。</div><div class="line">　　　　　　　　阁中帝子今何在？栏外长江空自流。</div></pre></td></tr></table></figure></p>
<h2 id="译文："><a href="#译文：" class="headerlink" title="译文："></a>译文：</h2><p>　　这里是汉代的豫章郡城，如今是洪州的都督府，天上的方位属于翼，轸两星宿的分野，地上的位置连结着衡山和庐山。以三江为衣襟，以五湖为衣带、控制着楚地，连接着闽越。物类的精华，是上天的珍宝，宝剑的光芒直冲上牛、斗二星的区间。人中有英杰，因大地有灵气，陈蕃专为徐孺设下几榻。雄伟的洪州城，房屋像雾一般罗列，英俊的人才，像繁星一样地活跃。城池座落在夷夏交界的要害之地，主人与宾客，集中了东南地区的英俊之才。都督阎公，享有崇高的名望，远道来到洪州坐镇，宇文州牧，是美德的楷模，赴任途中在此暂留。正逢十日休假的日子，杰出的友人云集，高贵的宾客，也都不远千里来到这里聚会。文坛领袖孟学士，文章的气势像腾起的蛟龙，飞舞的彩凤，王将军的武库里，藏有像紫电、青霜这样锋利的宝剑。由于父亲在交趾做县令，我在探亲途中经过这个著名的地方。我年幼无知，竟有幸亲身参加了这次盛大的宴会。</p>
<p>　　时当九月，秋高气爽。积水消尽，潭水清澈，天空凝结着淡淡的云烟，暮霭中山峦呈现一片紫色。在高高的山路上驾着马车，在崇山峻岭中访求风景。来到昔日帝子的长洲，找到仙人居住过的宫殿。这里山峦重叠，青翠的山峰耸入云霄。凌空的楼阁，红色的阁道犹如飞翔在天空，从阁上看不到地面。白鹤，野鸭停息的小洲，极尽岛屿的纡曲回环之势，雅浩的宫殿，跟起伏的山峦配合有致。</p>
<p>　　披开雕花的阁门，俯视彩饰的屋脊，山峰平原尽收眼底，湖川曲折令人惊讶。遍地是里巷宅舍，许多钟鸣鼎食的富贵人家。舸舰塞满了渡口，尽是雕上了青雀黄龙花纹的大船。正值雨过天晴，虹消云散，阳光朗煦，落霞与孤雁一起飞翔，秋水和长天连成一片。傍晚渔舟中传出的歌声，响彻彭蠡湖滨，雁群感到寒意而发出的惊叫，鸣声到衡阳之浦为止。<br>放眼远望，胸襟刚感到舒畅，超逸的兴致立即兴起，排箫的音响引来的徐徐清风，柔缓的歌声吸引住飘动的白云。像睢园竹林的聚会，这里善饮的人，酒量超过彭泽县令陶渊明，像邺水赞咏莲花，这里诗人的文采，胜过临川内史谢灵运。（音乐与饮食，文章和言语）这四种美好的事物都已经齐备，（良辰美景，赏心乐事）这两个难得的条件也凑合在一起了，向天空中极目远眺，在假日里尽情欢娱。苍天高远，大地寥廓，令人感到宇宙的无穷无尽。欢乐逝去，悲哀袭来，我知道了事物的兴衰成败是有定数的。西望长安，东指吴会，南方的陆地已到尽头，大海深不可测，北方的北斗星多么遥远，天柱高不可攀。关山重重难以越过，有谁同情不得志的人？萍水偶尔相逢，大家都是异乡之客．怀念着君王的宫门，但却不被召见，什么时候才能够去侍奉君王呢？</p>
<p>　　呵，各人的时机不同，人生的命运多有不顺。冯唐容易衰老，李广难得封侯。使贾谊遭受委屈，贬于长沙，并不是没有圣明的君主，使梁鸿逃匿到齐鲁海滨，难道不是政治昌明的时代？只不过由于君子安于贫贱，通达的人知道自己的命运罢了。年纪虽然老了，但志气应当更加旺盛，怎能在白头时改变心情？境遇虽然困苦，但节操应当更加坚定，决不能抛弃自己的凌云壮志。即使喝了贪泉的水，心境依然清爽廉洁；即使身处于干涸的主辙中，胸怀依然开朗愉快。北海虽然十分遥远，乘着羊角旋风还是能够达到，早晨虽然已经过去，而珍惜黄昏却为时不晚。孟尝君心地高洁，但白白地怀抱着报国的热情，阮籍为人放纵不羁，我们怎能学他那种穷途的哭泣！<br>我地位卑微，只是一个书生。虽然和终军一样年已二十一，却无处去请缨杀敌。我羡慕宗悫那种“乘长风破万里浪”的英雄气概，也有投笔从戎的志向。如今我抛弃了一生的功名，不远万里去朝夕侍奉父亲。虽然称不上谢家的“宝树”，但是能和贤德之士相交往。不久我将见到父亲，聆听他的教诲。今天我侥幸地奉陪各位长者，高兴地登上龙门。假如碰不上杨得意那样引荐的人，就只有抚拍着自己的文章而自我叹惜。既然已经遇到了钟子期，就弹奏一曲《流水》又有什么羞愧呢？</p>
<p>　　呵！名胜之地不能常存，盛大的宴会难以再逢。兰亭宴集已为陈迹，石崇的梓泽也变成了废墟。承蒙这个宴会的恩赐，让我临别时作了这一篇序文，至于登高作赋，这只有指望在座诸公了。我只是冒昧地尽我微薄的心意，作了短短的引言。在座诸位都按各自分到的韵字赋诗，我已写成了四韵八句。请在座诸位施展潘岳，陆机一样的才笔，各自谱写瑰丽的诗篇吧！</p>
<h3 id="古代词文中，我个人是最喜欢这篇了！"><a href="#古代词文中，我个人是最喜欢这篇了！" class="headerlink" title="古代词文中，我个人是最喜欢这篇了！"></a>古代词文中，我个人是最喜欢这篇了！</h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;滕王阁序&quot;&gt;&lt;a href=&quot;#滕王阁序&quot; class=&quot;headerlink&quot; title=&quot;滕王阁序&quot;&gt;&lt;/a&gt;滕王阁序&lt;/h1&gt;&lt;h3 id=&quot;作者：王勃-年代：唐朝&quot;&gt;&lt;a href=&quot;#作者：王勃-年代：唐朝&quot; class=&quot;headerlink&quot; title=&quot;作者：王勃 　　　　　　　　　　　　年代：唐朝&quot;&gt;&lt;/a&gt;作者：王勃 　　　　　　　　　　　　年代：唐朝&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006y8lVajw1fap1rie5qxj30dw0jzahr.jpg&quot; width=&quot;300px&quot; height=&quot;300px&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="诗词散记" scheme="https://sanyuyu.xyz/categories/%E8%AF%97%E8%AF%8D%E6%95%A3%E8%AE%B0/"/>
    
    
      <category term="王勃" scheme="https://sanyuyu.xyz/tags/%E7%8E%8B%E5%8B%83/"/>
    
  </entry>
  
</feed>
