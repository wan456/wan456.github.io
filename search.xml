<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[JS深入浅出]]></title>
      <url>%2F2017%2F04%2F28%2FJS%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%2F</url>
      <content type="text"><![CDATA[#JS深入浅出 数据类型原始类型1.number 数字 2.string 字符 3.boolean 布尔值 true or false 4.null 空 值 5.undefined 未定义 object 对象类型 Function Array Date 隐式转换+ 和 -12var x = &apos;The answer is &apos; +42;var y = 42 + &apos;is the answer&apos;; num 变成 数字类型 num - 0 num 变成字符串 num + “ == 转换数据类型123456&quot;123&quot; == 123;true0 == false;truenull == undefined;true a === b123456类型不同，返回false类型相同: null === null undefined === undefined NaN ≠ NaN new Object ≠ new Object 包装对象12345678var str = &quot;string&quot;;undefinedvar strObj = new String(&quot;string&quot;);undefinedstr&quot;string&quot;strObjString &#123;0: &quot;s&quot;, 1: &quot;t&quot;, 2: &quot;r&quot;, 3: &quot;i&quot;, 4: &quot;n&quot;, 5: &quot;g&quot;, length: 6, [[PrimitiveValue]]: &quot;string&quot;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Datepicker 日历组件开发]]></title>
      <url>%2F2017%2F04%2F19%2FDatepicker%2F</url>
      <content type="text"><![CDATA[效果如下： HTML代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;datapicker&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;ui-datepicker-wrapper&quot;&gt; &lt;div class=&quot;ui-datepicker-header&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;ui-datepicker-btn ui-datepicker-prev-btn&quot;&gt;&amp;lt;&lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;ui-datepicker-btn ui-datepicker-next-btn&quot;&gt;&amp;gt;&lt;/a&gt; &lt;span class=&quot;ui-datepicker-curr-month&quot;&gt;2017-4&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;ul-datepicker-body&quot;&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;一&lt;/th&gt; &lt;th&gt;二&lt;/th&gt; &lt;th&gt;三&lt;/th&gt; &lt;th&gt;四&lt;/th&gt; &lt;th&gt;五&lt;/th&gt; &lt;th&gt;六&lt;/th&gt; &lt;th&gt;日&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;29&lt;/td&gt; &lt;td&gt;30&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;3&lt;/td&gt; &lt;td&gt;4&lt;/td&gt; &lt;td&gt;5&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;6&lt;/td&gt; &lt;td&gt;7&lt;/td&gt; &lt;td&gt;8&lt;/td&gt; &lt;td&gt;9&lt;/td&gt; &lt;td&gt;10&lt;/td&gt; &lt;td&gt;11&lt;/td&gt; &lt;td&gt;12&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;13&lt;/td&gt; &lt;td&gt;14&lt;/td&gt; &lt;td&gt;15&lt;/td&gt; &lt;td&gt;16&lt;/td&gt; &lt;td&gt;17&lt;/td&gt; &lt;td&gt;18&lt;/td&gt; &lt;td&gt;19&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;20&lt;/td&gt; &lt;td&gt;21&lt;/td&gt; &lt;td&gt;22&lt;/td&gt; &lt;td&gt;23&lt;/td&gt; &lt;td&gt;24&lt;/td&gt; &lt;td&gt;25&lt;/td&gt; &lt;td&gt;26&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;27&lt;/td&gt; &lt;td&gt;28&lt;/td&gt; &lt;td&gt;29&lt;/td&gt; &lt;td&gt;30&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;3&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; CSS代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354.ui-datepicker-wrapper &#123; width: 240px; font-size: 16px; color: #666; -webkit-box-shadow: 2px 2px 8px 2px rgba(128,128,128,.3); box-shadow: 2px 2px 8px 2px rgba(128,128,128,.3); margin: 20px auto 0;&#125;.ui-datepicker-wrapper .ui-datepicker-header &#123; padding: 0 20px; height: 50px; line-height: 50px; text-align: center; background: #f0f0f0; border-bottom: 1px solid #ccc; font-weight: bold;&#125;.ui-datepicker-wrapper .ui-datepicker-btn &#123; font-family: serif; font-size: 20px; width: 20px; height: 50px; line-height: 50px; text-align: center; color: #1abc9c; cursor: pointer; text-decoration: none;&#125;.ui-datepicker-wrapper .ui-datepicker-prev-btn &#123; float: left;&#125;.ui-datepicker-wrapper .ui-datepicker-next-btn &#123; float: right;&#125;.ui-datepicker-wrapper .ul-datepicker-body table &#123; width: 100%; border-collapse: collapse;&#125;.ui-datepicker-wrapper .ul-datepicker-body th,.ui-datepicker-wrapper .ul-datepicker-body td &#123; height: 30px; text-align: center;&#125;.ui-datepicker-wrapper .ul-datepicker-body th &#123; font-size: 12px; line-height: 40px; height: 40px;&#125;.ui-datepicker-wrapper .ul-datepicker-body td &#123; font-size: 10px; border: 1px solid #f0f0f0; cursor: pointer;&#125; 最主要的是数据部分数据的作用 渲染当月日历表格 用于点击时取日期值 日期对象.new Date(year,month-1,date) .月份需要减一 传入数据的话 .越界自动进(退)位 .getFullYear() 获取年份/ getMonth() 获取的值要比实际小1，比如当前4月，获取的是3，所以要加1/ .getDate() 获取多少号 .getDay() 获取星期几 . 当月第一天 new Date(year, month-1, 1); . 当月最后一天 new Date(year, month, 0); 代表最后一天，会倒回到31号，或者28号 30号 .星期一到星期天 [1,2,3,4,5,6,0]]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Ajax 学习]]></title>
      <url>%2F2017%2F04%2F18%2Fstudy%2F</url>
      <content type="text"><![CDATA[Ajax 概念ajax出现之前，都是同步的 基本过程1.运用HTML和CSS来实现页面2.运用XMLHttpRequset和Web服务器进行数据的异步交换3.运用JavaScript操作DOM,实现动态局部刷新 XMLHttpRequsetvar request = new XMLHttpRquest(); 概念介绍——HTTP请求一个完整的HTTP请求过程，通常有下面7个步骤: 1.建立TCP连接 2.浏览器向服务器发送请求 3.浏览器发送请求头信息 4.服务器应答 5.服务器发送应答头信息 6.服务器向浏览器发送数据 7.服务器关闭TCP连接 一个HTTP请求一般由四部分组成: 1.HTTP请求的方法或动作，比如是GET或POST 2.正在请求的URL，总得指导请求的地址是什么吧 3.请求头，包含一些客户端环境信息，身份验证信息等 4.请求体，也就是请求正文，请求正文中可以包含客户提交的查询字符串信息，表单信息等等 get与postget: 一般用于信息获取，默认Http请求方法，查询使用URL传递参数 对所发送信息的数量也有限制，一般在2000个字符 post: 一般用于修改服务器上的资源 对发送信息的数量无限制 HTTP响应内容 HTTP状态码 XMLHttpRquest请求open(method,url,async) method请求方法 GET POSTURL, async表示请求是同步的还是异步的，一般我们使用ajax,使用异步请求,true,默认是tue,可以不填写send(string) GET 可以不填写 ，或者none 12345678910request.open(&quot;GET&quot;,get.php,true);request.send();request.open(&quot;POST&quot;,&quot;post.php&quot;,true);request.send();第三个有用request.open(&quot;POST&quot;,&quot;create.php&quot;,true);request.setRequsetHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);request.send(&quot;name=王二狗&amp;sex=男&quot;); XMLHttpRequset取得响应 .readyState属性 请求状态 0: 请求未初始化，open还没调用 1: 服务器连接已建立，open已经调用了 2: 请求已接收，也就是接收到头信息了 3: 请求处理中，也就是接收到响应主体了 4: 请求已完成，且响应已就绪，也就是响应完成了。 123456789var request = new XMLHttpRquest();request.open(&quot;GET&quot;,&quot;get.php&quot;,true);request.send();request.send();request.onreadystatechange = function()&#123; if(request.readyState===4 &amp;&amp; request.status===200)&#123; //做一些事情 request.responseText &#125;&#125; php 兼容服务器.PHP 是一种创建动态交互性站点的服务器脚本语言 .PHP 能够生成动态页面内容 .PHP 能够创建、打开、读取、写入、删除以及关闭服务器上的文件 .PHP 能够接收表单数据并处理 .PHP 能够发送并取回cookies .PHP 能够添加、删除、修改数据库中的数据 .PHP 能够限制用户访问某些网站的页面 … PHP测试页面.PHP 脚本以&lt;?php开头,以?&gt;结尾 .PHP 文件的默认文件扩展名是.php .PHP 语句以分号结尾(;) JSON.JSON: JavasScript对象表示法(JavaScript Object Notation) .JSON 是存储和交换文本信息的语法，类似XML。它采用键值对的方式来组织，易于人们阅读和编写，同时也易于机器解析和生成 .JSON 是独立于语言的，也就是不管什么语言，都可以解析json,只需要按照json的规则来就行 JSON与XML比较. json的长度和xml格式比起来很短小. json读写的速度更快. json可以使用JavaScript内建的方法直接进行解析，转换成Javascript对象，非常方便JSON语法规则. JSON数据的格式是：名称/值对名称/值对组合的名称写在前面(在双引号中)，值对写在后面(同样在双引号中)，中间用冒号隔开：比如”name”:”郭靖”.JSON的值可以使下面这些类型:数字(整数或浮点数)，比如123，1.23字符串(在双引号中)逻辑值(tue或false)数组(在方括号中)对象(在花括号中)null1234567&#123; &quot;staff&quot;:[ &#123;&quot;name&quot;:&quot;洪七&quot;,&quot;age&quot;:70&#125;, &#123;&quot;name&quot;:&quot;郭靖&quot;,&quot;age&quot;:35&#125;, &#123;&quot;name&quot;:&quot;黄蓉&quot;,&quot;age&quot;:30&#125; ]&#125;JSON解析1.eval和JSON.parse2.在代码中使用eval是很危险的!特别是用它执行第三方的JSON数据(其中可能包含恶意代码时)，尽可能使用JSON.parse()方法解析字符串本身，该方法还可以捕获JSON中的语法错误。两种方式1234567var jsondata = &apos;&#123;&quot;staff&quot;:[&#123;&quot;name&quot;:&quot;洪七&quot;,&quot;age&quot;:70&#125;,&#123;&quot;name&quot;:&quot;郭靖&quot;,&quot;age&quot;:35&#125;,&#123;&quot;name&quot;:&quot;黄蓉&quot;,&quot;age&quot;:30&#125;]&#125;&apos;;var jsonobj = eval(&apos;(&apos;+ jsondata +&apos;)&apos;);alert(jsonobj.staff[0].name);var jsondata = &apos;&#123;&quot;staff&quot;:[&#123;&quot;name&quot;:&quot;洪七&quot;,&quot;age&quot;:70&#125;,&#123;&quot;name&quot;:&quot;郭靖&quot;,&quot;age&quot;:35&#125;,&#123;&quot;name&quot;:&quot;黄蓉&quot;,&quot;age&quot;:30&#125;]&#125;&apos;;var jsonobj = JSON.parse(jsondata);alert(jsonobj.staff[0].name);用Jquery实现Ajax.Jquery.ajax([settings]).type: 类型，”POST”或”GET”,默认为”GET”. url: 发送请求的地址. data : 是一个对象，连同请求发送到服务器的数据.datatype:预期服务器返回的数据类型，如果不指定，Jquery将自动根据HTTP包MIME信息来只能判断，一般我们采用json格式，可以设置为”json”. success: 是一个方法，请求成功后的回调函数。传入返回后的数据，以及包含成功代码的字符串.error: 是一个方法，请求失败时调用此函数，传入XMLHttpRequest跨域http:// www. abc.com : 8080 / scripts/jquery.js事实上HTTP和HTTPS两个协议的url看上去都可以省略端口号，但是他们访问的默认端口不同HTTP默认访问80端口HTTPS默认访问443端口所以http访问https肯定是跨域端口号是8080，如果是80，可以省略.javaScript处于安全方面的考虑，不允许跨域调用其他页面的对象。什么是跨域呢，简单的理解就是因为JavaScript同源策略的限制，a.com域名下的js无法操作b.com或c.com域名下的对象主域名 abc.comwww.abc.com 一级域名bbs.abc.com 一级域名beijing.bbs.abc.com 二级域名haidian.beijing.bbs.abc.com 三级域名处理跨域方法一： 代理通过在同域名的的Web服务器创建一个代理:.北京服务器(域名: www.beijing.com) 上海服务器(域名：www.shanghai.com) .比如在北京的Web服务器的后台对上海的服务进行了代理 (www.beijng.com/proxy-shanghaiservice-php)来调用上海服务器 (www.shanghai.com/service.php)的服务，然后再把响应结果返回给前端，这样前端调用北京同域名的服务就和调用上海的服务效果相同了。 处理跨域方法二：JSONP .JSONP可用于解决主流浏览器的跨域数据访问的问题 在www.aaa.com页面中 123456&lt;script&gt;function jsonp(json) &#123; alert(json[&quot;name&quot;]);&#125;&lt;/script&gt;&lt;script src=&quot;http://www.bbb.com/jsonp.js&gt;&lt;/script&gt; 在www.bbb.com页面中: jsonp({“name”:”洪七”,”age”:24});]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[media quires 媒体查询]]></title>
      <url>%2F2017%2F04%2F18%2Fqueries%2F</url>
      <content type="text"><![CDATA[Media queries ——媒体类型 在实际媒体类型有近十种之多，实际之中常用的也就那么几种，不过媒体类型的引用方法也有很多种，常见的有: link标签、@import 和 CSS3新增的@media几种 link方法link方法引入媒体类型其实就是在标签引用样式的时候，通过link标签中的media属性来指定不同的媒体类型。如下所示。 12&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot; media=&quot;screen&quot; /&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;print.css&quot; media=&quot;print&quot; /&gt; @import方法@import可以引用样式文件，同样也可以引用媒体类型，@import引入媒体类型主要用两种方式，一种在样式中通过@import调用另一个样式文件，另一种方法是在标签中的中引入。如样式文件中调用另一个样式文件时，就可以指定对应的媒体类型。 @import url(reset.css) screen;@import url(print.css) print; 在中&lt;的style&gt;标签中引入媒体类型方法. @importurl(style.css) all; @media方法 @media是CSS3中新引进的一个特性，被称为媒体查询。在页面中也可以通过这个属性来引入媒体类型。@media引入媒体类型和@import有点类似也具有两方式。 1.在样式文件中引入媒体类型 @media screen { 选择器{/你的样式代码写在这里…/}} 2.使用@media引入媒体类型的方式是在head标签中的style中引用。 @media screen{ 选择器{/你的样式代码写在这里…/}} Media Queries 使用方法Media Queries能在不同的条件下使用不同的样式，使页面在不同在终端设备下达到不同的渲染效果。前面简单的介绍了Media Queries如何引用到项目中，但Media Queries有其自己的使用规则。具体来说,Media Queries的使用方法如下。 @media 媒体类型and （媒体特性）{你的样式} 注意：使用Media Queries必须要使用“@media”开头，然后指定媒体类型（也可以称为设备类型），随后是指定媒体特性（也可以称之为设备特性）。媒体特性的书写方式和样式的书写方式非常相似，主要分为两个部分，第一个部分指的是媒体特性，第二部分为媒体特性所指定的值，而且这两个部分之间使用冒号分隔。例如： (max-width: 480px) 从前面表中可以得知，主要有十种媒体类型和13种媒体特性，将其组合就类似于不同的CSS集合。但与CSS属性不同的是，媒体特性是通过min/max来表示大于等于或小于做为逻辑判断，而不是使用小于（&lt;）和大于（&gt;）这样的符号来判断。接下来一起来看看Media Queries在实际项目中常用的方式。 1.最大宽度max-width“max-width”是媒体特性中最常用的一个特性，其意思是指媒体类型小于或等于指定的宽度时，样式生效。如: @media screen and (max-width:480px) { .ads { display:none; }} 上面表示的是，当屏幕小于或等于480px，页面中的广告区块(.ads)将都被隐藏。 2.最小宽度 min-width“min-width”与”max-width”相反，指的是媒体类型大于或等于指定宽度时，样式生效。 123@meida screen and (min-width:900px;) &#123; .wrapper&#123;width: 980px;&#125;&#125; 上面表示的是:当屏幕大于或等于900px时，容器”.wrapper”的宽度为980px; 3.多个媒体特性使用Media Queries 可以使用关键词”and”将多个媒体特性结合在一起，也就是说，一个Media Query可以包含0到多个表达式，表达式又可以包含0到多个关键字，以及一种媒体类型。当屏幕在600px-900px之间时，body的背景色渲染为”#f5f5f5”，如下所示. 123@media screen and (min-width:600px) and (max-width:900px;)&#123; body &#123;background-color: #f5f5f5;&#125;&#125; 4.设备屏幕的输出宽度Device Width在智能设备上，例如iPhone、iPad等，还可以根据屏幕设备的尺寸来设置相应的样式（或者调用相应的样式文件）。同样的，对于屏幕设备同样可以使用“min/max”对应参数，如“min-device-width”或者“max-device-width”。 1&lt;link rel=&quot;stylesheet&quot; media=&quot;screen and (max-device-width:480px)&quot; href=&quot;iphone.css&quot; /&gt; 上面的代码指的是“iphone.css”样式适用于最大设备宽度为480px，比如说iPhone上的显示，这里的“max-device-width”所指的是设备的实际分辨率，也就是指可视面积分辨率。 5.not关键词使用关键词”not”是用来排除某种制定的媒体类型，也就是用来排除符合表达式的设备，换句话说，not关键词表示对后面的表达式执行取反操作，如: 1@media not print and (max-width: 100px;)&#123;样式代码&#125; 上面代码表示的是：样式代码将被使用在除打印设备和宽度小于1200px下所有设备中。 6.only关键词only用来指定某种特定的媒体类型，可以用来排除不支持媒体查询的浏览器。其实only很多时候是用来对那些不支持Media Query但却支持Media Type的设备隐藏样式表的。其主要有：支持媒体特性的设备，正常调用样式，此时就当only不存在；表示不支持媒体特性但又支持媒体类型的设备，这样就会不读样式，因为其先会读取only而不是screen；另外不支持Media Queries的浏览器，不论是否支持only，样式都不会被采用。如 1234&lt;linkrel=&quot;stylesheet&quot; media=&quot;only screen and (max-device-width:240px)&quot; href=&quot;android240.css&quot; /&gt;在Media Query中如果没有明确指定Media Type，那么其默认为all，如：&lt;linkrel=&quot;stylesheet&quot; media=&quot;(min-width:701px) and (max-width:900px)&quot; href=&quot;mediu.css&quot; /&gt; 另外在样式中，还可以使用多条语句来将同一个样式应用于不同的媒体类型和媒体特性中，指定方式如下所示。 1&lt;linkrel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot; media=&quot;handheld and (max-width:480px), screen and (min-width:960px)&quot; /&gt; 上面代码中style.css样式被用在宽度小于或等于480px的手持设备上，或者被用于屏幕宽度大于或等于960px的设备上。 到目前为止，CSS3 Media Queries得到了众多浏览器支持，除了IE6-8浏览器不支持之外，在所有现代浏览器中都可以完美支持。还有一个与众不同的时，Media Queries在其他浏览器中不要像其他CSS3属性一样在不同的浏览器中添加前缀。 响应式设计什么是响应式设计呢？维基百科是这样对响应式作的描述：“Responsive设计简单的称为RWD，是精心提供各种设备都能浏览网页的一种设计方法，RWD能让你的网页在不同的设备中展现不同的设计风格。”从这一点描述来说，RWD不是流体布局，也不是网格布局，而是一种独特的网页设计方法。 响应式设计要考虑元素布局的秩序，而且还需要做到“有求必应”，那就需要满足以下三个条件：网站必须建立灵活的网格基础；引用到网站的图片必须是可伸缩的；不同的显示风格，需要在Media Queries上写不同的样式。 要想灵活的使用Responsive，仅满足这几个条件还是不够的，我们必须对Responsive有一个全面的了解。 1.流体网络流体网格是一个简单的网格系统，这种网格设计参考了流体设计中的网格系统，将每个网格格子使用百分比单位来控制网格大小。这种网格系统最大的好处是让你的网格大小随时根据屏幕尺寸大小做出相对应的比例缩放。 2.弹性图片弹性图片指的是不给图片设置固定尺寸，而是根据流体网格进行缩放，用于适应各种网格的尺寸。而实现方法是比较简单，一句代码就能搞定的事情。 img {max-width:100%;} 3.媒体查询媒体查询在CSS3中得到了强大的扩展。使用这个属性可以让你的设计根据用户终端设备适配对应的样式。这也是响应式设计中最为关键的。可以说Responsive设计离开了Medial Queries就失去了他生存的意义。简单的说媒体查询可以根据设备的尺寸，查询出适配的样式。Responsive设计最关注的就是：根据用户的使用设备的当前宽度，你的Web页面将加载一个备用的样式，实现特定的页面风格。 4.屏幕分辨率屏幕分辨简单点说就是用户显示器的分辨率，深一点说，屏幕分辨率指的是用户使用的设备浏览您的Web页面时的显示屏幕的分辨率，比如说智能手机浏览器、移动电脑浏览器、平板电脑浏览器和桌面浏览器的分辨率。Responsive设计利用Media Queries属性针对浏览器使用的分辨率来适配对应的CSS样式。因此屏幕分辨率在Responsive设计中是一个很重要的东西，因为只有知道Web页面要在哪种分辨率下显示何种效果，才能调用对应的样式。 5.主要断点主要断点，在Web开发中是一个新词，但对于Responsive设计中是一个很重要的一部分。简单的描述就是，设备宽度的临界点。在Media Queries中，其中媒体特性“min-width”和“max-width”对应的属性值就是响应式设计中的断点值。简单点说，就是使用主要断点和次要断点，创建媒体查询的条件。而每个断点会对应调用一个样式文件（或者样式代码），如下图所示： Responsive 设计 meta标签 1&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,user-scalable=no/&quot;&gt; 自由缩放属性 resize自由缩放属性resize为了增强用户体验，CSS3增加了很多新的属性，其中resize就是一个重要的属性，它允许用户通过拖动的方式来修改元素的尺寸来改变元素的大小。到目前为止，可以使用overflow属性的任何容器元素。 在此之前，Web设计师为了要实现这样具有拖动效果的UI，使用大量的脚本代码才能实现，这样费时费力，效率极低。 resize属性主要是用来改变元素尺寸大小的，其主要目的是增强用户体验。但使用方法却是极其的简单，先从其语法入手。 resize: none | both | horizontal | vertical | inherit 属性值 取值说明 none 用户不能拖动元素修改尺寸大小。 both 用户可以拖动元素，同时修改元素的宽度和高度 horizontal 用户可以拖动元素，仅可以修改元素的宽度，但不能修改元素的高度。 vertical 用户可以拖动元素，仅可以修改元素的高度，但不能修改元素的宽度。 inherit 继承父元素的resize属性值。 CSS3外轮廓属性外轮廓outline在页面中呈现的效果和边框border呈现的效果极其相似，但和元素边框border完全不同，外轮廓线不占用网页布局空间，不一定是矩形，外轮廓是属于一种动态样式，只有元素获取到焦点或者被激活时呈现。 outline属性早在CSS2中就出现了，主要是用来在元素周围绘制一条轮廓线，可以起到突出元素的作用。但是并未得到各主流浏览器的广泛支持，在CSS3中对outline作了一定的扩展，在以前的基础上增加新特性。outline属性的基本语法如下： outline: ［outline-color］ || [outline-style] || [outline-width] || [outline-offset] || inherit outline: red solid 2px; CSS3生成内容以及清除浮动在Web中插入内容，在CSS2.1时代依靠的是JavaScript来实现。但进入CSS3进代之后我们可以通过CSS3的伪类“:before”，“:after”和CSS3的伪元素“::before”、“::after”来实现，其关键是依靠CSS3中的“content”属性来实现。不过这个属性对于img和input元素不起作用。 在CSS中有一种清楚浮动的方法叫”clearfix”,而这个“clearfix”方法就中就使用了“content”，只不过只是在这里插入了一个空格。如下所示： 1234567891011121314151617.clearfix:before,.clearfix:after &#123; content:””; display:table;&#125;.clearfix:after &#123; clear:both; overflow:hidden;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CSS3盒子模型]]></title>
      <url>%2F2017%2F04%2F18%2FCSS3%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%2F</url>
      <content type="text"><![CDATA[CSS3盒子模型CSS盒模型CSS中有一种基础设计模式叫盒模型，盒模型定义了Web页面中的元素中如何来解析。CSS中每一个元素都是一个盒模型，包括html和body标签元素。在盒模型中主要包括width、height、border、background、padding和margin这些属性，而且他们之间的层次关系可以相互影响，来看一张盒模型的3D展示图： 从图中可以看出padding属性和content属性层叠background-image属性，层叠background-color属性，这个是存在的，它们四者之间构成了Ｚ轴（垂直屏幕的坐标）多重层叠关系。但是border属性与margin属性、padding属性三者之间应该是平面上的并级关系，并不能构成Ｚ轴的层叠关系。在CSS3中新增加了box-sizing属性，能够事先定义盒模型的尺寸解析方式，其语法规则如下： box-sizing: content-box | border-box | inherit 取值说明 属性值 属性值说明 content-box 默认值，其让元素维持W3C的标准盒模型，也就是说元素的宽度和高度（width/height）等于元素边框宽度（border）加上元素内距（padding）加上元素内容宽度或高度（content width/ height），也就是element width/height = border + padding + content width / height border-box 重新定义CSS2.1中盒模型组成的模式，让元素维持IE传统的盒模型（IE6以下版本和IE6-7怪异模式），也就是说元素的宽度或高度等于元素内容的宽度或高度。从上面盒模型介绍可知，这里的内容宽度或高度包含了元素的border、padding、内容的宽度或高度（此处的内容宽度或高度＝盒子的宽度或高度—边框—内距）。 inherit 使元素继承父元素的盒模型模式 一、Flex布局Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。任何一个容易都可以指定为Flex布局。 123.box &#123; display: flex;&#125; 行内元素也可以使用Flex布局 123.box &#123; display:inline-flex;&#125; Wevkit内核的浏览器，必须加上-webkit前缀 1234.box &#123; display: -webkit-flex; /*safari*/ display: flex;&#125; 注意，设为Flex布局以后，子元素的float、clear和vertical-align属性将失效 二、基本概念采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。 三、容器的属性以下6个属性设置在容器上 123456. flex-directionn. flex-wrap. flex-flow. justify-content. align-items. align-content 3.1 flex-direction属性flex-direction 属性决定主轴的方向 (即项目的排列方向)。 123.box &#123; flex-direction: row | row-reverse | column | column-reverse&#125; 它可能有4个值。 1234. row (默认值): 主轴为水平方向，起点在左端。. row-reverse: 主轴为水平方向，起点在右端. column: 主轴为垂直方向，起点在上沿. column-reverse: 主轴为垂直方向，起点在下沿 3.2 flex-wrap 属性默认情况下，项目都排在一条线上(又称为轴线)上。flex-wrap属性定义，如果一条轴线上，如何换行。 123.box &#123; flex-wrap: nowrap | wrap | wrap-reverse;&#125; 它可能取三个值1.nowrap(默认): 不换行。2.wrap:换行，第一行在上方。3.wrap-reverse: 换行，第一行在下方。 3.3 flex-flowflex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。 123.box &#123; flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;&#125; 3.4 justify-content属性justify-content属性定义了项目在主轴上的对齐方式。 123.box &#123; justify-content: flex-start | flex-end | center | space-between|space-around;&#125; 它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。 12345. flex-start(默认值) : 左对齐. flex-end: 右对齐. center: 居中. space-between: 两端对齐，项目之间的间隔都相等. space-around: 每个项目两侧的间隔相等，所以，项目之间的间隔比项目与边框的间隔大一倍 3.5 align-items属性align-items属性定义项目子啊交叉轴上如何对齐。 123.box &#123; align-items: flex-start | flex-end | center | baseline | stretch;&#125; 它可能取5个值，具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。 12345. flex-start: 交叉值得起点对齐. flex-end: 交叉轴的终点对齐。. center: 交叉轴的中点对齐。. basseline: 项目的第一行文字的基线对齐。. stretch(默认值) : 如果项目末设置高度或设置为auto,将占满整个容器的高度。 3.6 align-content属性align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。.box { align-content: flex-strat | flex-end | center | space-between | space-around | stretch;}该属性可能取6个值。 123456flex-start：与交叉轴的起点对齐。flex-end：与交叉轴的终点对齐。center：与交叉轴的中点对齐。space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。stretch（默认值）：轴线占满整个交叉轴。 四、项目的属性以下6个属性设置在项目上。 123456orderflex-growflex-shrinkflex-basisflexalign-self 4.1 order属性123.item &#123; order: &lt;integer&gt;;&#125; 4.2 flex-grow属性flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。 123.item &#123; flex-grow: &lt;number&gt;; /默认为0/&#125; 如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。 4.3 felx-shrink属性flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。 123.item &#123; flex-shrink: &lt;number&gt; /默认为1/&#125; 如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。 4.4 flex-basis属性flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。 123.item &#123; flex-basis: &lt;length&gt; | auto; /* default auto */&#125; 它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。 4.5 flex属性flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。 123.item &#123; flex: none | [ &lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt; ]&#125; 该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。 4.6 align-self属性align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。 123.item &#123; align-self: auto | flex-start | flex-end | center | baseline | stretch;&#125; 该属性可能取6个值，除了auto，其他都与align-items属性完全一致。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CSS33D导航栏]]></title>
      <url>%2F2017%2F04%2F18%2FCSS33D%E5%AF%BC%E8%88%AA%E6%A0%8F%2F</url>
      <content type="text"><![CDATA[##CSS33D导航栏效果 如图所示 代码如下：lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;3D旋转导航栏&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;http://www.w3cplus.com/demo/css3/base.css&quot;&gt;&lt;style type=&quot;text/css&quot;&gt;/*任务一：引入本地字体文件*/@font-face&#123; font-family: &apos;sansationregular&apos;; src:url(&apos;http://www.w3cplus.com/demo/css3/3DAnimationDropdownMenu/sansation_regular-webfont.eot&apos;); src: url(&apos;http://www.w3cplus.com/demo/css3/3DAnimationDropdownMenu/sansation_regular-webfont.eot?#iefix&apos;) format(&apos;http://www.w3cplus.com/demo/css3/3DAnimationDropdownMenu/embedded-opentype&apos;), url(&apos;http://www.w3cplus.com/demo/css3/3DAnimationDropdownMenu/sansation_regular-webfont.woff&apos;) format(&apos;woff&apos;), url(&apos;http://www.w3cplus.com/demo/css3/3DAnimationDropdownMenu/sansation_regular-webfont.ttf&apos;) format(&apos;truetype&apos;), url(&apos;http://www.w3cplus.com/demo/css3/3DAnimationDropdownMenu/sansation_regular-webfont.svg#sansationregular&apos;) format(&apos;svg&apos;); font-weight: normal; font-style: normal;&#125;body &#123; background-color:#edecec;&#125;/* basic menu styles */.nav-menu &#123; display: block; background: #74adaa; width: 950px; margin: 50px auto 150px;&#125;.nav-menu li &#123; display: inline; float: left; border-right: 1px solid #94c0be;&#125;.nav-menu li:last-child &#123; border-right: none;&#125;.nav-menu li a &#123; color: #fff; display: block; text-decoration: none; /* 调用本地字体 */ font-family: &apos;sansationregular&apos;; -webkit-font-smoothing: antialiased; -moz-font-smoothing: antialiased; font-smoothing: antialiased; overflow: visible; line-height: 20px; font-size: 20px; padding: 15px 30px 15px 31px;&#125;.three-d &#123; /* 任务三、设置3D舞台布景 */ perspective:200px; -o-perspective:200px; -webkit-perspective:200px; -moz-perspective:200px; -ms-perspective:200px; /*任务四、设置3D舞台布景过渡效果*/ transition:all 0.7s linear; -o-transition:all 0.7s linear; -ms-transition:all 0.7s linear; -moz-transition:all 0.7s linear; -webkit-transition:all 0.7s linear; position: relative;&#125;.three-d:not(.active):hover &#123; cursor: pointer;&#125;/*任务五、给不是当前状态的3D舞台的悬浮与聚焦状态设置变形效果*/.three-d:not(.active):hover .three-d-box, .three-d:not(.active):focus .three-d-box &#123; transform:translateZ(-25px) rotateX(90deg); -o-transform:translateZ(-25px) rotateX(90deg); -ms-transform:translateZ(-25px) rotateX(90deg); -moz-transform:translateZ(-25px) rotateX(90deg); -webkit-transform:translateZ(-25px) rotateX(90deg);&#125;.three-d-box &#123; /*任务六、给3D舞台中“.three-d-box”设置过渡与变形效果*/ transform:translateZ(-25px); -o-transform:translateZ(-25px); -ms-transform:translateZ(-25px); -moz-transform:translateZ(-25px); -webkit-transform:translateZ(-25px); transition:all .3s ease-out; -o-transition:all .3s ease-out; -ms-transition:all .3s ease-out; -moz-transition:all .3s ease-out; -webkit-transition:all .3s ease-out; -webkit-transform-style: preserve-3d; -moz-transform-style: preserve-3d; -ms-transform-style: preserve-3d; -o-transform-style: preserve-3d; transform-style: preserve-3d; -webkit-pointer-events: none; -moz-pointer-events: none; -ms-pointer-events: none; -o-pointer-events: none; pointer-events: none; position: absolute; top: 0; left: 0; display: block; width: 100%; height: 100%;&#125;/*任务七、给导航设置3D前，与3D后变形效果*/.front &#123; transform:rotateX(0deg) translateZ(25px); -ms-transform:rotateX(0deg) translateZ(25px); -o-transform:rotateX(0deg) translateZ(25px); -moz-transform:rotateX(0deg) translateZ(25px); -webkit-transform:rotateX(0deg) translateZ(25px);&#125;.back &#123; transform:rotateX(-90deg) translateZ(25px); -ms-transform:rotateX(-90deg) translateZ(25px); -o-transform:rotateX(-90deg) translateZ(25px); -moz-transform:rotateX(-90deg) translateZ(25px); -webkit-transform:rotateX(-90deg) translateZ(25px); color: #FFE7C4;&#125;.front, .back &#123; display: block; width: 100%; height: 100%; position: absolute; top: 0; left: 0; background: #74adaa; padding: 15px 30px 15px 31px; color: white; -webkit-pointer-events: none; -moz-pointer-events: none; -ms-pointer-events: none; -o-pointer-events: none; pointer-events: none; -webkit-box-sizing: border-box; box-sizing: border-box;&#125;/*任务八、设置导航当前状态与悬浮状态下的背景效果*/.nav-menu li .active .front,.nav-menu li .active .back,.nav-menu li a:hover .front,.nav-menu li a:hover .back &#123; background-color: #51938F; background-size: 5px 5px; background-position: 0 0, 30px 30px; background-image: -webit-linear-gradient(45deg, #478480 25%, transparent 25%, transparent 75%, #478480 75%, #478480), linear-gradient(45deg, #478480 25%, transparent 25%, transparent 75%, #478480 75%, #478480); background-image: -moz-linear-gradient(45deg, #478480 25%, transparent 25%, transparent 75%, #478480 75%, #478480), linear-gradient(45deg, #478480 25%, transparent 25%, transparent 75%, #478480 75%, #478480); background-image: -ms-linear-gradient(45deg, #478480 25%, transparent 25%, transparent 75%, #478480 75%, #478480), linear-gradient(45deg, #478480 25%, transparent 25%, transparent 75%, #478480 75%, #478480); background-image: -o-linear-gradient(45deg, #478480 25%, transparent 25%, transparent 75%, #478480 75%, #478480), linear-gradient(45deg, #478480 25%, transparent 25%, transparent 75%, #478480 75%, #478480); background-image: linear-gradient(45deg, #478480 25%, transparent 25%, transparent 75%, #478480 75%, #478480), linear-gradient(45deg, #478480 25%, transparent 25%, transparent 75%, #478480 75%, #478480); /*background-image: -webkit-linear-gradient(45deg,#434238 25%,transparent 25%,transparent 75%,#434238 75%,#434238),-ms-linear-gradient(45deg,#434238 25%,transparent 25%,transparent 75%,#434238 75%,#434238),-moz-linear-gradient(45deg,#434238 25%,transparent 25%,transparent 75%,#434238 75%,#434238),-o-linear-gradient(45deg,#434238 25%,transparent 25%,transparent 75%,#434238 75%,#434238),linear-gradient(45deg,#434238 25%,transparent 25%,transparent 75%,#434238 75%,#434238);*/&#125;.nav-menu ul &#123; position: absolute; text-align: left; line-height: 40px; font-size: 14px; width: 200px; -webkit-transition: all 0.3s ease-in; -moz-transition: all 0.3s ease-in; -ms-transition: all 0.3s ease-in; -o-transition: all 0.3s ease-in; transition: all 0.3s ease-in; -webkit-transform-origin: 0px 0px; -moz-transform-origin: 0px 0px; -ms-transform-origin: 0px 0px; -o-transform-origin: 0px 0px; transform-origin: 0px 0px; -webkit-transform: rotateX(-90deg); -moz-transform: rotateX(-90deg); -ms-transform: rotateX(-90deg); -o-transform: rotateX(-90deg); transform: rotateX(-90deg); -webkit-backface-visibility: hidden; -moz-backface-visibility: hidden; -ms-backface-visibility: hidden; -o-backface-visibility: hidden; backface-visibility: hidden;&#125;/*任务九、显示下拉导航菜单，并其设置一个变形效果*/.nav-menu &gt; li:hover ul &#123; display: block; -webkit-transform: rotateX(0deg); -moz-transform: rotateX(0deg); -ms-transform: rotateX(0deg); -o-transform: rotateX(0deg); transform: rotateX(0deg); &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;nav&quot;&gt; &lt;ul class=&quot;nav-menu clearfix unstyled&quot;&gt; &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;three-d active&quot;&gt; Home &lt;span class=&quot;three-d-box&quot;&gt;&lt;span class=&quot;front&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;back&quot;&gt;Home&lt;/span&gt;&lt;/span&gt; &lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;three-d&quot;&gt; Services &lt;span class=&quot;three-d-box&quot;&gt;&lt;span class=&quot;front&quot;&gt;Services&lt;/span&gt;&lt;span class=&quot;back&quot;&gt;Services&lt;/span&gt;&lt;/span&gt; &lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;three-d&quot;&gt; Products &lt;span class=&quot;three-d-box&quot;&gt;&lt;span class=&quot;front&quot;&gt;Products&lt;/span&gt;&lt;span class=&quot;back&quot;&gt;Products&lt;/span&gt;&lt;/span&gt; &lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;three-d&quot;&gt; About &lt;span class=&quot;three-d-box&quot;&gt;&lt;span class=&quot;front&quot;&gt;About&lt;/span&gt;&lt;span class=&quot;back&quot;&gt;About&lt;/span&gt;&lt;/span&gt; &lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;three-d&quot;&gt; Contact &lt;span class=&quot;three-d-box&quot;&gt;&lt;span class=&quot;front&quot;&gt;Contact&lt;/span&gt;&lt;span class=&quot;back&quot;&gt;Contact&lt;/span&gt;&lt;/span&gt; &lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;three-d&quot;&gt; Blog &lt;span class=&quot;three-d-box&quot;&gt;&lt;span class=&quot;front&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;back&quot;&gt;Blog&lt;/span&gt;&lt;/span&gt;&lt;/a&gt; &lt;ul class=&quot;clearfix unstyled drop-menu&quot;&gt; &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;three-d&quot;&gt; Html5 &lt;span class=&quot;three-d-box&quot;&gt;&lt;span class=&quot;front&quot;&gt;Html5&lt;/span&gt;&lt;span class=&quot;back&quot;&gt;Html5&lt;/span&gt;&lt;/span&gt; &lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;three-d&quot;&gt; Css3 &lt;span class=&quot;three-d-box&quot;&gt;&lt;span class=&quot;front&quot;&gt;Css3&lt;/span&gt;&lt;span class=&quot;back&quot;&gt;Css3&lt;/span&gt;&lt;/span&gt; &lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;three-d&quot;&gt; JavaScript &lt;span class=&quot;three-d-box&quot;&gt;&lt;span class=&quot;front&quot;&gt;JavaScript&lt;/span&gt;&lt;span class=&quot;back&quot;&gt;JavaScript&lt;/span&gt;&lt;/span&gt; &lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;three-d&quot;&gt; Videogames &lt;span class=&quot;three-d-box&quot;&gt;&lt;span class=&quot;front&quot;&gt;Videogames&lt;/span&gt;&lt;span class=&quot;back&quot;&gt;Videogames&lt;/span&gt;&lt;/span&gt; &lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;three-d&quot;&gt; Shop On-line &lt;span class=&quot;three-d-box&quot;&gt;&lt;span class=&quot;front&quot;&gt;Shop On-line&lt;/span&gt;&lt;span class=&quot;back&quot;&gt;Shop On-line&lt;/span&gt;&lt;/span&gt; &lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CSS3动画]]></title>
      <url>%2F2017%2F04%2F18%2FCSS3%E5%8A%A8%E7%94%BB%2F</url>
      <content type="text"><![CDATA[CSS3变形– 旋转rotate()旋转rotate()函数通过指定的角度参数使元素相对原点进行旋转。它主要在二维空间内进行操作，设置一个角度值，用来指定旋转的幅度。如果这个值为正值，元素相对原点中心顺时针旋转；如果这个值为负值，元素相对原点中心逆时针旋转。 CSS3的变形–扭曲skew()CSS3中的变形–扭曲 skew()扭曲skew()函数能够让元素倾斜显示。它可以将一个对象以其中心位置围绕着X轴和Y轴按照一定的角度倾斜。这与rotate()函数的旋转不同，rotate()函数只是旋转，而不会改变元素的形状。skew()函数不会旋转，而只会改变元素的形状。 Skew()具有三种情况： 1、skew(x,y)使元素在水平和垂直方向同时扭曲（X轴和Y轴同时按一定的角度值进行扭曲变形）； 第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则值为0，也就是Y轴方向上无斜切。 2、skewX(x)仅使元素在水平方向扭曲变形（X轴扭曲变形）； 3、skewY(y)仅使元素在垂直方向扭曲变形（Y轴扭曲变形） 示例演示： 通过skew（）函数将长方形变成平行四边形。 123456789101112131415161718192021222324HTML代码：&lt;div class=&quot;wrapper&quot;&gt; &lt;div&gt;我变成平形四边形&lt;/div&gt;&lt;/div&gt;CSS代码：.wrapper &#123; width: 300px; height: 100px; border: 2px dotted red; margin: 30px auto;&#125;.wrapper div &#123; width: 300px; height: 100px; line-height: 100px; text-align: center; color: #fff; background: orange; -webkit-transform: skew(45deg); -moz-transform:skew(45deg) transform:skew(45deg);&#125; CSS3中的变形–缩放 scale()缩放 scale()函数 让元素根据中心原点对对象进行缩放。 缩放 scale 具有三种情况： 1、 scale(X,Y)使元素水平方向和垂直方向同时缩放（也就是X轴和Y轴同时缩放） 例如： div:hover { -webkit-transform: scale(1.5,0.5); -moz-transform:scale(1.5,0.5) transform: scale(1.5,0.5);}注意：Y是一个可选参数，如果没有设置Y值，则表示X，Y两个方向的缩放倍数是一样的。 2、scaleX(x)元素仅水平方向缩放（X轴缩放） 3、scaleY(y)元素仅垂直方向缩放（Y轴缩放） HTML代码： 我将放大1.5倍CSS代码： .wrapper { width: 200px; height: 200px; border:2px dashed red; margin: 100px auto;}.wrapper div { width: 200px; height: 200px; line-height: 200px; background: orange; text-align: center; color: #fff;}.wrapper div:hover { opacity: .5; -webkit-transform: scale(1.5); -moz-transform:scale(1.5) transform: scale(1.5);}演示结果 注意： scale()的取值默认的值为1，当值设置为0.01到0.99之间的任何值，作用使一个元素缩小；而任何大于或等于1.01的值，作用是让元素放大。 CSS3中的变形–位移 translate()translate()函数可以将元素向指定的方向移动，类似于position中的relative，或以简单的理解为，使用translate()函数，可以把元素从原来的位置移动，而不影响在X、Y轴的任何Web组件。translate我们分为三种情况1.translate(x,y)水平方向和垂直方向同时移动（也就是X轴和Y轴同时移动）2.translateX(x)仅水平方向移动(X轴移动)3.translateY(y)仅垂直方向移动(Y轴移动) CSS3的变形–矩阵 matrix()matrix() 是一个含六个值的(a,b,c,d,e,f)变换矩阵，用来指定一个2D变换，相当于直接应用一个[a b c d e f]变换矩阵。就是基于水平方向（X轴）和垂直方向（Y轴）重新定位元素,此属性值使用涉及到数学中的矩阵，我在这里只是简单的说一下CSS3中的transform有这么一个属性值，如果需要深入了解，需要对数学矩阵有一定的知识。 1234567891011121314151617181920HTML代码：&lt;div class=&quot;wrapper&quot;&gt; &lt;div&gt;&lt;/div&gt;&lt;/div&gt;CSS代码：.wrapper &#123; width: 300px; height: 200px; border: 2px dotted red; margin: 40px auto;&#125;.wrapper div &#123; width:300px; height: 200px; background: orange; -webkit-transform: matrix(1,0,0,1,50,50); -moz-transform:matrix(1,0,0,1,50,50); transform: matrix(1,0,0,1,50,50);&#125; CSS3中的变形–原点 transform-origin任何一个元素都有一个中心点，默认情况之下，其中心点是居于元素X轴和Y轴的50%处。在没有重置transform-origin改变元素原点位置的情况下，CSS变形进行的旋转、位移、缩放，扭曲等操作都是以元素自己中心位置进行变形。但很多时候，我们可以通过transform-origin来对元素进行原点位置改变，使元素原点不在元素的中心位置，以达到需要的原点位置。 CSS3中的动画–过渡属性 transition-property早期在Web中要实现动画效果，都是依赖于JavaScript或Flash来完成。但在CSS3中新增加了一个新的模块transition，它可以通过一些简单的CSS事件来触发元素的外观变化，让效果显得更加细腻。简单点说，就是通过鼠标的单击、获得焦点，被点击或对元素任何改变中触发，并平滑地以动画效果改变CSS的属性值。 1234在CSS中创建简单的过渡效果可以从以下几个步骤来实现第一，在默认样式中声明元素的初始状态样式；第二，声明过渡元素最终状态样式，比如悬浮状态；第三，在默认样式中通过添加过渡函数，添加一些不同的样式 CSS3的过渡transition属性是一个复合属性，主要包括以下几个子属性。 1transition-proerty:指定过渡或动态模拟的CSS属性 1transition-duration:指定完成过渡所需的时间 1trasition-timing-function:指定过渡的函数 1transition-delay:指定开始出现的延迟时间 transition-property属性用来指定过渡动画的CSS属性名称，而这个过渡只有具备一个中值点的属性才能具备动画效果，其对应具有过渡的CSS属性主要有: 1234567891011121314html:&lt;div&gt;&lt;/div&gt;css div &#123; width:200px; height:200px; background-color: red; margin: 20px auto; -webkit-transition:background-color 0.5s ease 0.1s; transition:background-color 0.5s ease 0.1s;&#125;div:hover &#123; background-color: orange;&#125; CSS3中的动画–过渡时间 transition-durationtransition-duration 属性主要用来设置一个属性过渡到另一个属性所需的时间，也就是从旧属性过渡到新属性花费的时间，俗称持续时间。例子：在鼠标悬停状态下，同容器从直角慢慢过渡到圆角，并让整个动画持续0.5s。 1234567891011121314151617181920html代码：&lt;div&gt;&lt;/div&gt;css代码：div &#123; width: 300px; height: 200px; background-color: orange; margin: 20px auto; -webkit-transition-proerty: -wekit-border-radius; transition-property: border-radius; -webkit-transition-duration: 0.5s; transition-duration: 0.5s; -webkit-transition-timing-function: ease-out; -webkit-transition-delay: 0.2s; transition-delay: 0.2s;&#125;div:hover &#123; border-radius: 20px;&#125; CSS3的动画–过渡函数 transition-timing-functiontransition-timing-function属性指的是过渡的“缓动函数”，主要用来指定浏览器的过渡速度，以及过渡期间的操作进展情况，其中要包括以下几种函数。 CSS3的动画–过渡函数 transition-delaytransition-delay属性和transition-duration属性极其类似，不同的是transition-duration是用来设置过渡动画的持续时间，而transition-delay主要用来指定一个动画开始执行的时间，也就是说当改变元素属性值后多长时间开始执行。 有时我们想改变两个或者多个css属性的transition效果时，只要把几个transition的声明串在一起，用逗号（“，”）隔开，然后各自可以有各自不同的延续时间和其时间的速率变换方式。但需要值得注意的一点：第一个时间的值为 transition-duration，第二个为transition-delay。 例如：a{ transition: background 0.8s ease-in 0.3,color 0.6s ease-out 0.3;} CSS3 Keyframes 介绍keyframes被称为关键帧，其类似于Flash中的关键帧。在CSS3中其主要以”@keyframes”开头，后面紧跟着是动画名称加上一对花括号”{…}”,括号中就是一些不同时间段样式规则。 12345678@keyframes changecolor &#123; 0%&#123; background: red; &#125; 100% &#123; background: green; &#125;&#125; 在一个”@keyframes”的样式规则可以由多个百分比构成的，如在”0%”到”100%”之间创建更多个百分比，分别给每个百分比中给要有动画效果的元素加上不同的样式，从而达到一种不断变化的效果。经验与技巧：在@keyframes中定义动画名称时，其中0%和100%还可以使用关键词from和to来代表，其中0%对应的是from,10%对应的是to Chrome 和 Safari 需要前缀 -webkit-；Foxfire 需要前缀 -moz-。 案列演示通过@keyframes声明一个叫”wobble”动画，从”0%”开始到”100%”结束，同时还经历了一个”40%”和”60%”的两个过程，”wobble”动画在”0%”时元素定位到left100px,背景色为green,然后在”40%”时元素过渡到left位150px,背景色为orange,然后在”60%”时元素过渡到left为150px,背景色为blue,最后”100%”时结束动画，元素又回到起点left为100px处，背景色为red HTML: 1&lt;div&gt;鼠标放到我身上&lt;/div&gt; 12345678910111213141516171819202122232425262728css代码@keyframes wobble &#123; 0% &#123; margin-left: 100px; background: green; &#125; 40% &#123; margin-left:150px; background:orange; &#125; 60% &#123; margin-left: 75px; background: blue; &#125; 100% &#123; margin-left: 100px; background:red; &#125;&#125;div &#123; width:100px; height:100px; background:red; color:#fff;&#125;div &#123; animation: wobble 5s ease 0.1s;&#125; CSS3中调用动画animation-name属性主要是用来调用 @keyframes 定义好的动画。需要特别注意: animation-name 调用的动画名需要和“@keyframes”定义的动画名称完全一致（区分大小写），如果不一致将不具有任何动画效果。 语法： 1animation-name: none | IDENT[,none|DENT]*; 1、IDENT是由 @keyframes 创建的动画名，上面已经讲过了（animation-name 调用的动画名需要和“@keyframes”定义的动画名称完全一致）； 2、none为默认值，当值为 none 时，将没有任何动画效果,这可以用于覆盖任何动画。 注意：需要在 Chrome 和 Safari 上面的基础上加上-webkit-前缀，Firefox加上-moz-。 CSS3设置动画播放时间animation-duration主要用来设置CSS3动画播放时间，其使用方法和transition-duration类似，是用来指定元素播放动画所持续的时间长，也就是完成从0%到100%一次动画所需时间，单位：S秒语法规则 1animation-duration: &lt;time&gt;[,&lt;time&gt;]* 取值为数值，单位为秒，其默认值为“0”，这意味着动画周期为“0”，也就是没有动画效果（如果值为负值会被视为“0”）。 案列演示制作一个矩形变成圆形的动画，整个动画持续了10秒钟 12html&lt;div&gt;Hover Me&lt;/div&gt; css: 1234567891011121314151617181920212223@keyframes toradius&#123; from &#123; border-radius: 0; &#125; to &#123; border-radius: 100%; &#125;&#125;div &#123; width: 200px; height: 200px; line-height: 200px; text-align: center; color: #fff; background: green; margin: 20px auto;&#125;div:hover &#123; animation-name: toradius; animation-duration: 10s; animation-timing-function: ease-in-out; animation-delay: .1s;&#125; CSS3设置动画播放方式animation-timing-function属性主要用来设置动画播放方式主要让元素根据时间的推进来改变属性值的变换速率，简单点说就是动画的播放方式。 1animation-timing-function:ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;) [, ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;)]* CSS3设置动画开始播放的时间animation-delay属性用来定义动画开始播放的时间，用来触发动画播放的时间点，和transition-delay属性一样，用于定义在浏览器开始执行动画之前等待的时间。语法规则： 1animation-delay: &lt;time&gt; ###CSS3中设置动画播放次数animation-iteration-count属性主要用来定义动画的播放次数。语法规则: 1animation-iteration-count: infinite | &lt;number&gt; [,infinite | &lt;number&gt;]* 1.其值通常为整数，但也可以用带有小数的数字，其默认值为1，这意味着动画将从开始到结束只播放一次。2.如果取值为infinite,动画将会无限次的播放。例子：通过animation-iteration-count属性让动画move只播放5次，代码设置为 1animation-iteration-count: 5; CSS3设置动画播放方向animation-direction属性主要用来设置动画播放方向，其语法规则如下 1animation-direction:normal | alternate [,normal| alternate]* 主要有两个值:normal、alternate1.normal是默认值，如果设置为normal时，动画的每次循环都是向前播放。2.第一个值alternate,它的作用是，动画播放在第偶数次向前播放，第奇数次向反方向播放。例如：通过animation-direction属性，将move动画播放动画方向设置为alternate,代码为: 1animation-direction: alternate; CSS3设置动画的播放状态animation-play-state 属性主要用来控制动画的播放状态。参数:其主要有两个值:running和paused,其中running是其默认值，主要作用就是类似于音乐播放器一样，可以通过paused将正在播放的动画停下来，也可以通过running将暂停的动画重新播放，这里的重新播放不一定是从元素动画的开始播放，而是从暂停的那个位置开始播放，另外如果暂停了动画的播放，元素的样式将回到最原始设置状态。例如,页面加载时，动画不播放。代码如下: 1animation-play-state: paused; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152css代码@keyframes move &#123; 0%&#123; transform: translateY(90px); &#125; 15%&#123; transform: translate(90px,90px); &#125; 30%&#123; transform: translate(180px,90px); &#125; 45%&#123; transform: translate(90px,90px); &#125; 60%&#123; transform: translate(90px,0); &#125; 75%&#123; transform: translate(90px,90px); &#125; 90%&#123; transform: translate(90px,180px); &#125; 100%&#123; transform: translate(90px,90px); &#125;&#125;div &#123; width: 200px; height: 200px; border: 1px solid red; margin: 20px auto;&#125;span &#123; display: inline-block; width: 20px; height: 20px; background: orange; transform: translateY(90px); animation-name: move; animation-duration: 10s; animation-timing-function: ease-in; animation-delay: .2s; animation-iteration-count:infinite; animation-direction:alternate; animation-play-state:paused;&#125;div:hover span &#123; animation-play-state:running;&#125; CSS3多列布局-Columns为了能在Web页面中方便实现类似报纸、杂志那种多列排版的布局，CSS3多列布局，语法： 1columns：&lt;column-width&gt; || &lt;column-count&gt; 多列布局columns属性参数主要就两个属性参数：列宽和列数。 主要用来定义多列中每列的宽度 主要用来定义多列中的列数 举例：要显示2栏显示，每栏宽度为200px，代码为： columns: 200px 2; CSS3 列间距column-gapcolumn-gap主要用来设置列与列之间的间距，其语法规则如下 1column-gap: normal || &lt;length&gt; CSS3 列表边框column-rule语法规则 1column-rule:&lt;column-rule-width&gt;|&lt;column-rule-style&gt;|&lt;column-rule-color&gt; 例如：为了能有效区分栏目列之间的关系，可以为其设置一个列边框，代码为： column-rule: 2px dotted green; CSS3 跨列设置column-spancolumn-span主要用来定义一个分列元素中的子元素能跨列多少。column-width、column-count等属性能让一元素分成多列，不管里面元素如何排放顺序，他们都是从左向右的放置内容，但有时我们需要基中一段内容或一个标题不进行分列，也就是横跨所有列，此时column-span就可以轻松实现，此属性的语法如下。 column-span: none | all取值说明 属性值 属性值说明 none 此值为column-span的默认值，表示不跨越任何列。 all 这个值跟none值刚好相反，表示的是元素跨越所有列，并定位在列的Ｚ轴之上。 例如：将第一个标题跨越所有列，代码： 1column-span:all;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[css3 基础]]></title>
      <url>%2F2017%2F04%2F17%2Fcss3%2F</url>
      <content type="text"><![CDATA[box-shadow阴影类型：此参数可选。如不设值，默认投影方式是外阴影；如取其唯一值“inset”，其投影为内阴影； X-offset:阴影水平偏移量，其值可以是正负值。如果值为正值，则阴影在对象的右边，其值为负值时，阴影在对象的左边； Y-offset:阴影垂直偏移量，其值也可以是正负值。如果为正值，阴影在对象的底部，其值为负值时，阴影在对象的顶部； 阴影模糊半径：此参数可选，，但其值只能是为正值，如果其值为0时，表示阴影不具有模糊效果，其值越大阴影的边缘就越模糊； 阴影扩展半径：此参数可选，其值可以是正负值，如果值为正，则整个阴影都延展扩大，反之值为负值时，则缩小； 阴影颜色：此参数可选。如不设定颜色，浏览器会取默认色，但各浏览器默认取色不一致，特别是在webkit内核下的safari和chrome浏览器下表现为透明色，在Firefox/Opera下表现为黑色（已验证），建议不要省略此参数。 CSS3 线性渐变1linegar-gradient (to bottom,#fff,#999); CSS3 text-shadowtext-overflow 用来设置是否使用一个省略标记(…)标示对象内文本的溢出。text-overflow:clip 标示剪切 | ellipsis 标示省略 但是text-overflow只是用来说明文字溢出时用什么方式显示，要实现溢出时产生省略号的效果，还须定义强制文本在一行内显示(white-space:nowrap)及溢出内容为隐藏(overflow:hidden)，只有这样才能实现溢出文本显示省略号的效果，代码如下 123text-overflow:ellipsis;overflow:hidden;white-space:nowrap;​ 同时word-wrap也可以用来设置文本行为，当前行超过指定容器的边界时是否断开转行。语法: 1world-wrap:normal表示控制连续文本换行 | break-word 表示内容将在边界内换行 CSS3文字与字体 嵌入字体font-face@font-face能够加载服务器端的字体文件，让浏览器可以显示用户电脑里没有安装的字体 1234@font-face &#123; font-family: 字体名称; src : 字体文件在服务器上的相对或绝对路径&#125; 比如 12345p&#123; font-face : 12px; font-family: &quot;My Font&quot;; /*必须项，设置@font-face中font-family同样的值*/&#125; CSS3 文字与字体 文本阴影text-shadowtext-shadow 可以用来设置文本的阴影效果 语法： 1text-shadow: X-Offset Y-offset blur color; X-offset：表示阴影的水平偏移距离Y-offset: 表示阴影的垂直偏移距离Blur: 是指阴影的模糊程度，其值不能是负值，如果值越大，阴影越模糊，反之阴影越清晰，如果不需要阴影模糊可以将Blur值设置为0;color: 是指阴影的颜色，其可以使用 rgba色，比如，我们可以用下面代码设置阴影效果。text-shadow: 0 1px 1px #fff; css3背景 background-origin设置元素背景图片的原始起始位置。语法： 1background-origin : border-box | padding-box | content-box; 参数分别表示背景图片是从边框还是内边框(默认值)，或者是内容区域开始显示。 css3背景 background-clip 图片剪切css3背景 background-size设置背景图片的大小，以长度值或百分比显示，还可以通过cover和contain来对图片进行伸缩语法： 1background-size: auto |&lt;长度值&gt; |&lt;百分比&gt;|cover | contain 1.auto: 默认值，不改变背景图片的原始高度和宽度 &lt;长度值&gt; : 成对出现如200px 50px 将背景图片宽高依次设置为前面两个值，当设置一个值时，将其作为图片宽度值来等比缩放； &lt;百分比&gt; 0%~100%之间的任何值，将背景图片一次设置为所在元素宽高乘以前面百分比得出的数值，当设置一个值时，同上， cover：覆盖，即将背景图片等比缩放至某一变紧贴容易边缘为止 contain: 容纳，即将背景图片等比缩放某一边，紧贴容器边缘为止。css3多重背景 12background:url(http://static.mukewang.com/static/img/logo_index.png) no-repeat 0 0 / 75% 55%, url(http://static.mukewang.com/static/img/logo_index.png) no-repeat right bottom / 50% 40%; css3实现立体导航栏效果代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;导航栏&lt;/title&gt;&lt;style type=&quot;text/css&quot;&gt; body &#123; background: #ebebeb; &#125; .nav &#123; width: 560px; height: 50px; line-height: 50px; font-weight: bold; margin: 40px auto 0; font-family: Arial; background: #f65f57; border-radius: 5px; box-shadow: 0 3px 5px #666; &#125; .nav li &#123; position: relative; display: inline-block; list-style: none; font-size: 13px; text-shadow: 1px 2px 4px rgba(0,0,0,0.5); list-style: none outside none; padding: 0 16px; &#125; .nav a &#123; display: inline-block; -webkit-transition: all 0.2s ease-in; -moz-transition: all 0.2s ease-in; -o-transition: all 0.2s ease-in; -ms-transition: all 0.2s ease-in; transition: all 0.2s ease-in; &#125; .nav a:hover &#123; -webkit-transform:rotate(20deg); -ms-transform:rotate(20deg); -o-transform:rotate(20deg); -moz-transform:rotate(20deg); transform:rotate(20deg); &#125;/* 使用伪元素制作导航列表分割线*/ .nav li:before &#123; content: &quot;&quot;; color: #666; position: absolute; height: 20px; width: 1px; top: 15px; left: -1px; background-image: linear-gradient(to right, #f65f57,#993333,#f65f57); &#125;/*删除第一项和最后一项当行分割线*/ .nav li:first-child::before &#123; background-image: none; &#125;.nav a, .nav a:hover &#123; color: #fff; text-decoration: none;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;ul class=&quot;nav&quot;&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;About Me&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;Protfolio&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;Blog&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;Contact Me&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; CSS3选择器 属性选择器在HTML中，通过各种各样的属性可以给元素增加很多附加的信息。例如，通过，ID属性可以将不同div元素进行区分。实例展示 12345678910111213141516171819html代码:&lt;a href=&quot;xxx.pdf&quot;&gt;我链接的是PDF文件&lt;/a&gt;&lt;a href=&quot;#&quot; class=&quot;icon&quot;&gt;我类名是icon&lt;/a&gt;&lt;a href=&quot;#“ title=”我的title是more“&gt;我的title是more&lt;/a&gt;css代码a[class^=icon] &#123; background: green; color:#fff;&#125;a[href$=pdf] &#123; background: orange; color:#fff;&#125;a[title*=more] &#123; background: blue; color: #fff;&#125; CSS3结构伪类选择器 - notdiv:not([id=”footer”]){ background-color: orange;} CSS3 结构性伪类选择器—nth-child(n)“:nth-child(n)”选择器用来定位某个父元素的一个或多个特定的子元素。其中“n”是其参数，而且可以是整数值(1,2,3,4)，也可以是表达式(2n+1、-n+5)和关键词(odd、even)，但参数n的起始值始终是1，而不是0。也就是说，参数n的值为0时，选择器将选择不到任何匹配的元素。 CSS3 结构性伪类选择器—nth-last-child(n)“:nth-last-child(n)”选择器和前面的“:nth-child(n)”选择器非常的相似，只是这里多了一个“last”，所起的作用和“:nth-child(n)”选择器有所区别，从某父元素的最后一个子元素开始计算，来选择特定的元素。 CSS3 first-of-type选择器“:first-of-type”选择器类似于“:first-child”选择器，不同之处就是指定了元素的类型,其主要用来定位一个父元素下的某个类型的第一个子元素。 CSS3 nth-of-type(n)选择器“:nth-of-type(n)”选择器和“:nth-child(n)”选择器非常类似，不同的是它只计算父元素中指定的某种类型的子元素。当某个元素中的子元素不单单是同一种类型的子元素时，使用“:nth-of-type(n)”选择器来定位于父元素中某种类型的子元素是非常方便和有用的。在“:nth-of-type(n)”选择器中的“n”和“:nth-child(n)”选择器中的“n”参数也一样，可以是具体的整数，也可以是表达式，还可以是关键词。 CSS3 only-child选择器“:only-child”选择器选择的是父元素中只有一个子元素，而且只有唯一的一个子元素。也就是说，匹配的元素的父元素中仅有一个子元素，而且是一个唯一的子元素。 CSS3 only-of-type选择器“:only-of-type”选择器用来选择一个元素是它的父元素的唯一一个相同类型的子元素。这样说或许不太好理解，换一种说法。“:only-of-type”是表示一个元素他有很多个子元素，而其中只有一种类型的子元素是唯一的，使用“:only-of-type”选择器就可以选中这个元素中的唯一一个类型子元素。 CSS3选择器下CSS3选择器 :enabled选择器在Web的表单中，有些表单元素有可用（“:enabled”）和不可用（“:disabled”）状态，比如输入框，密码框，复选框等。在默认情况之下，这些表单元素都处在可用状态。那么我们可以通过伪选择器“:enabled”对这些表单元素设置样式。 示例演示 通过“:enabled”选择器，修改文本输入框的边框为2像素的红色边框，并设置它的背景为灰色。 ::selectionCSS3选择器 ::selection选择器“::selection”伪元素是用来匹配突出显示的文本(用鼠标选择文本时的文本)。浏览器默认情况下，用鼠标选择网页文本是以“深蓝的背景，白色的字体”显示的，效果如下图所示： 从上图中可以看出，用鼠标选中“专注IT、互联网技术”、“纯干货、学以致用”、“没错、这是免费的”这三行文本中，默认显示样式为：蓝色背景、白色文本。 有的时候设计要求,不使用上图那种浏览器默认的突出文本效果，需要一个与众不同的效果，此时“::selection”伪元素就非常的实用。不过在Firefox浏览器还需要添加前缀。 CSS3选择器 :read-only选择器“:read-only”伪类选择器用来指定处于只读状态元素的样式。简单点理解就是，元素中设置了“readonly=’readonly’” CSS3选择器 :read-write选择器“:read-write”选择器刚好与“:read-only”选择器相反，主要用来指定当元素处于非只读状态时的样式。 css3选择器 ::before 和 ::after:before和::after这两个主要用来给元素的前面或后面插入内容，这两个常和”content”配合使用，使用的场景最多的就是清除浮动。 123456789.clearfix::before,.clearfix::after &#123; content: &quot;.&quot;; display: block; height: 0; visibility: hidden;&#125;.clearfix:after &#123;clear: both;&#125;.clearfix &#123;zoom: 1;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[git分支]]></title>
      <url>%2F2017%2F03%2F07%2Fgit%E5%88%86%E6%94%AF%2F</url>
      <content type="text"><![CDATA[几乎所有的版本控制系统都以某种形式支持分支。使用分支的目的是你可以把你的工作从开发主线上奋力开来，以免影响主线。分支的主要内容是我从廖老师的git教程总结的。 1.创建分支与合并分支在工作中，可能会遇到开发网站时，为了实现某个新的需求，创建一个分支，在这个分支上展开工作。正在此时，你同事遇到问题，需要修补，你需要马上切换到你的线上分支，为这个紧急任务新建一个分支，并在其中修复它，在通过测试后，切换回到线上分支，然后合并这个修补分支，最后将改动推送到线上分支，切换到你最初的分支上，继续工作。 1234￥git checkout -b iss53Switched to a new branch &quot;iss53&quot;等价于 $git branch iss53 创建一个分支 $git checkout iss53 切换到iss53分支 你继续在#53问题上工作，并且做了一些提交，在此过程中，iss53分支在不断地推进，因为你已经检出到该分支(也就是说，你的HEAD指针指向了 iss53分支) 然后，用git branch 命令查看当前分支： 123$git branch*iss53 master git branch 命令会列出所有的分支，当前分支会标一个*号。然后我们呢就可以在iss53上分支上正常提交，比如对readme.txt做个修改，然后提交： 1234$git add readme.txt$git commit -m&quot;branch test&quot;[isss53 fec145a] branch test 1 file changed, 1 insetion(+) 现在，iss53分支的工作完成，我们就可以切换到master分支： 12$git checkout masterSwitched to branch &apos;master&apos; 切换到master分支后，再查看到readme.txt 文件。发现刚才的内容不见了！因为那个提交实在dev上，而master分支在此刻的提交点并没有变，是因为我们没有合并。 12345$git merge iss53Updating d17efd8 ..fec145a Fast-ward readme.txt | 1+ 1 file changed, 1 insertion(+) git merge命令用于合并指定分支到当前分支。合并后，再查看readme.txt内容就可以看到，和iss53分支的最新提交是一样的。Fast-ward信息，是指这次合并模式是”快进模式”，也就是直接把master指向iss53的当前提交，所以合并速度非常快。当然也不是每次合并都能fast-ward合并完成后，就可以放心删除iss53分支： 1$git branch -d iss53 删除后就只剩下master分支了 12$git branch*master 应为创建、合并和删除分支很快，一般都是使用分支完成任务后，先合并再删除分支。 2.解决分支冲突有时会出现合并失败比如创建了一个新的分支 feature分支，在新的分支上开发 12$git checkout -b feature1Switched to a new branch &apos;feature1&apos; 在分支上修改了某些文件，在feature1分支上准备提交 1234$git add readme.txt$git commit -m&quot; AND simple&quot;[feature1 75a857c] AND simple 1 file changed, 1 insertion(+), 1 deletion(-) 切换到master分支： 123$git checkout masterSwitched to branch &apos;master&apos;Your branch is ahead of &apos;origin/master&apos; by 1 commit. Git还会自动提示我们当前master分支比远程分支要超前一个提交。在master分支上把readme.txt 文件的最后一行进行修改 1234$git add readme.txt$git commit -m &quot;&amp; simple&quot;[master 400b400] &amp;simple 1 file changed, 1 insertion(+), 1 deletion(-) 现在，master分支和feature1分支各自都有了新的提交，这样，Git无法执行”快速合并’，只能试图把各自修改合并起来，但是这种合并就会有冲突 1234$git merge feature1Auto-merging readme.txtCONFLICT (content): Merge conflict in readme.txtAutomatic merge failed; fix conflicts and then commit the result. 出现了失败，说明有冲突，必须手动解决冲突再提交，git status会告诉我们冲突的文件。当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。用git log –graph命令可以看到分支合并图。 3.分支管理策略通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢到分支信息。如果要强制禁用Fast-ward模式，Git就会merge时生成一个新的commit,这样，从分支历史上就可以看出分支信息。使用 –no-ff 方式的merge 12$git checkout -b devSwitched to a new branch &apos;dev&apos; 修改readme.txt文件，并提交一个新的commit现在，我们切换到master: 12$git checkout masterSwitched to branch &apos;master&apos; 准备合并dev分支，注意 –no-ff 参数，表示禁用Fast-forward： 1234$git merge --no-ff -m&quot;merge with no-ff&quot; devMerge made by the &apos;recursive&apos; strategy. readme.txt | 1+ 1 file changed, 1 insertion(+) 因为本次合并要创建一个新的commit，所以加上 -m参数,描述提交的东西，快速何必，不会看到历史记录。 4.分支策略在实际开发中，我们应该按照几个基本原则进行分支管理： 首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活； 那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本； 你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。 5.多人协作当你从远程仓库克隆时，实际Git自动把本地的master分支和远程的master分支对应起来了,并且，github远程仓库的默认名称是 origin.查看远程仓库信息，用git remote 1$git remote origin 或者用git remote -v 123$git remote -vorigin git@github.com:wanqing19954/learn.git (fetch)origin git@github.com:wanqing19954/learn.git (push) 上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址 推送分支推送分支，就是把该分支上的所有本地提交推送到远程仓库。推送时，要指定本地分支，Git就会把该分支推送到远程库对应的远程分支上： 1$git push origin master 如果要推送其他分支，例如dev,就直接 1$git push origin dev 但是，并不是一定要把分支往远程推送，那么哪些分支需要推送，哪些不需要呢？]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[git常用操作及总结]]></title>
      <url>%2F2017%2F03%2F06%2Fgit%E6%95%99%E7%A8%8B%2F</url>
      <content type="text"><![CDATA[如果你已经安装了git的话，主要内容告诉你在使用Git完成各种工作中将使用的各种命令。如果你看完了主要内容，应该就能配置初始化一个仓库(repository)、开始或停止跟踪(track)文件和文件模式、如何迅速而简单地撤销错误操作、如何浏览你的项目的历史版本以及不同提交(commits)间的差异、如何向你的远程仓库推送(commit)、以及如何从你的远程仓库拉取(pull)文件。 一.获取git仓库 有两种取得Git项目仓库的方法。第一种是在现有项目或目录下导入所有文件到Git中；第二中是从一个服务器或者github克隆一个现有的Git仓库。 1.在你新建的文件夹来建一个新的仓库如果你打算使用Git来对现有的项目进行管理，你只需要进入该项目所在的文件夹并且输入 12cd learn 进入你新建文件夹中git init 建立一个新的仓库 如果你在一个已经存在文件的文件夹里建立了一个新仓库，你应该开始跟踪这些文件并提交。 你可通过 git add 命令来实现对指定文件的跟踪，然后执行 git commit 提交： 123$ git add .$ git add work$ git commit -m&quot; new version&quot; 一般，刚建立的文件夹，仓库都是新的。不需要上面的那些命令 2.克隆你以前的仓库或者别人的仓库 如果你想获得一份已经存在的Git仓库的话，比如，你想为某个开源项目贡献自己的一份力，这时就要用到git clone命令。git克隆的是Git仓库服务器上的几乎所有数据。而不是仅仅赋值完成你的工作所需要文件。当你执行git clone命令的时候，默认配置下远程仓库中的每一个文件的每一个版本都将被拉去下来。可以用下面的命令 1$ git clone http://github.com/jack/learn 这会在当前目录下创建一个名为“learn”的文件夹在你的电脑上，并在这个目录下初始化一个.git文件夹，从远程仓库拉取下所有数据到你的文件夹里，如果你想自定义本地仓库的名字，可以在后面 添加 你的名字 二、记录每次更新到仓库 现在我们手上有了一个Git仓库，并从这个仓库取出了所有文件的工作拷贝。接下来，对这些文件做了修改，在完成了一个阶段的目标后，提交每次跟新到仓库。 一般文件都处于未修改，已修改，或已放入暂存区。工作目录中除已跟踪文件以外的所有文件都属于未跟踪文件，它们即不存在于上次快照的记录中，也没有放入暂存区。初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态。 编辑修改某些文件之后，由于上次提交后，你对它们做了修改，Git将它们标记为已修改文件。我们逐步将这些修改过的文件放入暂存区，再提交素有暂存了的修改 文件从本地 到暂存区 到远程仓库。简称文件处于什么状态，可以用 git status 简写“git st”,如果在克隆仓库后立即使用git st 会看到没有可以提交的，说明都没有被修改。 123$ git statuson branch masternothing to commit ,working directory clean 这些信息，告诉你当前目录没有出现任何处于未跟踪状态的新文件，否则Git会列出来，最后改命令还显示了当前所在分支，并告诉你这个分支同远程服务器上对应的分支没有偏离。现在分支名是”master”,这是默认的分支名。我们在Git分支后会降到。现在，让我们在项目下新建一个新的README文件，如果之前并不存在这个文件，使用 git status 命令你会看到新的未跟踪文件： 123456$ git statuson branch masterUntracked files: (use &quot;git add &lt;file&gt;..&quot; to include in what will be commited) READMEnothing added to commit but untracked files present (use &quot;git add&quot; to track) 在状态报告中可以看到新建的README文件出现在Untracked files 下面。未跟踪的文件以为这Git在之前的快照中没有这些文件。 1.添加新文件使用命令 git add 开始跟踪一个文件。所以，要跟踪README文件，运行 1$ git add README 此时再运行git status 命令， 会看到README 文件已被跟踪，并成功并处于暂存状态： 12345$ git statuson branch masterchanges to be commited: (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage) new file: README 只要在Change to be commited 这行下面的，就说明是已暂存状态，如果此时提交，那么该文件此时此刻的版本将被留存在历史历史记录中。 2.暂存已修改文件 现在我们来修改一个已被跟踪的文件。如果你修改了一个名字为index.html的已被跟踪文件然后运行 git status 命令，会看到以下内容： 123456789$ git statuson branch masterchange to be commited: (use &quot;git reset HEAD &lt;file&gt;..&quot; to unstage) new file: READMEChanges not staged for commit: (use &quot;git add &lt;file&gt;...&quot; to upadte what will be commited) (use &quot;git checkout --&lt;file&gt;..&quot; to discared changes in working directory) modified: index.html 文件index.html出现在Changes not staged for commit 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区，需要git add 命令 1234567$ git add index.html$ git statuson branch masterChanges to be commited: (use &quot;git reset HEAD &lt;file&gt;..” to unstage)new file: READMEmodified: index.html 现在两个文件都已被暂存，下次提交时就会一并记录到仓库，假设此时你想要在 index.html 里再加条注释，重新编辑存盘后，准备提交。再git status 你会发现： 1234567891011$ vim index.html$ git ston branch masterchanges to be commited: (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage) new file: README modified: index.htmlchanges not staged for commit: (use &quot;git add &lt;file&gt;...&quot; to discard changes in working directory) (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory) modified: index.html 出现了两个 index.html，同时出现在暂存区和非暂存区。git只不过暂存了你运行git add 命令的版本，如果你现在提交。idnex.html的版本是你最后一次运行 git add 命令的那个版本。而不是你运行 git commit 时，在工作目录中的当前版本，所以你需要重新git add。 3.查看已暂存和未暂存的修改 如果git status，输出不知道具体修改了什么，可以用git diff命令假如再次修改README 文件后暂存，然后编辑index.html文件后先不暂存,查看尚未暂存的文件更新了哪些部分，不加参数，直接输入 git diff 1234567891011121314$ git diffdiff --git a/index.html b/index.html--- a/index.html+++ b/index.html@@ -65,7 +65,8 @@ branch directly, things can get messy. Please include a nice description of your changes when you submit your PR; if we have to read the whole diff to figure out why you&apos;re contributing in the first place, you&apos;re less likely to get feedback and have your change-merged in.+merged in. Also, split your changes into comprehensive chunks if your patch is+longer than a dozen lines. If you are starting to work on a particular area, feel free to submit a PR that highlights your work in progress (and note in the PR title that it&apos;s 4.提交更新现在的暂存区已经可以提交了，再此之前看看是否有没被提交的 123$ git commit -a -m &apos;added new benchmarks&apos;[master 83e38c7] added new benchmarks 1 file changed, 5 insertions(+), 0 deletions(-) 5.移除文件 要从git中移除某个文件，就必须要从已跟踪文件清单中移除（确切的说，是从暂存区中移除），然后提交，可以用 git rm 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟文件清单中了。如果只是本地文件夹里删除文件，运行git status 时就会看到 123456789$ rm index.html$ git statuson branch masterYour branch is up-to-date with &apos;origin/master&apos;.Changes not staged for commit: (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be commited) (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory) deleted: index.html 然后在运行git rm 记录此次移除文件的操作： 12345678$git rm index.htmlrm &apos;index.html&apos;$git ston branch masterChanges to be commited: (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage) deleted: index.html 下一次提交时，该文件就不再纳入版本管理了，如果删除之前修改过而且已经放到暂存区，则必须要用强制删除选项-f如果只是想将它从git仓库里（即从暂存区域移除），但仍然希望保留在当前工作目录中，换句话说，你想让文件保留在磁盘中，但是不想被git 追踪，可以使用 –cached 选项 1$ git rm --cached README 6.移动文件要在git 中对文件改名，可以这么做： 1$ git mv file_from file_to 你会明白关于重命名操作的说明 1234567$ git mv README.md README$ git statuson branch masterChanges to be commited: (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage) renamed: README.md -&gt; README 其实，git mv 相当于运行了下面的三条命令 123$ mv README.md README$ git rm README.md$ git add README 如此分开操作，也是重命名 三、查看提交历史 在提交了若干更新，有或者克隆了某个项目之后，你也许想回顾选下提交历史。可以用git log 命令我从github 上clone 一个项目用于演示 1git clone https://github.com/schacon/simple-progit 然后在此项目中运行git log, 应该会看到下面的输出： 123456789101112131415161718$ git logcommit ca82a6dff817ec66f44342007202690a93763949Author: Scott Chacon &lt;schacon@gee-mail.com&gt;Date: Mon Mar 17 21:52:11 2008 -0700 changed the version numbercommit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7Author: Scott Chacon &lt;schacon@gee-mail.com&gt;Date: Sat Mar 15 16:40:33 2008 -0700 removed unnecessary testcommit a11bef06a3f659402fe7563abf99ad00de2209e6Author: Scott Chacon &lt;schacon@gee-mail.com&gt;Date: Sat Mar 15 10:31:28 2008 -0700 first commit git log 会按提交时间列出所有的更新，最新的在最上面。正如你所看到的，这个命令会列出每个SHA-1校检、作者的名字和电子邮件地址，提交时间和提交说明一个常用的选项是 -p 用来显示每次提交的内容差异，你也可以加上 -2 来仅显示最近两次提交 1234567891011121314151617181920212223242526272829303132333435363738394041$ git log -p -2commit ca82a6dff817ec66f44342007202690a93763949Author: Scott Chacon &lt;schacon@gee-mail.com&gt;Date: Mon Mar 17 21:52:11 2008 -0700 changed the version numberdiff --git a/Rakefile b/Rakefileindex a874b73..8f94139 100644--- a/Rakefile+++ b/Rakefile@@ -5,7 +5,7 @@ require &apos;rake/gempackagetask&apos; spec = Gem::Specification.new do |s| s.platform = Gem::Platform::RUBY s.name = &quot;simplegit&quot;- s.version = &quot;0.1.0&quot;+ s.version = &quot;0.1.1&quot; s.author = &quot;Scott Chacon&quot; s.email = &quot;schacon@gee-mail.com&quot; s.summary = &quot;A simple gem for using Git in Ruby code.&quot;commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7Author: Scott Chacon &lt;schacon@gee-mail.com&gt;Date: Sat Mar 15 16:40:33 2008 -0700 removed unnecessary testdiff --git a/lib/simplegit.rb b/lib/simplegit.rbindex a0a60ae..47c6340 100644--- a/lib/simplegit.rb+++ b/lib/simplegit.rb@@ -18,8 +18,3 @@ class SimpleGit end end--if $0 == __FILE__- git = SimpleGit.new- puts git.show-end\ No newline at end of file 四、撤销操作 在任何一个阶段，你都有可能想要撤销某些操作，这里，我们将会学习几个撤销你所做的修改有时候我们提交完了才发现漏掉了几个文件没有被添加，或者提交信息写错了。此时，可以运行带有 –amend 选项的提交命令尝试重新提交 1$ git commit --amend 这个命令会将暂存中的文件提交。如果你提交后发现忘记了暂存某些需要的修改，可以像下面这样操作 123$ git commit -m &apos;initial commit&apos;$ git add forgotten-file$ git commit --amend 五、远程仓库的使用 为了能在任意Git项目上协作，你需要知道如何管理自己的远程仓库。远程仓库是指托管在网络上的版本库，你可以有好几个远程仓库，有的可以读，有的可以读写，与他人协作涉及管理远程仓库以及根据需要推送或拉去数据。管理远程仓库包括了解如何添加远程仓库、移除无效的仓库，管理不同的远程分支并定义他们是否被跟踪等等。在本节中，我们将介绍一部分远程管理的技能。 2.查看远程仓库 如果你想查看你已经配置的远程仓库服务器，可以运行git remote 命令。它会列出你指定的每一个远程服务器的简写。如果你已经克隆了自己的仓库，那么至少应该能看到 origin- 这是Git 给你克隆的仓库服务器的默认名字 123456789$ git clone http://github.com/schacon/ticgitCloning into &apos;ticgit&apos;...remote: Reusing existing pack: 1857, done.remote: Total 1857 (delta 0), reused 0 (delta 0)Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.Resolving deltas: 100% (772/772), done.Checking connectivity... done.$ cd ticgit$ git remote origin 你也可以制定选项-v,会显示需要读写远程仓库使用的Git保存的简写与其对应的URL 123$ git remote -v origin https://github.com/schacon/ticgit(fetch)origin https://github.com/schacon/ticgit(push) 如果你的远程仓库不止一个，该命令会将它们全部列出。例如，与几个协作者合作的，拥有多个远程仓库的仓库看起来像这样 123456789101112$cd grit$git remote -vbakkdoor https://github.com/bakkdoor/grit (fetch)bakkdoor https://github.com/bakkdoor/grit (push)cho45 https://github.com/cho45/grit (fetch)cho45 https://github.com/cho45/grit (push)defunkt https://github.com/defunkt/grit (fetch)defunkt https://github.com/defunkt/grit (push)koke git://github.com/koke/grit.git (fetch)koke git://github.com/koke/grit.git (push)origin git@github.com:mojombo/grit.git (fetch)origin git@github.com:mojombo/grit.git (push) 这样我们可以轻松拉取其中任何一个用户的贡献。此外，我们大概还会有某些远程仓库的推送权限。 3.添加远程仓库 之前提到并展示了如何添加远程仓库的示例，运行 git remote add 添加一个新的远程Git仓库，同时指定一个你可以轻松引用的简写 1234567$ git remote origin $ git remote add pb https://github.com/paulboone/ticgit$ git remote -vorigin https://github.com/schacon/ticgit(fetch)origin https://github.com/schacon/ticgit(push)pb https://github.com/paulboone/ticigit(fetch)pb https://github.com./paulboone/ticigit(push) 现在你可以在命令行中使用字符串pb来代替整个URL。例如，如果你想拉取Paul的仓库中有但你没有的信息，可以运行 git fetch pb 12345678$ git fetch pbremote: Counting objects: 43, done.remote: Compressing objects: 100% (36/36), done.remote: Total 43 (delta 10), reused 31 (delta 5)Unpacking objects: 100% (43/43), done.From https://github.com/paulboone/ticgit * [new branch] master -&gt; pb/master * [new branch] ticgit -&gt; pb/ticgit 现在Paul的master分支可以在本地通过pb/master访问到- 你可以将它合并到自己的某个分支中，或者如果你想要查看它的话，可以检出一个指向该点的本地分支 4.从远程仓库中抓取与拉取就如刚才所见，从远程仓库中获得数据，可以执行： 1$ git fetch [remote-name] 这个命令会访问远程仓库，从中拉取你没有的数据。执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时 合并或查看。如果你使用clone命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以”origin”为简写。所以，git fetch orgin 会抓取克隆(或上一次抓取)后新推送的所有工作。当准备好时你必须手动将其合并入你的工作。 如果你有一个分支设置为跟踪一个远程分支，可以使用git pull命令来自动抓取然后合并远程分支到当前分支。这对你来说可能是一个更简单或更舒服的流程；默认情况下，git clone命令会自动设置本地 master分支跟踪克隆的远程仓库的master分支(或不管是什么名字的默认分支)。运行git pull通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前分支 5.推送到远程仓库 当你想分享你的项目时，必须将其推送到上游。这个命令很简单 git push [remote-name][branch-name]。当你想要将master分支推送到origin 服务器时，那么运行这个命令就可以 1$ git push origin master 只有当你克隆服务器的写入权限，并且之前没有人推送过时，这条命令才生效。当你和其他人在同一时间克隆，他们先推送到上游然后你在推送到上游，你的推送就会被拒绝，你必须先将他们的工作拉取下来并将其合并进你的工作后才能推送。 6.查看远程仓库 如果想要查看某一个远程仓库的更多信息，可以使用git remote show[remote-name] 命令。如果想以一个特定的缩写名运行这个命令，例如origin，会得到像下面的信息： 123456789101112$ git remote show origin*remote origin Fetch URL: https://github.com/schacon/ticgit Push URL: https://github.com/schacon/ticgit HEAD branch: master Remote branches: master tracked dev-branch tracked Local branch configured for &apos;git pull&apos;: master merges with remote master Local ref configured for &apos;git push&apos;: master pushes to master (up to date) 它同样会列出远程仓库URL与跟踪分支的信息。这些信息非常有用，它告诉你正处于master分支，并且如果运行git pull，就会抓取所有的远程应用，然后将远程master分支合并到本地master分支。它也会列出拉取到的所有远程应用。 7.远程仓库的移除与重命名 如果想要重命名引用的名字可以运行git remote rename 去修改一个远程仓库的简写名。例如，想要将pb重命名为paul,可以用git remote renmae 这样做： 12$git remote rename pb paul$git remote origin paul 值得注意的是这同样也会修改你的远程分支名字。那些过去引用pb/master的现在回引用paul/master。如果因为一些原因想要移除一个远程仓库-你已经从服务器上搬走了或不想使用某一个特定的镜像了，又或者某一个贡献者不再贡献了-可以使用gitremote rm: 12$git remote rm paul$git remote origin 六、打标签 像其他版本控制系统(vcs)系统一样，Git可以给历史中的某一个提交打上标签，以示重要。比较有代表性的是人们会使用这个功能来标记发布结点。 1.列出标签在Git中列出已有的标签是，只需要输入git tag: 123$git tagv0.1v1.3 这个命令以字母顺序列出标签，但是它们出现的顺序并不重要你也可以使用特定的模式查找标签。例如，Git自身的源代码仓库包含标签的数量超过500个。如果只对1.8.5系列感兴趣，可以运行： 1234567891011$git tag -1 &apos;v.1.8.5&apos;v1.8.5v1.8.5-rc0v1.8.5-rc1v1.8.5-rc2v1.8.5-rc3v1.8.5.1v1.8.5.2v1.8.5.3v1.8.5.4v1.8.5.5 2.创建标签git使用两种主要类型的标签：轻量标签(light)与附注标签 3.附注标签 在Git中创建一个附注标签是很简单的。最简单的方式是当你运行tag命令时指定-a选项： 12345$git tag -a v1.4 -m &apos;my version 1.4&apos;$git tagv0.1v1.3v1.4 -m选项指定了一条将会存储在标签中的信息。如果没有为附注标签指定一条信息，Git会运行编辑器要求你输入信息通过git show 命令可以看到标签信息与对应的提交信息 123456789101112$git show v1.4tag 1.4Tagger: Ben Straub &lt;ben@straub.cc&gt;Date: Sat May 3 20:19:12 2014 -0700my version 1.4commit ca82a6dff817ec66f44342007202690a93763949Author: Scott Chacon &lt;schacon@gee-mail.com&gt;Date: Mon Mar 17 21:52:11 2008 -0700 changed the version number 你会看到显示了标签者的信息、打标签的日期时间、附注信息，然后显示具体的提交信息 另一种给提交打标签的方式是使用轻量标签。 轻量标签本质上是将提交校验和存储到一个文件中 - 没有保存任何其他信息。 创建轻量标签，不需要使用 -a、-s 或 -m 选项，只需要提供标签名字： 1234567$git tag v1.4-1w$git tagv0.1v1.3v1.4v1.4-1wv1.5 七、设置别名1.常用命令缩写git status 改成 git st git checkout 改成 git cogit commit 改成 git ci git branch 改成 git br可以输入以下命令 1234$git config --global alias.co checkout$git config --global alias.br branch$git config --global alias.ci commit$git config --global alias.st status 以上差不多就是git常用的所有命令，后面还有 关于 git 分支]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Emmet for sublime HTML/CSS代码编写神器]]></title>
      <url>%2F2016%2F12%2F19%2FEmmet-for-sublime%2F</url>
      <content type="text"><![CDATA[Emmet的简单介绍 一、快速编写HTML代码1.初始化HTML文档需要包含一些固定的标签，比如、、等，现在你只需要输入”!”或”html5”，然后按Tab键：可以迅速创建一个HTML结构 123456789&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;/body&gt; 2.轻松添加class、id、文本和属性 连续输入元素名称的ID，Emmet会自动为你补全，比如输入p#foo会生成: 1&lt;p id=&quot;foo&gt;&lt;/p&gt; 连续输入类和id,比如p.bar#foo,会自动生成： 1&lt;p class=&quot;bar&quot; id=&quot;foo&quot;&gt;&lt;/p&gt; 下面来看看如何定义HTML元素的内容和属性。你可以通过输入h1{foo}和a[href=#],就可以自动生成如下代码 12&lt;h1&gt;foo&lt;/h1&gt;&lt;a href=&quot;#&quot;&gt;&lt;/a&gt; 3.嵌套 现在你只需要一行代码就可以实现标签的嵌套。 123456789&gt;: 子元素符号， 表示嵌套的元素 p&gt;span &lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;p&gt;+: 同级标签符号 h1+h2 &lt;h1&gt;&lt;/h1&gt; &lt;h2&gt;&lt;/h2&gt;^:可以使该符号的标签提升一行 p&gt;span^p &lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;/p&gt; 4.分组，你可以通过嵌套和括号来快速生成一些代码块，比如输入(.foo&gt;h1)+(.bar&gt;h2)会自动生成如下html代码 123456&lt;div class=&quot;foo&quot;&gt;&lt;h1&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class=&quot;bar&quot;&gt;&lt;h2&gt;&lt;/h2&gt;&lt;/div&gt; 5.隐式标签 声明一个带类的标签，只需要输入div.item,就会生成 1&lt;div class=&quot;item&quot;&gt;&lt;/div&gt; 在过去版本中，可以省略掉div。现在如果只要输入。.item,则Emmet会根据父标签进行判定。比如在ul中输入.item,就会生成 1&lt;li class=&quot;item&quot;&gt;&lt;/li&gt; 下面是所有的隐式标签名称： li：用于ul和ol中 tr：用于table、tbody、thead和tfoot中 td：用于tr中 option：用于select和optgroup中 6.定义多个元素 要定义多个元素可以使用“*”符号。比如，ul&gt;li*3可以生成如下代码 12345&lt;ul&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt;&lt;/ul&gt; 7.定义多个带属性的元素 如果输入 ul&gt;li.item$*3，将会生成如下代码： 12345&lt;ul&gt; &lt;li class=&quot;item1&quot;&gt;&lt;/li&gt; &lt;li class=&quot;item2&quot;&gt;&lt;/li&gt; &lt;li class=&quot;item3&quot;&gt;&lt;/li&gt;&lt;/ul&gt; 二、css缩写1.值 比如要定义元素的宽度，只需要输入W100，即可生成 12css代码width: 100px; 除了px，也可以生成其他单位，比如输入h10p+m5e,结果如下： 1234567css代码1.height: 10%;2.margin:5em;单位别名列表： p表示% e表示em x表示ex 2.附加属性 可能你之前已经了解了一些缩写，比如@f,可以生成： 12345css代码@font-face &#123;font-family:;src: url();&#125; 3.模糊匹配 如果有哪些缩写你拿不准，Emmet会根据你的输入内容匹配最接近的语法，比如输入ov:h、ov-h、ovh都会生成 12css代码overflow: hidden; 4.供应商前缀 如果输入非W3C标准的CSS属性，Emmet会自动加上供应商前缀，比如输入trs会生成 123456css代码-webkit-transform: ;-moz-transform: ;-ms-transform: ;-o-transform: ;transform: ; 三、你还可以定制Emmet插件：1.添加新缩写或更新现有缩写，可修改snippets.json文件 2.更改Emmet过滤器和操作的行为，可修改preferences.json文件 3.定义如何生成HTML或XML代码，可修改syntaxProfiles.json文件]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[滕王阁序]]></title>
      <url>%2F2016%2F12%2F12%2F%E6%BB%95%E7%8E%8B%E9%98%81%E5%BA%8F%2F</url>
      <content type="text"><![CDATA[滕王阁序作者：王勃 年代：唐朝 豫章故郡，洪都新府。星分翼轸(zhěn)，地接衡庐。襟三江而带五湖，控蛮荆而引瓯越。物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃之榻。雄州雾列，俊采星驰。台隍枕夷夏之交，宾主尽东南之美。都督阎公之雅望，棨(qǐ)戟(jǐ)遥临；宇文新州之懿(yì)范，襜(chān)帷(wéi)暂驻。十旬休假，胜友如云；千里逢迎，高朋满座。腾蛟起凤，孟学士之词宗；紫电青霜，王将军之武库。家君作宰，路出名区；童子何知，躬逢胜饯。 时维九月，序属三秋。潦(lǎo)水尽而寒潭清，烟光凝而暮山紫。俨(yān)骖(cān)騑(fēi)于上路，访风景于崇阿(ē)。临帝子长洲，得天人之旧馆。层峦耸翠，上出重霄；飞阁流丹，下临无地。鹤汀(tīng)凫(fǔ)渚(zhǔ)，穷岛屿之萦(yíng)回；桂殿兰宫，即冈峦之体势。 披绣闼(tà)，俯雕甍(méng)，山原旷其盈视，川泽纡(yū)其骇瞩。闾(lǘ)阎(yán)扑地，钟鸣鼎食之家；舸(gě)舰迷津，青雀黄龙之舳(zhú)。云销雨霁(jì)，彩彻区明。落霞与孤鹜(wù)齐飞，秋水共长天一色。渔舟唱晚，响穷彭蠡(lǐ)之滨；雁阵惊寒，声断衡阳之浦。 遥襟甫(fǔ)畅，逸兴遄(chuán)飞。爽簌发而清风生，纤歌凝而白云遏(è)。睢(suī)园绿竹，气凌彭泽之樽；邺(yè)水朱华，光照临川之笔。四美具，二难并。穷睇(dǐ)眄(miǎn)于中天，极娱游于暇日。天高地迥(jiǒng)，觉宇宙之无穷；兴尽悲来，识盈虚之有数。望长安于日下，目吴会(kuài)于云间。地势极而南溟(míng)深，天柱高而北辰远。关山难越，谁悲失路之人？萍水相逢，尽是他乡之客。怀帝阍(hūn)而不见，奉宣室以何年？ 嗟(jiē)乎！时运不齐，命途多舛(chuǎn)。冯唐易老，李广难封。屈贾谊(yì)于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？所赖君子见机，达人知命。老当益壮，宁移白首之心？穷且益坚，不坠青云之志。酌贪泉而觉爽，处涸辙(hé)(zhé)以犹欢。北海虽赊(shē)，扶摇可接；东隅(yú)已逝，桑榆非晚。孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！勃，三尺为名，一介书生。无路请缨，等终军之弱冠(guàn)；有怀投笔，慕宗悫(què)之长风。舍簪(zān)笏(hù)于百龄，奉晨昏于万里。非谢家之宝树，接孟氏之芳邻。他日趋庭，叨(tāo)陪鲤对；今兹捧袂，喜托龙门；杨意不逢，扶凌云而自惜；钟期既遇，奏流水以何惭？ 呜呼！胜地不常，盛筵(yán)难再；兰亭已矣，梓(zǐ)泽丘墟。临别赠言，幸承恩于伟饯；登高作赋，是所望于群公。敢竭鄙怀，恭疏短引；一言均赋，四韵俱成。请洒潘江，各倾陆海云尔： 1234 滕王高阁临江渚，佩玉鸣鸾罢歌舞。 画栋朝飞南浦云，珠帘暮卷西山雨。 闲云谭影日悠悠，物转星移几度秋。 阁中帝子今何在？栏外长江空自流。 译文： 这里是汉代的豫章郡城，如今是洪州的都督府，天上的方位属于翼，轸两星宿的分野，地上的位置连结着衡山和庐山。以三江为衣襟，以五湖为衣带、控制着楚地，连接着闽越。物类的精华，是上天的珍宝，宝剑的光芒直冲上牛、斗二星的区间。人中有英杰，因大地有灵气，陈蕃专为徐孺设下几榻。雄伟的洪州城，房屋像雾一般罗列，英俊的人才，像繁星一样地活跃。城池座落在夷夏交界的要害之地，主人与宾客，集中了东南地区的英俊之才。都督阎公，享有崇高的名望，远道来到洪州坐镇，宇文州牧，是美德的楷模，赴任途中在此暂留。正逢十日休假的日子，杰出的友人云集，高贵的宾客，也都不远千里来到这里聚会。文坛领袖孟学士，文章的气势像腾起的蛟龙，飞舞的彩凤，王将军的武库里，藏有像紫电、青霜这样锋利的宝剑。由于父亲在交趾做县令，我在探亲途中经过这个著名的地方。我年幼无知，竟有幸亲身参加了这次盛大的宴会。 时当九月，秋高气爽。积水消尽，潭水清澈，天空凝结着淡淡的云烟，暮霭中山峦呈现一片紫色。在高高的山路上驾着马车，在崇山峻岭中访求风景。来到昔日帝子的长洲，找到仙人居住过的宫殿。这里山峦重叠，青翠的山峰耸入云霄。凌空的楼阁，红色的阁道犹如飞翔在天空，从阁上看不到地面。白鹤，野鸭停息的小洲，极尽岛屿的纡曲回环之势，雅浩的宫殿，跟起伏的山峦配合有致。 披开雕花的阁门，俯视彩饰的屋脊，山峰平原尽收眼底，湖川曲折令人惊讶。遍地是里巷宅舍，许多钟鸣鼎食的富贵人家。舸舰塞满了渡口，尽是雕上了青雀黄龙花纹的大船。正值雨过天晴，虹消云散，阳光朗煦，落霞与孤雁一起飞翔，秋水和长天连成一片。傍晚渔舟中传出的歌声，响彻彭蠡湖滨，雁群感到寒意而发出的惊叫，鸣声到衡阳之浦为止。放眼远望，胸襟刚感到舒畅，超逸的兴致立即兴起，排箫的音响引来的徐徐清风，柔缓的歌声吸引住飘动的白云。像睢园竹林的聚会，这里善饮的人，酒量超过彭泽县令陶渊明，像邺水赞咏莲花，这里诗人的文采，胜过临川内史谢灵运。（音乐与饮食，文章和言语）这四种美好的事物都已经齐备，（良辰美景，赏心乐事）这两个难得的条件也凑合在一起了，向天空中极目远眺，在假日里尽情欢娱。苍天高远，大地寥廓，令人感到宇宙的无穷无尽。欢乐逝去，悲哀袭来，我知道了事物的兴衰成败是有定数的。西望长安，东指吴会，南方的陆地已到尽头，大海深不可测，北方的北斗星多么遥远，天柱高不可攀。关山重重难以越过，有谁同情不得志的人？萍水偶尔相逢，大家都是异乡之客．怀念着君王的宫门，但却不被召见，什么时候才能够去侍奉君王呢？ 呵，各人的时机不同，人生的命运多有不顺。冯唐容易衰老，李广难得封侯。使贾谊遭受委屈，贬于长沙，并不是没有圣明的君主，使梁鸿逃匿到齐鲁海滨，难道不是政治昌明的时代？只不过由于君子安于贫贱，通达的人知道自己的命运罢了。年纪虽然老了，但志气应当更加旺盛，怎能在白头时改变心情？境遇虽然困苦，但节操应当更加坚定，决不能抛弃自己的凌云壮志。即使喝了贪泉的水，心境依然清爽廉洁；即使身处于干涸的主辙中，胸怀依然开朗愉快。北海虽然十分遥远，乘着羊角旋风还是能够达到，早晨虽然已经过去，而珍惜黄昏却为时不晚。孟尝君心地高洁，但白白地怀抱着报国的热情，阮籍为人放纵不羁，我们怎能学他那种穷途的哭泣！我地位卑微，只是一个书生。虽然和终军一样年已二十一，却无处去请缨杀敌。我羡慕宗悫那种“乘长风破万里浪”的英雄气概，也有投笔从戎的志向。如今我抛弃了一生的功名，不远万里去朝夕侍奉父亲。虽然称不上谢家的“宝树”，但是能和贤德之士相交往。不久我将见到父亲，聆听他的教诲。今天我侥幸地奉陪各位长者，高兴地登上龙门。假如碰不上杨得意那样引荐的人，就只有抚拍着自己的文章而自我叹惜。既然已经遇到了钟子期，就弹奏一曲《流水》又有什么羞愧呢？ 呵！名胜之地不能常存，盛大的宴会难以再逢。兰亭宴集已为陈迹，石崇的梓泽也变成了废墟。承蒙这个宴会的恩赐，让我临别时作了这一篇序文，至于登高作赋，这只有指望在座诸公了。我只是冒昧地尽我微薄的心意，作了短短的引言。在座诸位都按各自分到的韵字赋诗，我已写成了四韵八句。请在座诸位施展潘岳，陆机一样的才笔，各自谱写瑰丽的诗篇吧！ 古代词文中，我个人是最喜欢这篇了！]]></content>
    </entry>

    
  
  
</search>
